!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACPI_FDE_MAX_FD	fdc.c	2849;"	d	file:
ADDR_SHIFT	nand.c	127;"	d	file:
ADDR_SHIFT	nand.c	132;"	d	file:
ADDR_SHIFT	nand.c	137;"	d	file:
ALE	tc58128.c	12;"	d	file:
AQA_ACQS_MASK	femu/nvme.h	/^    AQA_ACQS_MASK   = 0xfff,$/;"	e	enum:NvmeAqaMask
AQA_ACQS_SHIFT	femu/nvme.h	/^    AQA_ACQS_SHIFT  = 16,$/;"	e	enum:NvmeAqaShift
AQA_ASQS_MASK	femu/nvme.h	/^    AQA_ASQS_MASK   = 0xfff,$/;"	e	enum:NvmeAqaMask
AQA_ASQS_SHIFT	femu/nvme.h	/^    AQA_ASQS_SHIFT  = 0,$/;"	e	enum:NvmeAqaShift
AddrBucket	femu/ocssd/oc12.h	/^typedef struct AddrBucket {$/;"	s
AddrBucket	femu/ocssd/oc12.h	/^} AddrBucket;$/;"	t	typeref:struct:AddrBucket
BBSSD	femu/nvme.h	/^static inline bool BBSSD(FemuCtrl *n)$/;"	f
BLKIF_PROTOCOL_NATIVE	xen_blkif.h	/^    BLKIF_PROTOCOL_NATIVE = 1,$/;"	e	enum:blkif_protocol
BLKIF_PROTOCOL_X86_32	xen_blkif.h	/^    BLKIF_PROTOCOL_X86_32 = 2,$/;"	e	enum:blkif_protocol
BLKIF_PROTOCOL_X86_64	xen_blkif.h	/^    BLKIF_PROTOCOL_X86_64 = 3,$/;"	e	enum:blkif_protocol
BLK_BITS	femu/bbssd/backup/ftl.h	48;"	d
BLK_BITS	femu/bbssd/ftl.h	48;"	d
BLOCK_SHIFT	onenand.c	40;"	d	file:
BM_START_SECTOR_NB	femu/bbssd/common.h	62;"	d
BRRD	m25p80.c	/^    BRRD = 0x16,$/;"	e	enum:__anon42	file:
BRWR	m25p80.c	/^    BRWR = 0x17,$/;"	e	enum:__anon42	file:
BULK_ERASE	m25p80.c	/^    BULK_ERASE = 0xc7,$/;"	e	enum:__anon42	file:
BULK_ERASE_60	m25p80.c	/^    BULK_ERASE_60 = 0x60,$/;"	e	enum:__anon42	file:
CAP_AMS_MASK	femu/nvme.h	/^    CAP_AMS_MASK       = 0x3,$/;"	e	enum:NvmeCapMask
CAP_AMS_SHIFT	femu/nvme.h	/^    CAP_AMS_SHIFT       = 17,$/;"	e	enum:NvmeCapShift
CAP_CQR_MASK	femu/nvme.h	/^    CAP_CQR_MASK       = 0x1,$/;"	e	enum:NvmeCapMask
CAP_CQR_SHIFT	femu/nvme.h	/^    CAP_CQR_SHIFT       = 16,$/;"	e	enum:NvmeCapShift
CAP_CSS_MASK	femu/nvme.h	/^    CAP_CSS_MASK       = 0xff,$/;"	e	enum:NvmeCapMask
CAP_CSS_SHIFT	femu/nvme.h	/^    CAP_CSS_SHIFT       = 37,$/;"	e	enum:NvmeCapShift
CAP_DSTRD_MASK	femu/nvme.h	/^    CAP_DSTRD_MASK     = 0xf,$/;"	e	enum:NvmeCapMask
CAP_DSTRD_SHIFT	femu/nvme.h	/^    CAP_DSTRD_SHIFT     = 32,$/;"	e	enum:NvmeCapShift
CAP_MPSMAX_MASK	femu/nvme.h	/^    CAP_MPSMAX_MASK    = 0xf,$/;"	e	enum:NvmeCapMask
CAP_MPSMAX_SHIFT	femu/nvme.h	/^    CAP_MPSMAX_SHIFT    = 52,$/;"	e	enum:NvmeCapShift
CAP_MPSMIN_MASK	femu/nvme.h	/^    CAP_MPSMIN_MASK    = 0xf,$/;"	e	enum:NvmeCapMask
CAP_MPSMIN_SHIFT	femu/nvme.h	/^    CAP_MPSMIN_SHIFT    = 48,$/;"	e	enum:NvmeCapShift
CAP_MQES_MASK	femu/nvme.h	/^    CAP_MQES_MASK      = 0xffff,$/;"	e	enum:NvmeCapMask
CAP_MQES_SHIFT	femu/nvme.h	/^    CAP_MQES_SHIFT      = 0,$/;"	e	enum:NvmeCapShift
CAP_NSSRS_MASK	femu/nvme.h	/^    CAP_NSSRS_MASK     = 0x1,$/;"	e	enum:NvmeCapMask
CAP_NSSRS_SHIFT	femu/nvme.h	/^    CAP_NSSRS_SHIFT     = 33,$/;"	e	enum:NvmeCapShift
CAP_OC_MASK	femu/nvme.h	/^    CAP_OC_MASK        = 0x1,$/;"	e	enum:NvmeCapMask
CAP_OC_SHIFT	femu/nvme.h	/^    CAP_OC_SHIFT        = 44,$/;"	e	enum:NvmeCapShift
CAP_TO_MASK	femu/nvme.h	/^    CAP_TO_MASK        = 0xff,$/;"	e	enum:NvmeCapMask
CAP_TO_SHIFT	femu/nvme.h	/^    CAP_TO_SHIFT        = 24,$/;"	e	enum:NvmeCapShift
CC_AMS_MASK	femu/nvme.h	/^    CC_AMS_MASK     = 0x7,$/;"	e	enum:NvmeCcMask
CC_AMS_SHIFT	femu/nvme.h	/^    CC_AMS_SHIFT    = 11,$/;"	e	enum:NvmeCcShift
CC_CSS_MASK	femu/nvme.h	/^    CC_CSS_MASK     = 0x7,$/;"	e	enum:NvmeCcMask
CC_CSS_SHIFT	femu/nvme.h	/^    CC_CSS_SHIFT    = 4,$/;"	e	enum:NvmeCcShift
CC_EN_MASK	femu/nvme.h	/^    CC_EN_MASK      = 0x1,$/;"	e	enum:NvmeCcMask
CC_EN_SHIFT	femu/nvme.h	/^    CC_EN_SHIFT     = 0,$/;"	e	enum:NvmeCcShift
CC_IOCQES_MASK	femu/nvme.h	/^    CC_IOCQES_MASK  = 0xf,$/;"	e	enum:NvmeCcMask
CC_IOCQES_SHIFT	femu/nvme.h	/^    CC_IOCQES_SHIFT = 20,$/;"	e	enum:NvmeCcShift
CC_IOSQES_MASK	femu/nvme.h	/^    CC_IOSQES_MASK  = 0xf,$/;"	e	enum:NvmeCcMask
CC_IOSQES_SHIFT	femu/nvme.h	/^    CC_IOSQES_SHIFT = 16,$/;"	e	enum:NvmeCcShift
CC_MPS_MASK	femu/nvme.h	/^    CC_MPS_MASK     = 0xf,$/;"	e	enum:NvmeCcMask
CC_MPS_SHIFT	femu/nvme.h	/^    CC_MPS_SHIFT    = 7,$/;"	e	enum:NvmeCcShift
CC_SHN_MASK	femu/nvme.h	/^    CC_SHN_MASK     = 0x3,$/;"	e	enum:NvmeCcMask
CC_SHN_SHIFT	femu/nvme.h	/^    CC_SHN_SHIFT    = 14,$/;"	e	enum:NvmeCcShift
CE1	tc58128.c	8;"	d	file:
CE2	tc58128.c	9;"	d	file:
CFG_DUMMY_CLK_LEN	m25p80.c	140;"	d	file:
CHANNEL_BLOCKING	femu/bbssd/common.h	21;"	d
CHANNEL_IS_EMPTY	femu/bbssd/common.h	173;"	d
CHANNEL_IS_ERASE	femu/bbssd/common.h	176;"	d
CHANNEL_IS_READ	femu/bbssd/common.h	175;"	d
CHANNEL_IS_WRITE	femu/bbssd/common.h	174;"	d
CHIP_BLOCKING	femu/bbssd/common.h	22;"	d
CH_BITS	femu/bbssd/backup/ftl.h	53;"	d
CH_BITS	femu/bbssd/ftl.h	53;"	d
CH_OP	femu/bbssd/common.h	169;"	d
CLE	tc58128.c	13;"	d	file:
CMBLOC_BIR_MASK	femu/nvme.h	/^    CMBLOC_BIR_MASK  = 0x7,$/;"	e	enum:NvmeCmblocMask
CMBLOC_BIR_SHIFT	femu/nvme.h	/^    CMBLOC_BIR_SHIFT  = 0,$/;"	e	enum:NvmeCmblocShift
CMBLOC_OFST_MASK	femu/nvme.h	/^    CMBLOC_OFST_MASK = 0xfffff,$/;"	e	enum:NvmeCmblocMask
CMBLOC_OFST_SHIFT	femu/nvme.h	/^    CMBLOC_OFST_SHIFT = 12,$/;"	e	enum:NvmeCmblocShift
CMBSZ_CQS_MASK	femu/nvme.h	/^    CMBSZ_CQS_MASK   = 0x1,$/;"	e	enum:NvmeCmbszMask
CMBSZ_CQS_SHIFT	femu/nvme.h	/^    CMBSZ_CQS_SHIFT   = 1,$/;"	e	enum:NvmeCmbszShift
CMBSZ_LISTS_MASK	femu/nvme.h	/^    CMBSZ_LISTS_MASK = 0x1,$/;"	e	enum:NvmeCmbszMask
CMBSZ_LISTS_SHIFT	femu/nvme.h	/^    CMBSZ_LISTS_SHIFT = 2,$/;"	e	enum:NvmeCmbszShift
CMBSZ_RDS_MASK	femu/nvme.h	/^    CMBSZ_RDS_MASK   = 0x1,$/;"	e	enum:NvmeCmbszMask
CMBSZ_RDS_SHIFT	femu/nvme.h	/^    CMBSZ_RDS_SHIFT   = 3,$/;"	e	enum:NvmeCmbszShift
CMBSZ_SQS_MASK	femu/nvme.h	/^    CMBSZ_SQS_MASK   = 0x1,$/;"	e	enum:NvmeCmbszMask
CMBSZ_SQS_SHIFT	femu/nvme.h	/^    CMBSZ_SQS_SHIFT   = 0,$/;"	e	enum:NvmeCmbszShift
CMBSZ_SZU_MASK	femu/nvme.h	/^    CMBSZ_SZU_MASK   = 0xf,$/;"	e	enum:NvmeCmbszMask
CMBSZ_SZU_SHIFT	femu/nvme.h	/^    CMBSZ_SZU_SHIFT   = 8,$/;"	e	enum:NvmeCmbszShift
CMBSZ_SZ_MASK	femu/nvme.h	/^    CMBSZ_SZ_MASK    = 0xfffff,$/;"	e	enum:NvmeCmbszMask
CMBSZ_SZ_SHIFT	femu/nvme.h	/^    CMBSZ_SZ_SHIFT    = 12,$/;"	e	enum:NvmeCmbszShift
CMBSZ_WDS_MASK	femu/nvme.h	/^    CMBSZ_WDS_MASK   = 0x1,$/;"	e	enum:NvmeCmbszMask
CMBSZ_WDS_SHIFT	femu/nvme.h	/^    CMBSZ_WDS_SHIFT   = 4,$/;"	e	enum:NvmeCmbszShift
CMDState	m25p80.c	/^} CMDState;$/;"	t	typeref:enum:__anon43	file:
COLD_RAN	femu/bbssd/common.h	164;"	d
COLD_RAN_WRITE	femu/bbssd/common.h	130;"	d
CONT_SEQ_WRITE	femu/bbssd/common.h	127;"	d
CQ_POLLING_PERIOD_NS	femu/nvme.h	1343;"	d
CSTS_CFS_MASK	femu/nvme.h	/^    CSTS_CFS_MASK   = 0x1,$/;"	e	enum:NvmeCstsMask
CSTS_CFS_SHIFT	femu/nvme.h	/^    CSTS_CFS_SHIFT      = 1,$/;"	e	enum:NvmeCstsShift
CSTS_NSSRO_MASK	femu/nvme.h	/^    CSTS_NSSRO_MASK = 0x1,$/;"	e	enum:NvmeCstsMask
CSTS_NSSRO_SHIFT	femu/nvme.h	/^    CSTS_NSSRO_SHIFT    = 4,$/;"	e	enum:NvmeCstsShift
CSTS_RDY_MASK	femu/nvme.h	/^    CSTS_RDY_MASK   = 0x1,$/;"	e	enum:NvmeCstsMask
CSTS_RDY_SHIFT	femu/nvme.h	/^    CSTS_RDY_SHIFT      = 0,$/;"	e	enum:NvmeCstsShift
CSTS_SHST_MASK	femu/nvme.h	/^    CSTS_SHST_MASK  = 0x3,$/;"	e	enum:NvmeCstsMask
CSTS_SHST_SHIFT	femu/nvme.h	/^    CSTS_SHST_SHIFT     = 2,$/;"	e	enum:NvmeCstsShift
C__bm_empty_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__bm_empty_offset;          \/* 4bytes (acc: 79) *\/$/;"	m	struct:HmbMeta
C__bm_empty_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__bm_empty_seg_id;          \/* 2bytes (acc: 75) *\/$/;"	m	struct:HmbMeta
C__bm_empty_table_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__bm_empty_table_offset;    \/* 4bytes (acc: 115) *\/$/;"	m	struct:HmbMeta
C__bm_empty_table_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__bm_empty_table_seg_id;    \/* 2bytes (acc: 111) *\/$/;"	m	struct:HmbMeta
C__bm_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__bm_offset;                \/* 4bytes (acc: 73) *\/$/;"	m	struct:HmbMeta
C__bm_parts_cnt	femu/bbssd/hmb_types.h	/^	uint32_t C__bm_parts_cnt;             \/* 4bytes (acc: 93) *\/$/;"	m	struct:HmbMeta
C__bm_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__bm_seg_id;                \/* 2bytes (acc: 69) *\/$/;"	m	struct:HmbMeta
C__cache_unit_bits	femu/bbssd/hmb_types.h	/^	uint16_t C__cache_unit_bits;          \/* 2bytes (acc: 123) *\/$/;"	m	struct:HmbMeta
C__heads_ST_num	femu/bbssd/hmb_types.h	/^	uint16_t C__heads_ST_num;     \/* 2bytes (acc: 40) *\/$/;"	m	struct:HmbMeta
C__heads_ST_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__heads_ST_offset;  \/* 4bytes (acc: 38) *\/$/;"	m	struct:HmbMeta
C__heads_ST_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__heads_ST_seg_id;  \/* 2bytes (acc: 34) *\/$/;"	m	struct:HmbMeta
C__heads_ST_unit	femu/bbssd/hmb_types.h	/^	uint32_t C__heads_ST_unit;    \/* 4bytes (acc: 44) *\/$/;"	m	struct:HmbMeta
C__heads_cnt_max	femu/bbssd/hmb_types.h	/^	uint32_t C__heads_cnt_max;            \/* 4bytes (acc: 49) *\/$/;"	m	struct:HmbMeta
C__heads_hash_bit	femu/bbssd/hmb_types.h	/^	uint8_t  C__heads_hash_bit;           \/* 1byte  (acc: 45) *\/$/;"	m	struct:HmbMeta
C__n_cached	femu/bbssd/hmb_types.h	/^	uint32_t C__n_cached;                 \/* 4bytes (acc: 97) *\/$/;"	m	struct:HmbMeta
C__n_dirty	femu/bbssd/hmb_types.h	/^	uint32_t C__n_dirty;                  \/* 4bytes (acc: 101) *\/$/;"	m	struct:HmbMeta
C__n_max_entries	femu/bbssd/hmb_types.h	/^	uint32_t C__n_max_entries;            \/* 4bytes (acc: 32) *\/$/;"	m	struct:HmbMeta
C__pctg_explicitFlush	femu/bbssd/hmb_types.h	/^	uint16_t C__pctg_explicitFlush;       \/* 2bytes (acc: 103) *\/$/;"	m	struct:HmbMeta
C__sorted_ST_num	femu/bbssd/hmb_types.h	/^	uint16_t C__sorted_ST_num;    \/* 2bytes (acc: 57) *\/$/;"	m	struct:HmbMeta
C__sorted_ST_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__sorted_ST_offset; \/* 4bytes (acc: 55) *\/$/;"	m	struct:HmbMeta
C__sorted_ST_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__sorted_ST_seg_id; \/* 2bytes (acc: 51) *\/$/;"	m	struct:HmbMeta
C__sorted_ST_unit	femu/bbssd/hmb_types.h	/^	uint32_t C__sorted_ST_unit;   \/* 4bytes (acc: 61) *\/$/;"	m	struct:HmbMeta
C__table_ST_num	femu/bbssd/hmb_types.h	/^	uint16_t C__table_ST_num;     \/* 2bytes (acc: 24) *\/$/;"	m	struct:HmbMeta
C__table_ST_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__table_ST_offset;  \/* 4bytes (acc: 22) *\/$/;"	m	struct:HmbMeta
C__table_ST_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__table_ST_seg_id;  \/* 2bytes (acc: 18) *\/$/;"	m	struct:HmbMeta
C__table_ST_unit	femu/bbssd/hmb_types.h	/^	uint32_t C__table_ST_unit;    \/* 4bytes (acc: 28) *\/$/;"	m	struct:HmbMeta
C__table_bm_ST_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__table_bm_ST_offset;       \/* 4bytes (acc: 121) *\/$/;"	m	struct:HmbMeta
C__table_bm_ST_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__table_bm_ST_seg_id;       \/* 2bytes (acc: 117) *\/$/;"	m	struct:HmbMeta
C__urgency_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__urgency_offset;           \/* 4bytes (acc: 89) *\/$/;"	m	struct:HmbMeta
C__urgency_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__urgency_seg_id;           \/* 2bytes (acc: 85) *\/$/;"	m	struct:HmbMeta
C__victimAll_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__victimAll_offset;         \/* 4bytes (acc: 67) *\/$/;"	m	struct:HmbMeta
C__victimAll_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__victimAll_seg_id;         \/* 2bytes (acc: 63) *\/$/;"	m	struct:HmbMeta
C__victimRc_offset	femu/bbssd/hmb_types.h	/^	uint32_t C__victimRc_offset;          \/* 4bytes (acc: 109) *\/$/;"	m	struct:HmbMeta
C__victimRc_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  C__victimRc_seg_id;          \/* 2bytes (acc: 105) *\/$/;"	m	struct:HmbMeta
DATA_BLOCK	femu/bbssd/common.h	143;"	d
DEBUG_FLOPPY	fdc.c	54;"	d	file:
DEQUEUE_PTRS	femu/inc/rte_ring.h	324;"	d
DIE_ERASE	m25p80.c	/^    DIE_ERASE = 0xC4,$/;"	e	enum:__anon42	file:
DIOR	m25p80.c	/^    DIOR = 0xbb,$/;"	e	enum:__anon42	file:
DIOR4	m25p80.c	/^    DIOR4 = 0xbc,$/;"	e	enum:__anon42	file:
DMAOff	femu/nvme.h	/^typedef struct DMAOff {$/;"	s
DMAOff	femu/nvme.h	/^} DMAOff;$/;"	t	typeref:struct:DMAOff
DOR	m25p80.c	/^    DOR = 0x3b,$/;"	e	enum:__anon42	file:
DOR4	m25p80.c	/^    DOR4 = 0x3c,$/;"	e	enum:__anon42	file:
DPP	m25p80.c	/^    DPP = 0xa2,$/;"	e	enum:__anon42	file:
DPRINTF	pflash_cfi01.c	60;"	d	file:
DPRINTF	pflash_cfi01.c	65;"	d	file:
DPRINTF	pflash_cfi02.c	51;"	d	file:
DPS_FIRST_EIGHT	femu/nvme.h	/^    DPS_FIRST_EIGHT = 8,$/;"	e	enum:NvmeIdNsDps
DPS_TYPE_1	femu/nvme.h	/^    DPS_TYPE_1      = 1,$/;"	e	enum:NvmeIdNsDps
DPS_TYPE_2	femu/nvme.h	/^    DPS_TYPE_2      = 2,$/;"	e	enum:NvmeIdNsDps
DPS_TYPE_3	femu/nvme.h	/^    DPS_TYPE_3      = 3,$/;"	e	enum:NvmeIdNsDps
DPS_TYPE_MASK	femu/nvme.h	/^    DPS_TYPE_MASK   = 0x7,$/;"	e	enum:NvmeIdNsDps
DPS_TYPE_NONE	femu/nvme.h	/^    DPS_TYPE_NONE   = 0,$/;"	e	enum:NvmeIdNsDps
EEPROM	m25p80.c	46;"	d	file:
EMPTY_BLOCK	femu/bbssd/common.h	134;"	d
EMPTY_DATA_BLOCK	femu/bbssd/common.h	144;"	d
EMPTY_RAN_BLOCK	femu/bbssd/common.h	138;"	d
EMPTY_RAN_COLD_BLOCK	femu/bbssd/common.h	140;"	d
EMPTY_RAN_HOT_BLOCK	femu/bbssd/common.h	142;"	d
EMPTY_SEQ_BLOCK	femu/bbssd/common.h	136;"	d
ENQUEUE_PTRS	femu/inc/rte_ring.h	293;"	d
EN_4BYTE_ADDR	m25p80.c	/^    EN_4BYTE_ADDR = 0xB7,$/;"	e	enum:__anon42	file:
ERASE	femu/bbssd/common.h	186;"	d
ERASE4_32K	m25p80.c	/^    ERASE4_32K = 0x5c,$/;"	e	enum:__anon42	file:
ERASE4_4K	m25p80.c	/^    ERASE4_4K = 0x21,$/;"	e	enum:__anon42	file:
ERASE4_SECTOR	m25p80.c	/^    ERASE4_SECTOR = 0xdc,$/;"	e	enum:__anon42	file:
ERASE_32K	m25p80.c	/^    ERASE_32K = 0x52,$/;"	e	enum:__anon42	file:
ERASE_4K	m25p80.c	/^    ERASE_4K = 0x20,$/;"	e	enum:__anon42	file:
ERASE_SECTOR	m25p80.c	/^    ERASE_SECTOR = 0xd8,$/;"	e	enum:__anon42	file:
ER_32K	m25p80.c	42;"	d	file:
ER_4K	m25p80.c	41;"	d	file:
EVCFG_DUAL_IO_ENABLED	m25p80.c	147;"	d	file:
EVCFG_OUT_DRIVER_STRENGTH_DEF	m25p80.c	143;"	d	file:
EVCFG_QUAD_IO_ENABLED	m25p80.c	149;"	d	file:
EVCFG_RESET_HOLD_ENABLED	m25p80.c	145;"	d	file:
EVCFG_VPP_ACCELERATOR	m25p80.c	144;"	d	file:
EXTEND_ADDR_READ	m25p80.c	/^    EXTEND_ADDR_READ = 0xC8,$/;"	e	enum:__anon42	file:
EXTEND_ADDR_WRITE	m25p80.c	/^    EXTEND_ADDR_WRITE = 0xC5,$/;"	e	enum:__anon42	file:
EX_4BYTE_ADDR	m25p80.c	/^    EX_4BYTE_ADDR = 0xE9,$/;"	e	enum:__anon42	file:
FAIL	femu/bbssd/common.h	122;"	d
FAST_READ	m25p80.c	/^    FAST_READ = 0x0b,$/;"	e	enum:__anon42	file:
FAST_READ4	m25p80.c	/^    FAST_READ4 = 0x0c,$/;"	e	enum:__anon42	file:
FDCtrl	fdc.c	/^struct FDCtrl {$/;"	s	file:
FDCtrl	fdc.c	/^typedef struct FDCtrl FDCtrl;$/;"	t	typeref:struct:FDCtrl	file:
FDCtrlCommand	fdc.c	/^typedef struct FDCtrlCommand {$/;"	s	file:
FDCtrlCommand	fdc.c	/^} FDCtrlCommand;$/;"	t	typeref:struct:FDCtrlCommand	file:
FDFormat	fdc.c	/^typedef struct FDFormat {$/;"	s	file:
FDFormat	fdc.c	/^} FDFormat;$/;"	t	typeref:struct:FDFormat	file:
FDISK_DBL_SIDES	fdc.c	/^    FDISK_DBL_SIDES  = 0x01,$/;"	e	enum:FDiskFlags	file:
FDRIVE_RATE_1M	fdc.c	/^    FDRIVE_RATE_1M   = 0x03,  \/*   1 Mbps *\/$/;"	e	enum:FDriveRate	file:
FDRIVE_RATE_250K	fdc.c	/^    FDRIVE_RATE_250K = 0x02,  \/* 250 Kbps *\/$/;"	e	enum:FDriveRate	file:
FDRIVE_RATE_300K	fdc.c	/^    FDRIVE_RATE_300K = 0x01,  \/* 300 Kbps *\/$/;"	e	enum:FDriveRate	file:
FDRIVE_RATE_500K	fdc.c	/^    FDRIVE_RATE_500K = 0x00,  \/* 500 Kbps *\/$/;"	e	enum:FDriveRate	file:
FDRIVE_SIZE_350	fdc.c	/^    FDRIVE_SIZE_350,$/;"	e	enum:FDriveSize	file:
FDRIVE_SIZE_525	fdc.c	/^    FDRIVE_SIZE_525,$/;"	e	enum:FDriveSize	file:
FDRIVE_SIZE_UNKNOWN	fdc.c	/^    FDRIVE_SIZE_UNKNOWN,$/;"	e	enum:FDriveSize	file:
FD_CMD_CONFIGURE	fdc.c	/^    FD_CMD_CONFIGURE = 0x13,$/;"	e	enum:__anon4	file:
FD_CMD_DRIVE_SPECIFICATION_COMMAND	fdc.c	/^    FD_CMD_DRIVE_SPECIFICATION_COMMAND = 0x8e,$/;"	e	enum:__anon4	file:
FD_CMD_DUMPREG	fdc.c	/^    FD_CMD_DUMPREG = 0x0e,$/;"	e	enum:__anon4	file:
FD_CMD_FORMAT_AND_WRITE	fdc.c	/^    FD_CMD_FORMAT_AND_WRITE = 0xcd,$/;"	e	enum:__anon4	file:
FD_CMD_FORMAT_TRACK	fdc.c	/^    FD_CMD_FORMAT_TRACK = 0x0d,$/;"	e	enum:__anon4	file:
FD_CMD_LOCK	fdc.c	/^    FD_CMD_LOCK = 0x14,$/;"	e	enum:__anon4	file:
FD_CMD_OPTION	fdc.c	/^    FD_CMD_OPTION = 0x33,$/;"	e	enum:__anon4	file:
FD_CMD_PART_ID	fdc.c	/^    FD_CMD_PART_ID = 0x18,$/;"	e	enum:__anon4	file:
FD_CMD_PERPENDICULAR_MODE	fdc.c	/^    FD_CMD_PERPENDICULAR_MODE = 0x12,$/;"	e	enum:__anon4	file:
FD_CMD_POWERDOWN_MODE	fdc.c	/^    FD_CMD_POWERDOWN_MODE = 0x17,$/;"	e	enum:__anon4	file:
FD_CMD_READ	fdc.c	/^    FD_CMD_READ = 0x06,$/;"	e	enum:__anon4	file:
FD_CMD_READ_DELETED	fdc.c	/^    FD_CMD_READ_DELETED = 0x0c,$/;"	e	enum:__anon4	file:
FD_CMD_READ_ID	fdc.c	/^    FD_CMD_READ_ID = 0x0a,$/;"	e	enum:__anon4	file:
FD_CMD_READ_TRACK	fdc.c	/^    FD_CMD_READ_TRACK = 0x02,$/;"	e	enum:__anon4	file:
FD_CMD_RECALIBRATE	fdc.c	/^    FD_CMD_RECALIBRATE = 0x07,$/;"	e	enum:__anon4	file:
FD_CMD_RELATIVE_SEEK_IN	fdc.c	/^    FD_CMD_RELATIVE_SEEK_IN = 0xcf,$/;"	e	enum:__anon4	file:
FD_CMD_RELATIVE_SEEK_OUT	fdc.c	/^    FD_CMD_RELATIVE_SEEK_OUT = 0x8f,$/;"	e	enum:__anon4	file:
FD_CMD_RESTORE	fdc.c	/^    FD_CMD_RESTORE = 0x4e,$/;"	e	enum:__anon4	file:
FD_CMD_SAVE	fdc.c	/^    FD_CMD_SAVE = 0x2e,$/;"	e	enum:__anon4	file:
FD_CMD_SCAN_EQUAL	fdc.c	/^    FD_CMD_SCAN_EQUAL = 0x11,$/;"	e	enum:__anon4	file:
FD_CMD_SCAN_HIGH_OR_EQUAL	fdc.c	/^    FD_CMD_SCAN_HIGH_OR_EQUAL = 0x1d,$/;"	e	enum:__anon4	file:
FD_CMD_SCAN_LOW_OR_EQUAL	fdc.c	/^    FD_CMD_SCAN_LOW_OR_EQUAL = 0x19,$/;"	e	enum:__anon4	file:
FD_CMD_SEEK	fdc.c	/^    FD_CMD_SEEK = 0x0f,$/;"	e	enum:__anon4	file:
FD_CMD_SENSE_DRIVE_STATUS	fdc.c	/^    FD_CMD_SENSE_DRIVE_STATUS = 0x04,$/;"	e	enum:__anon4	file:
FD_CMD_SENSE_INTERRUPT_STATUS	fdc.c	/^    FD_CMD_SENSE_INTERRUPT_STATUS = 0x08,$/;"	e	enum:__anon4	file:
FD_CMD_SPECIFY	fdc.c	/^    FD_CMD_SPECIFY = 0x03,$/;"	e	enum:__anon4	file:
FD_CMD_VERIFY	fdc.c	/^    FD_CMD_VERIFY = 0x16,$/;"	e	enum:__anon4	file:
FD_CMD_VERSION	fdc.c	/^    FD_CMD_VERSION = 0x10,$/;"	e	enum:__anon4	file:
FD_CMD_WRITE	fdc.c	/^    FD_CMD_WRITE = 0x05,$/;"	e	enum:__anon4	file:
FD_CMD_WRITE_DELETED	fdc.c	/^    FD_CMD_WRITE_DELETED = 0x09,$/;"	e	enum:__anon4	file:
FD_CONFIG_EFIFO	fdc.c	/^    FD_CONFIG_EFIFO = 0x20, \/* FIFO disabled *\/$/;"	e	enum:__anon5	file:
FD_CONFIG_EIS	fdc.c	/^    FD_CONFIG_EIS   = 0x40, \/* No implied seeks *\/$/;"	e	enum:__anon5	file:
FD_CONFIG_FIFOTHR	fdc.c	/^    FD_CONFIG_FIFOTHR = 0x0f, \/* FIFO threshold set to 1 byte *\/$/;"	e	enum:__anon5	file:
FD_CONFIG_POLL	fdc.c	/^    FD_CONFIG_POLL  = 0x10, \/* Poll enabled *\/$/;"	e	enum:__anon5	file:
FD_CONFIG_PRETRK	fdc.c	/^    FD_CONFIG_PRETRK = 0xff, \/* Pre-compensation set to track 0 *\/$/;"	e	enum:__anon5	file:
FD_DIR_DSKCHG	fdc.c	/^    FD_DIR_DSKCHG   = 0x80,$/;"	e	enum:__anon15	file:
FD_DIR_READ	fdc.c	/^    FD_DIR_READ    = 1,$/;"	e	enum:__anon1	file:
FD_DIR_SCANE	fdc.c	/^    FD_DIR_SCANE   = 2,$/;"	e	enum:__anon1	file:
FD_DIR_SCANH	fdc.c	/^    FD_DIR_SCANH   = 4,$/;"	e	enum:__anon1	file:
FD_DIR_SCANL	fdc.c	/^    FD_DIR_SCANL   = 3,$/;"	e	enum:__anon1	file:
FD_DIR_VERIFY	fdc.c	/^    FD_DIR_VERIFY  = 5,$/;"	e	enum:__anon1	file:
FD_DIR_WRITE	fdc.c	/^    FD_DIR_WRITE   = 0,$/;"	e	enum:__anon1	file:
FD_DOR_DMAEN	fdc.c	/^    FD_DOR_DMAEN    = 0x08,$/;"	e	enum:__anon11	file:
FD_DOR_MOTEN0	fdc.c	/^    FD_DOR_MOTEN0   = 0x10,$/;"	e	enum:__anon11	file:
FD_DOR_MOTEN1	fdc.c	/^    FD_DOR_MOTEN1   = 0x20,$/;"	e	enum:__anon11	file:
FD_DOR_MOTEN2	fdc.c	/^    FD_DOR_MOTEN2   = 0x40,$/;"	e	enum:__anon11	file:
FD_DOR_MOTEN3	fdc.c	/^    FD_DOR_MOTEN3   = 0x80,$/;"	e	enum:__anon11	file:
FD_DOR_SELMASK	fdc.c	/^    FD_DOR_SELMASK  = 0x03,$/;"	e	enum:__anon11	file:
FD_DOR_nRESET	fdc.c	/^    FD_DOR_nRESET   = 0x04,$/;"	e	enum:__anon11	file:
FD_DSR_DRATEMASK	fdc.c	/^    FD_DSR_DRATEMASK= 0x03,$/;"	e	enum:__anon13	file:
FD_DSR_PWRDOWN	fdc.c	/^    FD_DSR_PWRDOWN  = 0x40,$/;"	e	enum:__anon13	file:
FD_DSR_SWRESET	fdc.c	/^    FD_DSR_SWRESET  = 0x80,$/;"	e	enum:__anon13	file:
FD_FORMAT_CMD	fdc.c	827;"	d	file:
FD_MSR_CMDBUSY	fdc.c	/^    FD_MSR_CMDBUSY  = 0x10,$/;"	e	enum:__anon14	file:
FD_MSR_DIO	fdc.c	/^    FD_MSR_DIO      = 0x40,$/;"	e	enum:__anon14	file:
FD_MSR_DRV0BUSY	fdc.c	/^    FD_MSR_DRV0BUSY = 0x01,$/;"	e	enum:__anon14	file:
FD_MSR_DRV1BUSY	fdc.c	/^    FD_MSR_DRV1BUSY = 0x02,$/;"	e	enum:__anon14	file:
FD_MSR_DRV2BUSY	fdc.c	/^    FD_MSR_DRV2BUSY = 0x04,$/;"	e	enum:__anon14	file:
FD_MSR_DRV3BUSY	fdc.c	/^    FD_MSR_DRV3BUSY = 0x08,$/;"	e	enum:__anon14	file:
FD_MSR_NONDMA	fdc.c	/^    FD_MSR_NONDMA   = 0x20,$/;"	e	enum:__anon14	file:
FD_MSR_RQM	fdc.c	/^    FD_MSR_RQM      = 0x80,$/;"	e	enum:__anon14	file:
FD_MULTI_TRACK	fdc.c	826;"	d	file:
FD_PHASE_COMMAND	fdc.c	/^    FD_PHASE_COMMAND        = 1,$/;"	e	enum:__anon16	file:
FD_PHASE_EXECUTION	fdc.c	/^    FD_PHASE_EXECUTION      = 2,$/;"	e	enum:__anon16	file:
FD_PHASE_RECONSTRUCT	fdc.c	/^    FD_PHASE_RECONSTRUCT    = 0,$/;"	e	enum:__anon16	file:
FD_PHASE_RESULT	fdc.c	/^    FD_PHASE_RESULT         = 3,$/;"	e	enum:__anon16	file:
FD_REG_CCR	fdc.c	/^    FD_REG_CCR = 0x07,$/;"	e	enum:__anon3	file:
FD_REG_DIR	fdc.c	/^    FD_REG_DIR = 0x07,$/;"	e	enum:__anon3	file:
FD_REG_DOR	fdc.c	/^    FD_REG_DOR = 0x02,$/;"	e	enum:__anon3	file:
FD_REG_DSR	fdc.c	/^    FD_REG_DSR = 0x04,$/;"	e	enum:__anon3	file:
FD_REG_FIFO	fdc.c	/^    FD_REG_FIFO = 0x05,$/;"	e	enum:__anon3	file:
FD_REG_MSR	fdc.c	/^    FD_REG_MSR = 0x04,$/;"	e	enum:__anon3	file:
FD_REG_SRA	fdc.c	/^    FD_REG_SRA = 0x00,$/;"	e	enum:__anon3	file:
FD_REG_SRB	fdc.c	/^    FD_REG_SRB = 0x01,$/;"	e	enum:__anon3	file:
FD_REG_TDR	fdc.c	/^    FD_REG_TDR = 0x03,$/;"	e	enum:__anon3	file:
FD_RESET_SENSEI_COUNT	fdc.c	186;"	d	file:
FD_SECTOR_LEN	fdc.c	184;"	d	file:
FD_SECTOR_SC	fdc.c	185;"	d	file:
FD_SR0_ABNTERM	fdc.c	/^    FD_SR0_ABNTERM  = 0x40,$/;"	e	enum:__anon6	file:
FD_SR0_DS0	fdc.c	/^    FD_SR0_DS0      = 0x01,$/;"	e	enum:__anon6	file:
FD_SR0_DS1	fdc.c	/^    FD_SR0_DS1      = 0x02,$/;"	e	enum:__anon6	file:
FD_SR0_EQPMT	fdc.c	/^    FD_SR0_EQPMT    = 0x10,$/;"	e	enum:__anon6	file:
FD_SR0_HEAD	fdc.c	/^    FD_SR0_HEAD     = 0x04,$/;"	e	enum:__anon6	file:
FD_SR0_INVCMD	fdc.c	/^    FD_SR0_INVCMD   = 0x80,$/;"	e	enum:__anon6	file:
FD_SR0_RDYCHG	fdc.c	/^    FD_SR0_RDYCHG   = 0xc0,$/;"	e	enum:__anon6	file:
FD_SR0_SEEK	fdc.c	/^    FD_SR0_SEEK     = 0x20,$/;"	e	enum:__anon6	file:
FD_SR1_EC	fdc.c	/^    FD_SR1_EC       = 0x80, \/* End of cylinder *\/$/;"	e	enum:__anon7	file:
FD_SR1_MA	fdc.c	/^    FD_SR1_MA       = 0x01, \/* Missing address mark *\/$/;"	e	enum:__anon7	file:
FD_SR1_NW	fdc.c	/^    FD_SR1_NW       = 0x02, \/* Not writable *\/$/;"	e	enum:__anon7	file:
FD_SR2_SEH	fdc.c	/^    FD_SR2_SEH      = 0x08, \/* Scan equal hit *\/$/;"	e	enum:__anon8	file:
FD_SR2_SNS	fdc.c	/^    FD_SR2_SNS      = 0x04, \/* Scan not satisfied *\/$/;"	e	enum:__anon8	file:
FD_SRA_DIR	fdc.c	/^    FD_SRA_DIR      = 0x01,$/;"	e	enum:__anon9	file:
FD_SRA_HDSEL	fdc.c	/^    FD_SRA_HDSEL    = 0x08,$/;"	e	enum:__anon9	file:
FD_SRA_INTPEND	fdc.c	/^    FD_SRA_INTPEND  = 0x80,$/;"	e	enum:__anon9	file:
FD_SRA_STEP	fdc.c	/^    FD_SRA_STEP     = 0x20,$/;"	e	enum:__anon9	file:
FD_SRA_nDRV2	fdc.c	/^    FD_SRA_nDRV2    = 0x40,$/;"	e	enum:__anon9	file:
FD_SRA_nINDX	fdc.c	/^    FD_SRA_nINDX    = 0x04,$/;"	e	enum:__anon9	file:
FD_SRA_nTRK0	fdc.c	/^    FD_SRA_nTRK0    = 0x10,$/;"	e	enum:__anon9	file:
FD_SRA_nWP	fdc.c	/^    FD_SRA_nWP      = 0x02,$/;"	e	enum:__anon9	file:
FD_SRB_DR0	fdc.c	/^    FD_SRB_DR0      = 0x20,$/;"	e	enum:__anon10	file:
FD_SRB_MTR0	fdc.c	/^    FD_SRB_MTR0     = 0x01,$/;"	e	enum:__anon10	file:
FD_SRB_MTR1	fdc.c	/^    FD_SRB_MTR1     = 0x02,$/;"	e	enum:__anon10	file:
FD_SRB_RDATA	fdc.c	/^    FD_SRB_RDATA    = 0x08,$/;"	e	enum:__anon10	file:
FD_SRB_WDATA	fdc.c	/^    FD_SRB_WDATA    = 0x10,$/;"	e	enum:__anon10	file:
FD_SRB_WGATE	fdc.c	/^    FD_SRB_WGATE    = 0x04,$/;"	e	enum:__anon10	file:
FD_STATE_FORMAT	fdc.c	/^    FD_STATE_FORMAT = 0x02,	\/* format flag *\/$/;"	e	enum:__anon2	file:
FD_STATE_MULTI	fdc.c	/^    FD_STATE_MULTI  = 0x01,	\/* multi track flag *\/$/;"	e	enum:__anon2	file:
FD_TDR_BOOTSEL	fdc.c	/^    FD_TDR_BOOTSEL  = 0x0c,$/;"	e	enum:__anon12	file:
FDiskFlags	fdc.c	/^typedef enum FDiskFlags {$/;"	g	file:
FDiskFlags	fdc.c	/^} FDiskFlags;$/;"	t	typeref:enum:FDiskFlags	file:
FDrive	fdc.c	/^struct FDrive {$/;"	s	file:
FDrive	fdc.c	/^typedef struct FDrive FDrive;$/;"	t	typeref:struct:FDrive	file:
FDriveRate	fdc.c	/^typedef enum FDriveRate {$/;"	g	file:
FDriveRate	fdc.c	/^} FDriveRate;$/;"	t	typeref:enum:FDriveRate	file:
FDriveSize	fdc.c	/^typedef enum FDriveSize {$/;"	g	file:
FDriveSize	fdc.c	/^} FDriveSize;$/;"	t	typeref:enum:FDriveSize	file:
FEMU	femu/nvme.h	1089;"	d
FEMU_BBSSD_MODE	femu/nvme.h	/^    FEMU_BBSSD_MODE = 1,$/;"	e	enum:__anon40
FEMU_DISABLE_DELAY_EMU	femu/bbssd/backup/ftl.h	/^    FEMU_DISABLE_DELAY_EMU = 4,$/;"	e	enum:__anon29
FEMU_DISABLE_DELAY_EMU	femu/bbssd/ftl.h	/^    FEMU_DISABLE_DELAY_EMU = 4,$/;"	e	enum:__anon23
FEMU_DISABLE_GC_DELAY	femu/bbssd/backup/ftl.h	/^    FEMU_DISABLE_GC_DELAY = 2,$/;"	e	enum:__anon29
FEMU_DISABLE_GC_DELAY	femu/bbssd/ftl.h	/^    FEMU_DISABLE_GC_DELAY = 2,$/;"	e	enum:__anon23
FEMU_DISABLE_LOG	femu/bbssd/backup/ftl.h	/^    FEMU_DISABLE_LOG = 7,$/;"	e	enum:__anon29
FEMU_DISABLE_LOG	femu/bbssd/ftl.h	/^    FEMU_DISABLE_LOG = 7,$/;"	e	enum:__anon23
FEMU_ENABLE_DELAY_EMU	femu/bbssd/backup/ftl.h	/^    FEMU_ENABLE_DELAY_EMU = 3,$/;"	e	enum:__anon29
FEMU_ENABLE_DELAY_EMU	femu/bbssd/ftl.h	/^    FEMU_ENABLE_DELAY_EMU = 3,$/;"	e	enum:__anon23
FEMU_ENABLE_GC_DELAY	femu/bbssd/backup/ftl.h	/^    FEMU_ENABLE_GC_DELAY = 1,$/;"	e	enum:__anon29
FEMU_ENABLE_GC_DELAY	femu/bbssd/ftl.h	/^    FEMU_ENABLE_GC_DELAY = 1,$/;"	e	enum:__anon23
FEMU_ENABLE_LOG	femu/bbssd/backup/ftl.h	/^    FEMU_ENABLE_LOG = 6,$/;"	e	enum:__anon29
FEMU_ENABLE_LOG	femu/bbssd/ftl.h	/^    FEMU_ENABLE_LOG = 6,$/;"	e	enum:__anon23
FEMU_KVSSD_MODE	femu/nvme.h	/^    FEMU_KVSSD_MODE,$/;"	e	enum:__anon40
FEMU_MAX_INF_REQS	femu/nvme.h	1344;"	d
FEMU_MAX_NUM_CHIPS	femu/nvme.h	1147;"	d
FEMU_MAX_NUM_CHNLS	femu/nvme.h	1146;"	d
FEMU_NOSSD_MODE	femu/nvme.h	/^    FEMU_NOSSD_MODE = 2,$/;"	e	enum:__anon40
FEMU_OCSSD_MODE	femu/nvme.h	/^    FEMU_OCSSD_MODE = 0,$/;"	e	enum:__anon40
FEMU_RESET_ACCT	femu/bbssd/backup/ftl.h	/^    FEMU_RESET_ACCT = 5,$/;"	e	enum:__anon29
FEMU_RESET_ACCT	femu/bbssd/ftl.h	/^    FEMU_RESET_ACCT = 5,$/;"	e	enum:__anon23
FEMU_RING_TYPE_MP_MC	femu/inc/rte_ring.h	/^	FEMU_RING_TYPE_MP_MC,		\/* Multi-producer, multi-consumer *\/$/;"	e	enum:femu_ring_type
FEMU_RING_TYPE_MP_SC	femu/inc/rte_ring.h	/^	FEMU_RING_TYPE_MP_SC,		\/* Multi-producer, single-consumer *\/$/;"	e	enum:femu_ring_type
FEMU_RING_TYPE_SP_SC	femu/inc/rte_ring.h	/^	FEMU_RING_TYPE_SP_SC,		\/* Single-producer, single-consumer *\/$/;"	e	enum:femu_ring_type
FEMU_SMARTSSD_MODE	femu/nvme.h	/^    FEMU_SMARTSSD_MODE,$/;"	e	enum:__anon40
FEMU_ZNSSD_MODE	femu/nvme.h	/^    FEMU_ZNSSD_MODE = 3,$/;"	e	enum:__anon40
FLASH_SIZE	tc58128.c	29;"	d	file:
FLOPPY_DPRINTF	fdc.c	56;"	d	file:
FSR_4BYTE_ADDR_MODE_ENABLED	m25p80.c	154;"	d	file:
FSR_FLASH_READY	m25p80.c	155;"	d	file:
FemuCtrl	femu/nvme.h	/^typedef struct FemuCtrl {$/;"	s
FemuCtrl	femu/nvme.h	/^} FemuCtrl;$/;"	t	typeref:struct:FemuCtrl
FemuCtrl	femu/ocssd/oc20.h	/^typedef struct FemuCtrl FemuCtrl;$/;"	t	typeref:struct:FemuCtrl
FemuCtrl	femu/timing-model/timing.h	/^typedef struct FemuCtrl FemuCtrl;$/;"	t	typeref:struct:FemuCtrl
FemuExtCtrlOps	femu/nvme.h	/^typedef struct FemuExtCtrlOps {$/;"	s
FemuExtCtrlOps	femu/nvme.h	/^} FemuExtCtrlOps;$/;"	t	typeref:struct:FemuExtCtrlOps
Flash	m25p80.c	/^struct Flash {$/;"	s	file:
FlashCMD	m25p80.c	/^} FlashCMD;$/;"	t	typeref:enum:__anon42	file:
FlashPartInfo	m25p80.c	/^typedef struct FlashPartInfo {$/;"	s	file:
FlashPartInfo	m25p80.c	/^} FlashPartInfo;$/;"	t	typeref:struct:FlashPartInfo	file:
FlashType	femu/nand/nand.h	/^typedef enum FlashType {$/;"	g
FlashType	femu/nand/nand.h	/^} FlashType;$/;"	t	typeref:enum:FlashType
FloppyBus	fdc.c	/^struct FloppyBus {$/;"	s	file:
GC_IO	femu/bbssd/backup/ftl.h	/^    GC_IO = 1,$/;"	e	enum:__anon27
GC_IO	femu/bbssd/ftl.h	/^    GC_IO = 1,$/;"	e	enum:__anon21
GC_ON	femu/bbssd/common.h	37;"	d
GC_ON	femu/bbssd/common.h	46;"	d
GC_ON	femu/bbssd/common.h	63;"	d
GC_READ	femu/bbssd/common.h	187;"	d
GC_TRIGGER_OVERALL	femu/bbssd/common.h	38;"	d
GC_TRIGGER_OVERALL	femu/bbssd/common.h	47;"	d
GC_VICTIM_OVERALL	femu/bbssd/common.h	39;"	d
GC_WRITE	femu/bbssd/common.h	188;"	d
GET_CUR_DRV	fdc.c	180;"	d	file:
HMB_CONFIG_NUMBER_OF_TABLE_BITMAP_PARTS	femu/bbssd/hmb_config.h	8;"	d
HMB_CTRL	femu/bbssd/hmb.c	/^HmbCtrl HMB_CTRL;$/;"	v
HMB_DEBUG_TIME	femu/bbssd/hmb_utils.c	/^HmbDebugTime HMB_DEBUG_TIME;$/;"	v
HMB_DEBUG_TIME_PER_REQUEST	femu/bbssd/hmb_utils.c	/^HmbDebugTimePerRequest HMB_DEBUG_TIME_PER_REQUEST;$/;"	v
HMB_DEBUG__N_OVERFLOWED	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__N_OVERFLOWED = 0;$/;"	v
HMB_DEBUG__N_READ_PAGES	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__N_READ_PAGES = 0;$/;"	v
HMB_DEBUG__N_READ_REQUESTED_SECTORS	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__N_READ_REQUESTED_SECTORS = 0;$/;"	v
HMB_DEBUG__N_REQUESTS	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__N_REQUESTS = 0;$/;"	v
HMB_DEBUG__N_WRITE_REQUESTED_SECTORS	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__N_WRITE_REQUESTED_SECTORS = 0;$/;"	v
HMB_DEBUG__N_WRITTEN_PAGES	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__N_WRITTEN_PAGES = 0;$/;"	v
HMB_DEBUG__SUM_OVERFLOWED_TIME	femu/bbssd/hmb_debug.c	/^uint64_t HMB_DEBUG__SUM_OVERFLOWED_TIME = 0;$/;"	v
HMB_FOR_READ	femu/bbssd/hmb_types.h	11;"	d
HMB_FOR_WRITE	femu/bbssd/hmb_types.h	12;"	d
HMB_HASH_MULTIPLIER	femu/bbssd/hmb_internal.h	61;"	d
HMB_HAS_NO_ENTRY	femu/bbssd/hmb_types.h	16;"	d
HMB_MAPINFO_NOT_MAPPED	femu/bbssd/hmb_internal.h	52;"	d
HMB_OFFSET_SEG0_METADATA	femu/bbssd/hmb_internal.h	42;"	d
HMB_OFFSET_SEG0_SEGENT_SPLIT_TABLE	femu/bbssd/hmb_internal.h	44;"	d
HMB_SEGENT_BITMAP_BITS_PER_PART	femu/bbssd/hmb_internal.h	54;"	d
HMB_SEGENT_BITMAP_PART_MAX_VALUE	femu/bbssd/hmb_internal.h	55;"	d
HMB_SEGENT_UNUSED	femu/bbssd/hmb_internal.h	50;"	d
HMB_SPACEMGMT_BASE_TIME	femu/bbssd/hmb_spaceMgmt.c	/^int64_t HMB_SPACEMGMT_BASE_TIME = HMB_HAS_NO_ENTRY;$/;"	v
HMB_SPACEMGMT_BITMAP_BITS_PER_PART	femu/bbssd/hmb_spaceMgmt.h	38;"	d
HMB_SPACEMGMT_BITMAP_PART_MAX_VALUE	femu/bbssd/hmb_spaceMgmt.h	39;"	d
HMB_SPACEMGMT_CTRL	femu/bbssd/hmb_spaceMgmt.c	/^HmbSpaceMgmtCtrl HMB_SPACEMGMT_CTRL;$/;"	v
HMB_SPACEMGMT_HASH_GOLDEN_RATIO_64	femu/bbssd/hmb_internal.h	60;"	d
HMB_SPACEMGMT_IMPLICIT_FLUSH_DURATION_NS	femu/bbssd/hmb_spaceMgmt.h	54;"	d
HMB_SPACEMGMT_IMPLICIT_FLUSH_RATIO	femu/bbssd/hmb_spaceMgmt.h	53;"	d
HMB_SPACEMGMT_LOCK	femu/bbssd/hmb_spaceMgmt.h	42;"	d
HMB_SPACEMGMT_UL_DISABLED	femu/bbssd/hmb_spaceMgmt.h	/^	HMB_SPACEMGMT_UL_DISABLED = 0,$/;"	e	enum:__anon19
HMB_SPACEMGMT_UL_HIGH	femu/bbssd/hmb_spaceMgmt.h	/^	HMB_SPACEMGMT_UL_HIGH   = 2,$/;"	e	enum:__anon19
HMB_SPACEMGMT_UL_LOW	femu/bbssd/hmb_spaceMgmt.h	/^	HMB_SPACEMGMT_UL_LOW    = 4,$/;"	e	enum:__anon19
HMB_SPACEMGMT_UL_MIDDLE	femu/bbssd/hmb_spaceMgmt.h	/^	HMB_SPACEMGMT_UL_MIDDLE = 3,$/;"	e	enum:__anon19
HMB_SPACEMGMT_UL_NUMBER	femu/bbssd/hmb_spaceMgmt.h	51;"	d
HMB_SPACEMGMT_UL_URGENT	femu/bbssd/hmb_spaceMgmt.h	/^	HMB_SPACEMGMT_UL_URGENT = 1,$/;"	e	enum:__anon19
HMB_SPACEMGMT_UL_WEIGHT	femu/bbssd/hmb_spaceMgmt.c	/^const uint32_t HMB_SPACEMGMT_UL_WEIGHT[] = {4, 3, 2, 1};$/;"	v
HMB_SPACEMGMT_UNLOCK	femu/bbssd/hmb_spaceMgmt.h	41;"	d
HMB_UL_NUMBER	femu/bbssd/hmb_types.h	14;"	d
HMB__SE_ST_num	femu/bbssd/hmb_types.h	/^	uint16_t HMB__SE_ST_num;      \/* 2bytes (acc: 6) *\/$/;"	m	struct:HmbMeta
HMB__SE_ST_offset	femu/bbssd/hmb_types.h	/^	uint32_t HMB__SE_ST_offset;   \/* 4bytes (acc: 16) *\/$/;"	m	struct:HmbMeta
HMB__SE_ST_seg_id	femu/bbssd/hmb_types.h	/^	int16_t  HMB__SE_ST_seg_id;   \/* 2bytes (acc: 12) *\/$/;"	m	struct:HmbMeta
HMB__SE_ST_unit	femu/bbssd/hmb_types.h	/^	uint32_t HMB__SE_ST_unit;     \/* 4bytes (acc: 10) *\/$/;"	m	struct:HmbMeta
HMB__SE_num_max	femu/bbssd/hmb_types.h	/^	uint32_t HMB__SE_num_max;             \/* 4bytes (acc: 4) *\/$/;"	m	struct:HmbMeta
HOT_RAN	femu/bbssd/common.h	165;"	d
HOT_RAN_WRITE	femu/bbssd/common.h	129;"	d
HW_BLOCK_DATAPLANE_XEN_BLOCK_H	dataplane/xen-block.h	9;"	d
HW_DATAPLANE_VIRTIO_BLK_H	dataplane/virtio-blk.h	16;"	d
HW_NVME_H	nvme.h	2;"	d
HmbBitmap32	femu/bbssd/hmb_types.h	/^typedef uint32_t HmbBitmap32;$/;"	t
HmbBitmapEmpty	femu/bbssd/hmb_types.h	/^typedef int32_t HmbBitmapEmpty;$/;"	t
HmbCtrl	femu/bbssd/hmb_types.h	/^typedef struct HmbCtrl {$/;"	s
HmbCtrl	femu/bbssd/hmb_types.h	/^} HmbCtrl;$/;"	t	typeref:struct:HmbCtrl
HmbDLL	femu/bbssd/hmb_types.h	/^typedef struct HmbDLL$/;"	s
HmbDLL	femu/bbssd/hmb_types.h	/^} HmbDLL;$/;"	t	typeref:struct:HmbDLL
HmbDebugTime	femu/bbssd/hmb_types.h	/^typedef struct HmbDebugTime$/;"	s
HmbDebugTime	femu/bbssd/hmb_types.h	/^} HmbDebugTime;$/;"	t	typeref:struct:HmbDebugTime
HmbDebugTimePerRequest	femu/bbssd/hmb_types.h	/^typedef struct HmbDebugTimePerRequest$/;"	s
HmbDebugTimePerRequest	femu/bbssd/hmb_types.h	/^} HmbDebugTimePerRequest;$/;"	t	typeref:struct:HmbDebugTimePerRequest
HmbEntry	femu/bbssd/hmb_types.h	/^typedef struct HmbEntry {$/;"	s
HmbEntry	femu/bbssd/hmb_types.h	/^} HmbEntry;$/;"	t	typeref:struct:HmbEntry
HmbHeads	femu/bbssd/hmb_types.h	/^typedef int32_t HmbHeads;$/;"	t
HmbHostAddr	femu/bbssd/hmb_types.h	/^typedef uint64_t HmbHostAddr;$/;"	t
HmbMapInfo	femu/bbssd/hmb_types.h	/^typedef struct HmbMapInfo$/;"	s
HmbMapInfo	femu/bbssd/hmb_types.h	/^} HmbMapInfo;$/;"	t	typeref:struct:HmbMapInfo
HmbMappedAddr	femu/bbssd/hmb_types.h	/^typedef struct HmbMappedAddr$/;"	s
HmbMappedAddr	femu/bbssd/hmb_types.h	/^} HmbMappedAddr;$/;"	t	typeref:struct:HmbMappedAddr
HmbMeta	femu/bbssd/hmb_types.h	/^typedef struct HmbMeta$/;"	s
HmbMeta	femu/bbssd/hmb_types.h	/^} HmbMeta;$/;"	t	typeref:struct:HmbMeta
HmbSeg	femu/bbssd/hmb_types.h	/^typedef struct HmbSeg$/;"	s
HmbSeg	femu/bbssd/hmb_types.h	/^} HmbSeg;$/;"	t	typeref:struct:HmbSeg
HmbSegEmpty	femu/bbssd/hmb_types.h	/^typedef struct HmbSegEmpty$/;"	s
HmbSegEmpty	femu/bbssd/hmb_types.h	/^} HmbSegEmpty;$/;"	t	typeref:struct:HmbSegEmpty
HmbSegEnt	femu/bbssd/hmb_types.h	/^typedef struct HmbSegEnt$/;"	s
HmbSegEnt	femu/bbssd/hmb_types.h	/^} HmbSegEnt;$/;"	t	typeref:struct:HmbSegEnt
HmbSharedBitmapEnt	femu/bbssd/hmb_types.h	/^typedef struct HmbSharedBitmapEnt$/;"	s
HmbSharedBitmapEnt	femu/bbssd/hmb_types.h	/^} HmbSharedBitmapEnt;$/;"	t	typeref:struct:HmbSharedBitmapEnt
HmbSharedEnt	femu/bbssd/hmb_types.h	/^typedef struct HmbSharedEnt$/;"	s
HmbSharedEnt	femu/bbssd/hmb_types.h	/^} HmbSharedEnt;$/;"	t	typeref:struct:HmbSharedEnt
HmbSortedEnt	femu/bbssd/hmb_types.h	/^typedef struct HmbSortedEnt$/;"	s
HmbSortedEnt	femu/bbssd/hmb_types.h	/^} HmbSortedEnt;$/;"	t	typeref:struct:HmbSortedEnt
HmbSpaceMgmtCtrl	femu/bbssd/hmb_types.h	/^typedef struct HmbSpaceMgmtCtrl$/;"	s
HmbSpaceMgmtCtrl	femu/bbssd/hmb_types.h	/^} HmbSpaceMgmtCtrl;$/;"	t	typeref:struct:HmbSpaceMgmtCtrl
HmbSplitTable	femu/bbssd/hmb_types.h	/^typedef struct HmbSplitTable$/;"	s
HmbSplitTable	femu/bbssd/hmb_types.h	/^} HmbSplitTable;$/;"	t	typeref:struct:HmbSplitTable
HmbSync	femu/bbssd/hmb_types.h	/^typedef int32_t HmbSync;$/;"	t
HmbTime	femu/bbssd/hmb_types.h	/^typedef struct HmbTime$/;"	s
HmbTime	femu/bbssd/hmb_types.h	/^} HmbTime;$/;"	t	typeref:struct:HmbTime
ID_MAX_LEN	femu/nvme.h	1480;"	d
INFO	m25p80.c	80;"	d	file:
INFO6	m25p80.c	96;"	d	file:
INFO_STACKED	m25p80.c	113;"	d	file:
INIT	femu/bbssd/common.h	157;"	d
INVALID	femu/bbssd/common.h	153;"	d
INVALID_LPN	femu/bbssd/backup/ftl.h	7;"	d
INVALID_LPN	femu/bbssd/ftl.h	7;"	d
INVALID_PPA	femu/bbssd/backup/ftl.h	6;"	d
INVALID_PPA	femu/bbssd/ftl.h	6;"	d
IO_PLUG_THRESHOLD	dataplane/xen-block.c	512;"	d	file:
IWM_EXTDRIVE	swim.c	36;"	d	file:
IWM_INTDRIVE	swim.c	35;"	d	file:
IWM_MTROFF	swim.c	33;"	d	file:
IWM_MTRON	swim.c	34;"	d	file:
IWM_PH0H	swim.c	26;"	d	file:
IWM_PH0L	swim.c	25;"	d	file:
IWM_PH1H	swim.c	28;"	d	file:
IWM_PH1L	swim.c	27;"	d	file:
IWM_PH2H	swim.c	30;"	d	file:
IWM_PH2L	swim.c	29;"	d	file:
IWM_PH3H	swim.c	32;"	d	file:
IWM_PH3L	swim.c	31;"	d	file:
IWM_Q6H	swim.c	38;"	d	file:
IWM_Q6L	swim.c	37;"	d	file:
IWM_Q7H	swim.c	40;"	d	file:
IWM_Q7L	swim.c	39;"	d	file:
JEDEC_NUMONYX	m25p80.c	130;"	d	file:
JEDEC_READ	m25p80.c	/^    JEDEC_READ = 0x9f,$/;"	e	enum:__anon42	file:
JEDEC_SPANSION	m25p80.c	132;"	d	file:
JEDEC_WINBOND	m25p80.c	131;"	d	file:
LATENCY_OP	femu/bbssd/common.h	171;"	d
LP_OPTIONS	nand.c	195;"	d	file:
LP_OPTIONS16	nand.c	196;"	d	file:
LUN_BITS	femu/bbssd/backup/ftl.h	52;"	d
LUN_BITS	femu/bbssd/ftl.h	52;"	d
LogIdentifier	femu/nvme.h	/^enum LogIdentifier {$/;"	g
M25P80Class	m25p80.c	/^struct M25P80Class {$/;"	s	file:
M25P80_INTERNAL_DATA_BUFFER_SZ	m25p80.c	416;"	d	file:
MAN_GENERIC	m25p80.c	/^    MAN_GENERIC,$/;"	e	enum:__anon44	file:
MAN_MACRONIX	m25p80.c	/^    MAN_MACRONIX,$/;"	e	enum:__anon44	file:
MAN_NUMONYX	m25p80.c	/^    MAN_NUMONYX,$/;"	e	enum:__anon44	file:
MAN_SPANSION	m25p80.c	/^    MAN_SPANSION,$/;"	e	enum:__anon44	file:
MAN_SST	m25p80.c	/^    MAN_SST,$/;"	e	enum:__anon44	file:
MAN_WINBOND	m25p80.c	/^    MAN_WINBOND,$/;"	e	enum:__anon44	file:
MAP_READ	femu/bbssd/common.h	201;"	d
MAP_WRITE	femu/bbssd/common.h	202;"	d
MAX_3BYTES_SIZE	m25p80.c	49;"	d	file:
MAX_FLASH_TYPE	femu/nand/nand.h	/^    MAX_FLASH_TYPE = 6,$/;"	e	enum:FlashType
MAX_OOB	nand.c	58;"	d	file:
MAX_PAGE	nand.c	57;"	d	file:
MAX_SUPPORTED_PAGES_PER_BLOCK	femu/nand/nand.h	4;"	d
MIN_DISCARD_GRANULARITY	femu/zns/zns.c	3;"	d	file:
MLC	femu/nand/nand.h	/^    MLC            = 2,$/;"	e	enum:FlashType
MLC_BLOCK_ERASE_LATENCY_NS	femu/nand/nand.h	24;"	d
MLC_CHNL_PAGE_TRANSFER_LATENCY_NS	femu/nand/nand.h	23;"	d
MLC_LOWER_PAGE	femu/nand/nand.h	/^    MLC_LOWER_PAGE        = 0,$/;"	e	enum:__anon32
MLC_LOWER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	19;"	d
MLC_LOWER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	21;"	d
MLC_UPPER_PAGE	femu/nand/nand.h	/^    MLC_UPPER_PAGE        = 1,$/;"	e	enum:__anon32
MLC_UPPER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	20;"	d
MLC_UPPER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	22;"	d
MN_MAX_LEN	femu/nvme.h	1479;"	d
MPLOCKED	femu/inc/rte_atomic_x86.h	14;"	d
Manufacturer	m25p80.c	/^} Manufacturer;$/;"	t	typeref:enum:__anon44	file:
NANDFlashState	nand.c	/^struct NANDFlashState {$/;"	s	file:
NANDFlashState	nand.c	/^typedef struct NANDFlashState NANDFlashState;$/;"	t	typeref:struct:NANDFlashState	file:
NAND_4PAGE_ARRAY	nand.c	110;"	d	file:
NAND_BUSWIDTH_16	nand.c	105;"	d	file:
NAND_CACHEPRG	nand.c	107;"	d	file:
NAND_CMD_BLOCKERASE1	nand.c	44;"	d	file:
NAND_CMD_BLOCKERASE2	nand.c	45;"	d	file:
NAND_CMD_CACHEPROGRAM2	nand.c	43;"	d	file:
NAND_CMD_COPYBACKPRG1	nand.c	47;"	d	file:
NAND_CMD_LPREAD2	nand.c	35;"	d	file:
NAND_CMD_NOSERIALREAD2	nand.c	36;"	d	file:
NAND_CMD_PAGEPROGRAM1	nand.c	41;"	d	file:
NAND_CMD_PAGEPROGRAM2	nand.c	42;"	d	file:
NAND_CMD_RANDOMREAD1	nand.c	37;"	d	file:
NAND_CMD_RANDOMREAD2	nand.c	38;"	d	file:
NAND_CMD_READ0	nand.c	32;"	d	file:
NAND_CMD_READ1	nand.c	33;"	d	file:
NAND_CMD_READ2	nand.c	34;"	d	file:
NAND_CMD_READID	nand.c	39;"	d	file:
NAND_CMD_READSTATUS	nand.c	46;"	d	file:
NAND_CMD_RESET	nand.c	40;"	d	file:
NAND_COPYBACK	nand.c	108;"	d	file:
NAND_ERASE	femu/bbssd/backup/ftl.h	/^    NAND_ERASE = 2,$/;"	e	enum:__anon26
NAND_ERASE	femu/bbssd/ftl.h	/^    NAND_ERASE = 2,$/;"	e	enum:__anon20
NAND_ERASE_LATENCY	femu/bbssd/backup/ftl.h	/^    NAND_ERASE_LATENCY = 2000000,$/;"	e	enum:__anon26
NAND_ERASE_LATENCY	femu/bbssd/ftl.h	/^    NAND_ERASE_LATENCY = 2000000,$/;"	e	enum:__anon20
NAND_IO	nand.c	114;"	d	file:
NAND_IOSTATUS_ERROR	nand.c	49;"	d	file:
NAND_IOSTATUS_PLANE0	nand.c	50;"	d	file:
NAND_IOSTATUS_PLANE1	nand.c	51;"	d	file:
NAND_IOSTATUS_PLANE2	nand.c	52;"	d	file:
NAND_IOSTATUS_PLANE3	nand.c	53;"	d	file:
NAND_IOSTATUS_READY	nand.c	54;"	d	file:
NAND_IOSTATUS_UNPROTCT	nand.c	55;"	d	file:
NAND_IS_AND	nand.c	109;"	d	file:
NAND_NO_AUTOINCR	nand.c	104;"	d	file:
NAND_NO_PADDING	nand.c	106;"	d	file:
NAND_NO_READRDY	nand.c	111;"	d	file:
NAND_PROG_LATENCY	femu/bbssd/backup/ftl.h	/^    NAND_PROG_LATENCY = 200000,$/;"	e	enum:__anon26
NAND_PROG_LATENCY	femu/bbssd/ftl.h	/^    NAND_PROG_LATENCY = 200000,$/;"	e	enum:__anon20
NAND_READ	femu/bbssd/backup/ftl.h	/^    NAND_READ =  0,$/;"	e	enum:__anon26
NAND_READ	femu/bbssd/ftl.h	/^    NAND_READ =  0,$/;"	e	enum:__anon20
NAND_READ_LATENCY	femu/bbssd/backup/ftl.h	/^    NAND_READ_LATENCY = 40000,$/;"	e	enum:__anon26
NAND_READ_LATENCY	femu/bbssd/ftl.h	/^    NAND_READ_LATENCY = 40000,$/;"	e	enum:__anon20
NAND_SAMSUNG_LP	nand.c	112;"	d	file:
NAND_WRITE	femu/bbssd/backup/ftl.h	/^    NAND_WRITE = 1,$/;"	e	enum:__anon26
NAND_WRITE	femu/bbssd/ftl.h	/^    NAND_WRITE = 1,$/;"	e	enum:__anon20
NEW_RAN_WRITE	femu/bbssd/common.h	128;"	d
NEW_SEQ_WRITE	femu/bbssd/common.h	126;"	d
NOOP	femu/bbssd/common.h	183;"	d
NOP	m25p80.c	/^    NOP = 0,$/;"	e	enum:__anon42	file:
NOSSD	femu/nvme.h	/^static inline bool NOSSD(FemuCtrl *n)$/;"	f
NUM_SIDES	fdc.c	247;"	d	file:
NVCFG_4BYTE_ADDR_MASK	m25p80.c	150;"	d	file:
NVCFG_DUAL_IO_MASK	m25p80.c	146;"	d	file:
NVCFG_DUMMY_CLK_POS	m25p80.c	141;"	d	file:
NVCFG_LOWER_SEGMENT_MASK	m25p80.c	151;"	d	file:
NVCFG_QUAD_IO_MASK	m25p80.c	148;"	d	file:
NVCFG_XIP_MODE_DISABLED	m25p80.c	137;"	d	file:
NVCFG_XIP_MODE_MASK	m25p80.c	138;"	d	file:
NVME	nvme.h	105;"	d
NVME_ACCESS_DENIED	femu/nvme.h	/^    NVME_ACCESS_DENIED          = 0x0286,$/;"	e	enum:NvmeStatusCodes
NVME_ACL_EXCEEDED	femu/nvme.h	/^    NVME_ACL_EXCEEDED           = 0x0103,$/;"	e	enum:NvmeStatusCodes
NVME_ADM_CMD_ABORT	femu/nvme.h	/^    NVME_ADM_CMD_ABORT          = 0x08,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_ACTIVATE_FW	femu/nvme.h	/^    NVME_ADM_CMD_ACTIVATE_FW    = 0x10,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_ASYNC_EV_REQ	femu/nvme.h	/^    NVME_ADM_CMD_ASYNC_EV_REQ   = 0x0c,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_CREATE_CQ	femu/nvme.h	/^    NVME_ADM_CMD_CREATE_CQ      = 0x05,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_CREATE_SQ	femu/nvme.h	/^    NVME_ADM_CMD_CREATE_SQ      = 0x01,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_DELETE_CQ	femu/nvme.h	/^    NVME_ADM_CMD_DELETE_CQ      = 0x04,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_DELETE_SQ	femu/nvme.h	/^    NVME_ADM_CMD_DELETE_SQ      = 0x00,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_DOWNLOAD_FW	femu/nvme.h	/^    NVME_ADM_CMD_DOWNLOAD_FW    = 0x11,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_FEMU_DEBUG	femu/nvme.h	/^    NVME_ADM_CMD_FEMU_DEBUG     = 0xee,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_FEMU_FLIP	femu/nvme.h	/^    NVME_ADM_CMD_FEMU_FLIP      = 0xef,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_FORMAT_NVM	femu/nvme.h	/^    NVME_ADM_CMD_FORMAT_NVM     = 0x80,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_GET_FEATURES	femu/nvme.h	/^    NVME_ADM_CMD_GET_FEATURES   = 0x0a,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_GET_LOG_PAGE	femu/nvme.h	/^    NVME_ADM_CMD_GET_LOG_PAGE   = 0x02,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_IDENTIFY	femu/nvme.h	/^    NVME_ADM_CMD_IDENTIFY       = 0x06,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_SECURITY_RECV	femu/nvme.h	/^    NVME_ADM_CMD_SECURITY_RECV  = 0x82,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_SECURITY_SEND	femu/nvme.h	/^    NVME_ADM_CMD_SECURITY_SEND  = 0x81,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_SET_DB_MEMORY	femu/nvme.h	/^    NVME_ADM_CMD_SET_DB_MEMORY  = 0x7c,$/;"	e	enum:NvmeAdminCommands
NVME_ADM_CMD_SET_FEATURES	femu/nvme.h	/^    NVME_ADM_CMD_SET_FEATURES   = 0x09,$/;"	e	enum:NvmeAdminCommands
NVME_AER_INFO_ERR_DIAG_FAIL	femu/nvme.h	/^    NVME_AER_INFO_ERR_DIAG_FAIL             = 2,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_ERR_FW_IMG_LOAD_ERR	femu/nvme.h	/^    NVME_AER_INFO_ERR_FW_IMG_LOAD_ERR       = 5,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_ERR_INVALID_DB	femu/nvme.h	/^    NVME_AER_INFO_ERR_INVALID_DB            = 1,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_ERR_INVALID_SQ	femu/nvme.h	/^    NVME_AER_INFO_ERR_INVALID_SQ            = 0,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_ERR_PERS_INTERNAL_ERR	femu/nvme.h	/^    NVME_AER_INFO_ERR_PERS_INTERNAL_ERR     = 3,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_ERR_TRANS_INTERNAL_ERR	femu/nvme.h	/^    NVME_AER_INFO_ERR_TRANS_INTERNAL_ERR    = 4,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_SMART_RELIABILITY	femu/nvme.h	/^    NVME_AER_INFO_SMART_RELIABILITY         = 0,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_SMART_SPARE_THRESH	femu/nvme.h	/^    NVME_AER_INFO_SMART_SPARE_THRESH        = 2,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_INFO_SMART_TEMP_THRESH	femu/nvme.h	/^    NVME_AER_INFO_SMART_TEMP_THRESH         = 1,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_LIMIT_EXCEEDED	femu/nvme.h	/^    NVME_AER_LIMIT_EXCEEDED     = 0x0105,$/;"	e	enum:NvmeStatusCodes
NVME_AER_TYPE_ERROR	femu/nvme.h	/^    NVME_AER_TYPE_ERROR                     = 0,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_TYPE_IO_SPECIFIC	femu/nvme.h	/^    NVME_AER_TYPE_IO_SPECIFIC               = 6,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_TYPE_SMART	femu/nvme.h	/^    NVME_AER_TYPE_SMART                     = 1,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AER_TYPE_VENDOR_SPECIFIC	femu/nvme.h	/^    NVME_AER_TYPE_VENDOR_SPECIFIC           = 7,$/;"	e	enum:NvmeAsyncEventRequest
NVME_AQA_ACQS	femu/nvme.h	201;"	d
NVME_AQA_ASQS	femu/nvme.h	200;"	d
NVME_ARBITRATION	femu/nvme.h	/^    NVME_ARBITRATION                = 0x1,$/;"	e	enum:NvmeFeatureIds
NVME_ARB_AB	femu/nvme.h	799;"	d
NVME_ARB_HPW	femu/nvme.h	802;"	d
NVME_ARB_LPW	femu/nvme.h	800;"	d
NVME_ARB_MPW	femu/nvme.h	801;"	d
NVME_ASYNCHRONOUS_EVENT_CONF	femu/nvme.h	/^    NVME_ASYNCHRONOUS_EVENT_CONF    = 0xb,$/;"	e	enum:NvmeFeatureIds
NVME_BUS	nvme.h	98;"	d
NVME_CAP_AMS	femu/nvme.h	88;"	d
NVME_CAP_CQR	femu/nvme.h	87;"	d
NVME_CAP_CSS	femu/nvme.h	92;"	d
NVME_CAP_CSS_ADMIN_ONLY	femu/nvme.h	/^    NVME_CAP_CSS_ADMIN_ONLY = 1 << 7,$/;"	e	enum:NvmeCapCss
NVME_CAP_CSS_CSI_SUPP	femu/nvme.h	/^    NVME_CAP_CSS_CSI_SUPP   = 1 << 6,$/;"	e	enum:NvmeCapCss
NVME_CAP_CSS_NVM	femu/nvme.h	/^    NVME_CAP_CSS_NVM        = 1 << 0,$/;"	e	enum:NvmeCapCss
NVME_CAP_DSTRD	femu/nvme.h	90;"	d
NVME_CAP_EXCEEDED	femu/nvme.h	/^    NVME_CAP_EXCEEDED           = 0x0081,$/;"	e	enum:NvmeStatusCodes
NVME_CAP_MPSMAX	femu/nvme.h	95;"	d
NVME_CAP_MPSMIN	femu/nvme.h	94;"	d
NVME_CAP_MQES	femu/nvme.h	86;"	d
NVME_CAP_NSSRS	femu/nvme.h	91;"	d
NVME_CAP_OC12	femu/nvme.h	93;"	d
NVME_CAP_SET_AMS	femu/nvme.h	101;"	d
NVME_CAP_SET_CQR	femu/nvme.h	99;"	d
NVME_CAP_SET_CSS	femu/nvme.h	109;"	d
NVME_CAP_SET_DSTRD	femu/nvme.h	105;"	d
NVME_CAP_SET_MPSMAX	femu/nvme.h	115;"	d
NVME_CAP_SET_MPSMIN	femu/nvme.h	113;"	d
NVME_CAP_SET_MQES	femu/nvme.h	97;"	d
NVME_CAP_SET_NSSRS	femu/nvme.h	107;"	d
NVME_CAP_SET_OC	femu/nvme.h	111;"	d
NVME_CAP_SET_TO	femu/nvme.h	103;"	d
NVME_CAP_TO	femu/nvme.h	89;"	d
NVME_CC_AMS	femu/nvme.h	151;"	d
NVME_CC_CSS	femu/nvme.h	149;"	d
NVME_CC_CSS_ADMIN_ONLY	femu/nvme.h	/^    NVME_CC_CSS_ADMIN_ONLY = 0x7,$/;"	e	enum:NvmeCcCss
NVME_CC_CSS_CSI	femu/nvme.h	/^    NVME_CC_CSS_CSI        = 0x6,$/;"	e	enum:NvmeCcCss
NVME_CC_CSS_NVM	femu/nvme.h	/^    NVME_CC_CSS_NVM        = 0x0,$/;"	e	enum:NvmeCcCss
NVME_CC_EN	femu/nvme.h	148;"	d
NVME_CC_IOCQES	femu/nvme.h	154;"	d
NVME_CC_IOSQES	femu/nvme.h	153;"	d
NVME_CC_MPS	femu/nvme.h	150;"	d
NVME_CC_SHN	femu/nvme.h	152;"	d
NVME_CID_CONFLICT	femu/nvme.h	/^    NVME_CID_CONFLICT           = 0x0003,$/;"	e	enum:NvmeStatusCodes
NVME_CMBLOC_BIR	femu/nvme.h	213;"	d
NVME_CMBLOC_OFST	femu/nvme.h	214;"	d
NVME_CMBLOC_SET_BIR	femu/nvme.h	216;"	d
NVME_CMBLOC_SET_OFST	femu/nvme.h	218;"	d
NVME_CMBSZ_CQS	femu/nvme.h	241;"	d
NVME_CMBSZ_GETSIZE	femu/nvme.h	263;"	d
NVME_CMBSZ_LISTS	femu/nvme.h	242;"	d
NVME_CMBSZ_RDS	femu/nvme.h	243;"	d
NVME_CMBSZ_SET_CQS	femu/nvme.h	250;"	d
NVME_CMBSZ_SET_LISTS	femu/nvme.h	252;"	d
NVME_CMBSZ_SET_RDS	femu/nvme.h	254;"	d
NVME_CMBSZ_SET_SQS	femu/nvme.h	248;"	d
NVME_CMBSZ_SET_SZ	femu/nvme.h	260;"	d
NVME_CMBSZ_SET_SZU	femu/nvme.h	258;"	d
NVME_CMBSZ_SET_WDS	femu/nvme.h	256;"	d
NVME_CMBSZ_SQS	femu/nvme.h	240;"	d
NVME_CMBSZ_SZ	femu/nvme.h	246;"	d
NVME_CMBSZ_SZU	femu/nvme.h	245;"	d
NVME_CMBSZ_WDS	femu/nvme.h	244;"	d
NVME_CMB_BIR	nvme.c	86;"	d	file:
NVME_CMD_ABORT_FAILED_FUSE	femu/nvme.h	/^    NVME_CMD_ABORT_FAILED_FUSE  = 0x0009,$/;"	e	enum:NvmeStatusCodes
NVME_CMD_ABORT_MISSING_FUSE	femu/nvme.h	/^    NVME_CMD_ABORT_MISSING_FUSE = 0x000a,$/;"	e	enum:NvmeStatusCodes
NVME_CMD_ABORT_REQ	femu/nvme.h	/^    NVME_CMD_ABORT_REQ          = 0x0007,$/;"	e	enum:NvmeStatusCodes
NVME_CMD_ABORT_SQ_DEL	femu/nvme.h	/^    NVME_CMD_ABORT_SQ_DEL       = 0x0008,$/;"	e	enum:NvmeStatusCodes
NVME_CMD_COMPARE	femu/nvme.h	/^    NVME_CMD_COMPARE            = 0x05,$/;"	e	enum:NvmeIoCommands
NVME_CMD_DSM	femu/nvme.h	/^    NVME_CMD_DSM                = 0x09,$/;"	e	enum:NvmeIoCommands
NVME_CMD_EFF_CCC	femu/nvme.h	/^    NVME_CMD_EFF_CCC        = 1 << 4,$/;"	e	enum:__anon38
NVME_CMD_EFF_CSE_MASK	femu/nvme.h	/^    NVME_CMD_EFF_CSE_MASK   = 3 << 16,$/;"	e	enum:__anon38
NVME_CMD_EFF_CSUPP	femu/nvme.h	/^    NVME_CMD_EFF_CSUPP      = 1 << 0,$/;"	e	enum:__anon38
NVME_CMD_EFF_LBCC	femu/nvme.h	/^    NVME_CMD_EFF_LBCC       = 1 << 1,$/;"	e	enum:__anon38
NVME_CMD_EFF_NCC	femu/nvme.h	/^    NVME_CMD_EFF_NCC        = 1 << 2,$/;"	e	enum:__anon38
NVME_CMD_EFF_NIC	femu/nvme.h	/^    NVME_CMD_EFF_NIC        = 1 << 3,$/;"	e	enum:__anon38
NVME_CMD_EFF_UUID_SEL	femu/nvme.h	/^    NVME_CMD_EFF_UUID_SEL   = 1 << 19,$/;"	e	enum:__anon38
NVME_CMD_FLAGS_FUSE	femu/nvme.h	308;"	d
NVME_CMD_FLAGS_PSDT	femu/nvme.h	309;"	d
NVME_CMD_FLUSH	femu/nvme.h	/^    NVME_CMD_FLUSH              = 0x00,$/;"	e	enum:NvmeIoCommands
NVME_CMD_OC_ERASE	femu/nvme.h	/^    NVME_CMD_OC_ERASE           = 0x90,$/;"	e	enum:NvmeIoCommands
NVME_CMD_OC_READ	femu/nvme.h	/^    NVME_CMD_OC_READ            = 0x92,$/;"	e	enum:NvmeIoCommands
NVME_CMD_OC_WRITE	femu/nvme.h	/^    NVME_CMD_OC_WRITE           = 0x91,$/;"	e	enum:NvmeIoCommands
NVME_CMD_READ	femu/nvme.h	/^    NVME_CMD_READ               = 0x02,$/;"	e	enum:NvmeIoCommands
NVME_CMD_SEQ_ERROR	femu/nvme.h	/^    NVME_CMD_SEQ_ERROR          = 0x000c,$/;"	e	enum:NvmeStatusCodes
NVME_CMD_WRITE	femu/nvme.h	/^    NVME_CMD_WRITE              = 0x01,$/;"	e	enum:NvmeIoCommands
NVME_CMD_WRITE_UNCOR	femu/nvme.h	/^    NVME_CMD_WRITE_UNCOR        = 0x04,$/;"	e	enum:NvmeIoCommands
NVME_CMD_WRITE_ZEROES	femu/nvme.h	/^    NVME_CMD_WRITE_ZEROES       = 0x08,$/;"	e	enum:NvmeIoCommands
NVME_CMD_ZONE_APPEND	femu/nvme.h	/^    NVME_CMD_ZONE_APPEND        = 0x7d,$/;"	e	enum:NvmeIoCommands
NVME_CMD_ZONE_MGMT_RECV	femu/nvme.h	/^    NVME_CMD_ZONE_MGMT_RECV     = 0x7a,$/;"	e	enum:NvmeIoCommands
NVME_CMD_ZONE_MGMT_SEND	femu/nvme.h	/^    NVME_CMD_ZONE_MGMT_SEND     = 0x79,$/;"	e	enum:NvmeIoCommands
NVME_CMP_FAILURE	femu/nvme.h	/^    NVME_CMP_FAILURE            = 0x0285,$/;"	e	enum:NvmeStatusCodes
NVME_CONFLICTING_ATTRS	femu/nvme.h	/^    NVME_CONFLICTING_ATTRS      = 0x0180,$/;"	e	enum:NvmeStatusCodes
NVME_CQ_FLAGS_IEN	femu/nvme.h	373;"	d
NVME_CQ_FLAGS_PC	femu/nvme.h	372;"	d
NVME_CSI_NVM	femu/nvme.h	/^    NVME_CSI_NVM                = 0x00,$/;"	e	enum:NvmeCsi
NVME_CSI_ZONED	femu/nvme.h	/^    NVME_CSI_ZONED              = 0x02,$/;"	e	enum:NvmeCsi
NVME_CSTS_CFS	femu/nvme.h	186;"	d
NVME_CSTS_FAILED	femu/nvme.h	/^    NVME_CSTS_FAILED        = 1 << CSTS_CFS_SHIFT,$/;"	e	enum:NvmeCsts
NVME_CSTS_NSSRO	femu/nvme.h	/^    NVME_CSTS_NSSRO         = 1 << CSTS_NSSRO_SHIFT,$/;"	e	enum:NvmeCsts
NVME_CSTS_NSSRO	femu/nvme.h	188;"	d
NVME_CSTS_RDY	femu/nvme.h	185;"	d
NVME_CSTS_READY	femu/nvme.h	/^    NVME_CSTS_READY         = 1 << CSTS_RDY_SHIFT,$/;"	e	enum:NvmeCsts
NVME_CSTS_SHST	femu/nvme.h	187;"	d
NVME_CSTS_SHST_COMPLETE	femu/nvme.h	/^    NVME_CSTS_SHST_COMPLETE = 2 << CSTS_SHST_SHIFT,$/;"	e	enum:NvmeCsts
NVME_CSTS_SHST_NORMAL	femu/nvme.h	/^    NVME_CSTS_SHST_NORMAL   = 0 << CSTS_SHST_SHIFT,$/;"	e	enum:NvmeCsts
NVME_CSTS_SHST_PROGRESS	femu/nvme.h	/^    NVME_CSTS_SHST_PROGRESS = 1 << CSTS_SHST_SHIFT,$/;"	e	enum:NvmeCsts
NVME_CTRL_CQES_MAX	femu/nvme.h	783;"	d
NVME_CTRL_CQES_MIN	femu/nvme.h	782;"	d
NVME_CTRL_SQES_MAX	femu/nvme.h	781;"	d
NVME_CTRL_SQES_MIN	femu/nvme.h	780;"	d
NVME_DATA_TRAS_ERROR	femu/nvme.h	/^    NVME_DATA_TRAS_ERROR        = 0x0004,$/;"	e	enum:NvmeStatusCodes
NVME_DB_SIZE	nvme.c	84;"	d	file:
NVME_DEFAULT_MAX_AZ_SIZE	femu/zns/zns.c	5;"	d	file:
NVME_DEFAULT_ZONE_SIZE	femu/zns/zns.c	4;"	d	file:
NVME_DNR	femu/nvme.h	/^    NVME_DNR                    = 0x4000,$/;"	e	enum:NvmeStatusCodes
NVME_DSMGMT_AD	femu/nvme.h	/^    NVME_DSMGMT_AD  = 1 << 2,$/;"	e	enum:__anon35
NVME_DSMGMT_IDR	femu/nvme.h	/^    NVME_DSMGMT_IDR = 1 << 0,$/;"	e	enum:__anon35
NVME_DSMGMT_IDW	femu/nvme.h	/^    NVME_DSMGMT_IDW = 1 << 1,$/;"	e	enum:__anon35
NVME_DULB	femu/nvme.h	/^    NVME_DULB                   = 0x0287,$/;"	e	enum:NvmeStatusCodes
NVME_E2E_APP_ERROR	femu/nvme.h	/^    NVME_E2E_APP_ERROR          = 0x0283,$/;"	e	enum:NvmeStatusCodes
NVME_E2E_GUARD_ERROR	femu/nvme.h	/^    NVME_E2E_GUARD_ERROR        = 0x0282,$/;"	e	enum:NvmeStatusCodes
NVME_E2E_REF_ERROR	femu/nvme.h	/^    NVME_E2E_REF_ERROR          = 0x0284,$/;"	e	enum:NvmeStatusCodes
NVME_ERROR_RECOVERY	femu/nvme.h	/^    NVME_ERROR_RECOVERY             = 0x5,$/;"	e	enum:NvmeFeatureIds
NVME_ERR_REC_DULBE	femu/nvme.h	807;"	d
NVME_FEAT_CAP_CHANGE	femu/nvme.h	/^    NVME_FEAT_CAP_CHANGE    = 1 << 2,$/;"	e	enum:NvmeFeatureCap
NVME_FEAT_CAP_NS	femu/nvme.h	/^    NVME_FEAT_CAP_NS        = 1 << 1,$/;"	e	enum:NvmeFeatureCap
NVME_FEAT_CAP_SAVE	femu/nvme.h	/^    NVME_FEAT_CAP_SAVE      = 1 << 0,$/;"	e	enum:NvmeFeatureCap
NVME_FID_MAX	femu/nvme.h	/^    NVME_FID_MAX                    = 0x100$/;"	e	enum:NvmeFeatureIds
NVME_FID_NOT_NSID_SPEC	femu/nvme.h	/^    NVME_FID_NOT_NSID_SPEC      = 0x010f,$/;"	e	enum:NvmeStatusCodes
NVME_FID_NOT_SAVEABLE	femu/nvme.h	/^    NVME_FID_NOT_SAVEABLE       = 0x010d,$/;"	e	enum:NvmeStatusCodes
NVME_FRMW_SLOT1_RO	femu/nvme.h	/^    NVME_FRMW_SLOT1_RO = 1 << 0,$/;"	e	enum:NvmeIdCtrlFrmw
NVME_FW_REQ_RESET	femu/nvme.h	/^    NVME_FW_REQ_RESET           = 0x010b,$/;"	e	enum:NvmeStatusCodes
NVME_FW_REQ_SUSYSTEM_RESET	femu/nvme.h	/^    NVME_FW_REQ_SUSYSTEM_RESET  = 0x0110,$/;"	e	enum:NvmeStatusCodes
NVME_GETFEAT_SELECT_CAP	femu/nvme.h	/^    NVME_GETFEAT_SELECT_CAP     = 0x3,$/;"	e	enum:NvmeGetFeatureSelect
NVME_GETFEAT_SELECT_CURRENT	femu/nvme.h	/^    NVME_GETFEAT_SELECT_CURRENT = 0x0,$/;"	e	enum:NvmeGetFeatureSelect
NVME_GETFEAT_SELECT_DEFAULT	femu/nvme.h	/^    NVME_GETFEAT_SELECT_DEFAULT = 0x1,$/;"	e	enum:NvmeGetFeatureSelect
NVME_GETFEAT_SELECT_SAVED	femu/nvme.h	/^    NVME_GETFEAT_SELECT_SAVED   = 0x2,$/;"	e	enum:NvmeGetFeatureSelect
NVME_GUEST_ERR	nvme.c	93;"	d	file:
NVME_HOST_MEMORY_BUFFER	femu/nvme.h	/^	NVME_HOST_MEMORY_BUFFER			= 0xd, 	$/;"	e	enum:NvmeFeatureIds
NVME_IDENTIFY_DATA_SIZE	femu/nvme-admin.c	3;"	d	file:
NVME_IDENTIFY_DATA_SIZE	femu/nvme.h	669;"	d
NVME_ID_CNS_CS_CTRL	femu/nvme.h	/^    NVME_ID_CNS_CS_CTRL               = 0x06,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_CS_NS	femu/nvme.h	/^    NVME_ID_CNS_CS_NS                 = 0x05,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_CS_NS_ACTIVE_LIST	femu/nvme.h	/^    NVME_ID_CNS_CS_NS_ACTIVE_LIST     = 0x07,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_CS_NS_PRESENT	femu/nvme.h	/^    NVME_ID_CNS_CS_NS_PRESENT         = 0x1b,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_CS_NS_PRESENT_LIST	femu/nvme.h	/^    NVME_ID_CNS_CS_NS_PRESENT_LIST    = 0x1a,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_CTRL	femu/nvme.h	/^    NVME_ID_CNS_CTRL                  = 0x01,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_IO_COMMAND_SET	femu/nvme.h	/^    NVME_ID_CNS_IO_COMMAND_SET        = 0x1c,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_NS	femu/nvme.h	/^    NVME_ID_CNS_NS                    = 0x00,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_NS_ACTIVE_LIST	femu/nvme.h	/^    NVME_ID_CNS_NS_ACTIVE_LIST        = 0x02,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_NS_DESCR_LIST	femu/nvme.h	/^    NVME_ID_CNS_NS_DESCR_LIST         = 0x03,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_NS_PRESENT	femu/nvme.h	/^    NVME_ID_CNS_NS_PRESENT            = 0x11,$/;"	e	enum:NvmeIdCns
NVME_ID_CNS_NS_PRESENT_LIST	femu/nvme.h	/^    NVME_ID_CNS_NS_PRESENT_LIST       = 0x10,$/;"	e	enum:NvmeIdCns
NVME_ID_NS_DPC_FIRST_EIGHT	femu/nvme.h	920;"	d
NVME_ID_NS_DPC_LAST_EIGHT	femu/nvme.h	919;"	d
NVME_ID_NS_DPC_TYPE_1	femu/nvme.h	923;"	d
NVME_ID_NS_DPC_TYPE_2	femu/nvme.h	922;"	d
NVME_ID_NS_DPC_TYPE_3	femu/nvme.h	921;"	d
NVME_ID_NS_DPC_TYPE_MASK	femu/nvme.h	924;"	d
NVME_ID_NS_FLBAS_EXTENDED	femu/nvme.h	915;"	d
NVME_ID_NS_FLBAS_INDEX	femu/nvme.h	916;"	d
NVME_ID_NS_LBADS	femu/nvme.h	20;"	d
NVME_ID_NS_LBADS_BYTES	femu/nvme.h	23;"	d
NVME_ID_NS_LBAF_DS	femu/nvme.h	30;"	d
NVME_ID_NS_LBAF_MS	femu/nvme.h	31;"	d
NVME_ID_NS_MC_EXTENDED	femu/nvme.h	918;"	d
NVME_ID_NS_MC_SEPARATE	femu/nvme.h	917;"	d
NVME_ID_NS_MS	femu/nvme.h	25;"	d
NVME_ID_NS_NSFEAT_THIN	femu/nvme.h	914;"	d
NVME_INTC_THR	femu/nvme.h	804;"	d
NVME_INTC_TIME	femu/nvme.h	805;"	d
NVME_INTERNAL_DEV_ERROR	femu/nvme.h	/^    NVME_INTERNAL_DEV_ERROR     = 0x0006,$/;"	e	enum:NvmeStatusCodes
NVME_INTERRUPT_COALESCING	femu/nvme.h	/^    NVME_INTERRUPT_COALESCING       = 0x8,$/;"	e	enum:NvmeFeatureIds
NVME_INTERRUPT_VECTOR_CONF	femu/nvme.h	/^    NVME_INTERRUPT_VECTOR_CONF      = 0x9,$/;"	e	enum:NvmeFeatureIds
NVME_INVALID_CMD_SET	femu/nvme.h	/^    NVME_INVALID_CMD_SET        = 0x002c,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_CQID	femu/nvme.h	/^    NVME_INVALID_CQID           = 0x0100,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_FIELD	femu/nvme.h	/^    NVME_INVALID_FIELD          = 0x0002,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_FORMAT	femu/nvme.h	/^    NVME_INVALID_FORMAT         = 0x010a,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_FW_IMAGE	femu/nvme.h	/^    NVME_INVALID_FW_IMAGE       = 0x0107,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_FW_SLOT	femu/nvme.h	/^    NVME_INVALID_FW_SLOT        = 0x0106,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_IRQ_VECTOR	femu/nvme.h	/^    NVME_INVALID_IRQ_VECTOR     = 0x0108,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_LOG_ID	femu/nvme.h	/^    NVME_INVALID_LOG_ID         = 0x0109,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_MEMORY_ADDRESS	femu/nvme.h	/^    NVME_INVALID_MEMORY_ADDRESS = 0x01C0,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_NSID	femu/nvme.h	/^    NVME_INVALID_NSID           = 0x000b,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_OPCODE	femu/nvme.h	/^    NVME_INVALID_OPCODE         = 0x0001,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_PROT_INFO	femu/nvme.h	/^    NVME_INVALID_PROT_INFO      = 0x0181,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_QID	femu/nvme.h	/^    NVME_INVALID_QID            = 0x0101,$/;"	e	enum:NvmeStatusCodes
NVME_INVALID_QUEUE_DEL	femu/nvme.h	/^    NVME_INVALID_QUEUE_DEL      = 0x010c,$/;"	e	enum:NvmeStatusCodes
NVME_LBA_RANGE	femu/nvme.h	/^    NVME_LBA_RANGE              = 0x0080,$/;"	e	enum:NvmeStatusCodes
NVME_LBA_RANGE_TYPE	femu/nvme.h	/^    NVME_LBA_RANGE_TYPE             = 0x3,$/;"	e	enum:NvmeFeatureIds
NVME_LOG_CMD_EFFECTS	femu/nvme.h	/^    NVME_LOG_CMD_EFFECTS    = 0x05,$/;"	e	enum:LogIdentifier
NVME_LOG_ERROR_INFO	femu/nvme.h	/^    NVME_LOG_ERROR_INFO     = 0x01,$/;"	e	enum:LogIdentifier
NVME_LOG_FW_SLOT_INFO	femu/nvme.h	/^    NVME_LOG_FW_SLOT_INFO   = 0x03,$/;"	e	enum:LogIdentifier
NVME_LOG_SMART_INFO	femu/nvme.h	/^    NVME_LOG_SMART_INFO     = 0x02,$/;"	e	enum:LogIdentifier
NVME_LPA_CSE	femu/nvme.h	/^    NVME_LPA_CSE      = 1 << 1,$/;"	e	enum:NvmeIdCtrlLpa
NVME_LPA_EXTENDED	femu/nvme.h	/^    NVME_LPA_EXTENDED = 1 << 2,$/;"	e	enum:NvmeIdCtrlLpa
NVME_LPA_NS_SMART	femu/nvme.h	/^    NVME_LPA_NS_SMART = 1 << 0,$/;"	e	enum:NvmeIdCtrlLpa
NVME_MAX_IOQPAIRS	nvme.c	83;"	d	file:
NVME_MAX_NAMESPACES	nvme.h	7;"	d
NVME_MAX_NUM_NAMESPACES	femu/nvme.h	78;"	d
NVME_MAX_QS	femu/nvme.h	75;"	d
NVME_MAX_QSIZE_EXCEEDED	femu/nvme.h	/^    NVME_MAX_QSIZE_EXCEEDED     = 0x0102,$/;"	e	enum:NvmeStatusCodes
NVME_MAX_QUEUE_ENTRIES	femu/nvme.h	76;"	d
NVME_MAX_QUEUE_ES	femu/nvme.h	79;"	d
NVME_MAX_STRIDE	femu/nvme.h	77;"	d
NVME_MIN_CQUEUE_ES	femu/nvme.h	80;"	d
NVME_MIN_SQUEUE_ES	femu/nvme.h	81;"	d
NVME_MORE	femu/nvme.h	/^    NVME_MORE                   = 0x2000,$/;"	e	enum:NvmeStatusCodes
NVME_NIDL_CSI	femu/nvme.h	/^    NVME_NIDL_CSI               = 1,$/;"	e	enum:NvmeNsIdentifierLength
NVME_NIDL_EUI64	femu/nvme.h	/^    NVME_NIDL_EUI64             = 8,$/;"	e	enum:NvmeNsIdentifierLength
NVME_NIDL_NGUID	femu/nvme.h	/^    NVME_NIDL_NGUID             = 16,$/;"	e	enum:NvmeNsIdentifierLength
NVME_NIDL_UUID	femu/nvme.h	/^    NVME_NIDL_UUID              = 16,$/;"	e	enum:NvmeNsIdentifierLength
NVME_NIDT_CSI	femu/nvme.h	/^    NVME_NIDT_CSI               = 0x04,$/;"	e	enum:NvmeNsIdentifierType
NVME_NIDT_EUI64	femu/nvme.h	/^    NVME_NIDT_EUI64             = 0x01,$/;"	e	enum:NvmeNsIdentifierType
NVME_NIDT_NGUID	femu/nvme.h	/^    NVME_NIDT_NGUID             = 0x02,$/;"	e	enum:NvmeNsIdentifierType
NVME_NIDT_UUID	femu/nvme.h	/^    NVME_NIDT_UUID              = 0x03,$/;"	e	enum:NvmeNsIdentifierType
NVME_NO_COMPLETE	femu/nvme.h	/^    NVME_NO_COMPLETE            = 0xffff,$/;"	e	enum:NvmeStatusCodes
NVME_NS	nvme-ns.h	19;"	d
NVME_NSID_BROADCAST	femu/nvme.h	857;"	d
NVME_NS_H	nvme-ns.h	16;"	d
NVME_NS_NOT_READY	femu/nvme.h	/^    NVME_NS_NOT_READY           = 0x0082,$/;"	e	enum:NvmeStatusCodes
NVME_NS_RESV_CONFLICT	femu/nvme.h	/^    NVME_NS_RESV_CONFLICT       = 0x0083,$/;"	e	enum:NvmeStatusCodes
NVME_NUMBER_OF_QUEUES	femu/nvme.h	/^    NVME_NUMBER_OF_QUEUES           = 0x7,$/;"	e	enum:NvmeFeatureIds
NVME_NUM_FW_SLOTS	nvme.c	91;"	d	file:
NVME_OACS_DBBUF	femu/nvme.h	/^    NVME_OACS_DBBUF         = 1 << 8,$/;"	e	enum:NvmeIdCtrlOacs
NVME_OACS_FORMAT	femu/nvme.h	/^    NVME_OACS_FORMAT        = 1 << 1,$/;"	e	enum:NvmeIdCtrlOacs
NVME_OACS_FW	femu/nvme.h	/^    NVME_OACS_FW            = 1 << 2,$/;"	e	enum:NvmeIdCtrlOacs
NVME_OACS_Oc12DEV	femu/nvme.h	/^    NVME_OACS_Oc12DEV = 1 << 3,$/;"	e	enum:NvmeIdCtrlOacs
NVME_OACS_SECURITY	femu/nvme.h	/^    NVME_OACS_SECURITY      = 1 << 0,$/;"	e	enum:NvmeIdCtrlOacs
NVME_ONCS_COMPARE	femu/nvme.h	/^    NVME_ONCS_COMPARE       = 1 << 0,$/;"	e	enum:NvmeIdCtrlOncs
NVME_ONCS_DSM	femu/nvme.h	/^    NVME_ONCS_DSM           = 1 << 2,$/;"	e	enum:NvmeIdCtrlOncs
NVME_ONCS_FEATURES	femu/nvme.h	/^    NVME_ONCS_FEATURES      = 1 << 4,$/;"	e	enum:NvmeIdCtrlOncs
NVME_ONCS_RESRVATIONS	femu/nvme.h	/^    NVME_ONCS_RESRVATIONS   = 1 << 5,$/;"	e	enum:NvmeIdCtrlOncs
NVME_ONCS_WRITE_UNCORR	femu/nvme.h	/^    NVME_ONCS_WRITE_UNCORR  = 1 << 1,$/;"	e	enum:NvmeIdCtrlOncs
NVME_ONCS_WRITE_ZEROS	femu/nvme.h	/^    NVME_ONCS_WRITE_ZEROS   = 1 << 3,$/;"	e	enum:NvmeIdCtrlOncs
NVME_OP_ABORTED	femu/nvme.h	84;"	d
NVME_PMR_BIR	nvme.c	87;"	d	file:
NVME_POWER_LOSS_ABORT	femu/nvme.h	/^    NVME_POWER_LOSS_ABORT       = 0x0005,$/;"	e	enum:NvmeStatusCodes
NVME_POWER_MANAGEMENT	femu/nvme.h	/^    NVME_POWER_MANAGEMENT           = 0x2,$/;"	e	enum:NvmeFeatureIds
NVME_PROC_CLOSED_ZONES	femu/zns/zns.c	/^    NVME_PROC_CLOSED_ZONES    = 1 << 1,$/;"	e	enum:NvmeZoneProcessingMask	file:
NVME_PROC_CURRENT_ZONE	femu/zns/zns.c	/^    NVME_PROC_CURRENT_ZONE    = 0,$/;"	e	enum:NvmeZoneProcessingMask	file:
NVME_PROC_FULL_ZONES	femu/zns/zns.c	/^    NVME_PROC_FULL_ZONES      = 1 << 3,$/;"	e	enum:NvmeZoneProcessingMask	file:
NVME_PROC_OPENED_ZONES	femu/zns/zns.c	/^    NVME_PROC_OPENED_ZONES    = 1 << 0,$/;"	e	enum:NvmeZoneProcessingMask	file:
NVME_PROC_READ_ONLY_ZONES	femu/zns/zns.c	/^    NVME_PROC_READ_ONLY_ZONES = 1 << 2,$/;"	e	enum:NvmeZoneProcessingMask	file:
NVME_PSDT_PRP	femu/nvme.h	/^    NVME_PSDT_PRP                 = 0x0,$/;"	e	enum:NvmePsdt
NVME_PSDT_SGL_MPTR_CONTIGUOUS	femu/nvme.h	/^    NVME_PSDT_SGL_MPTR_CONTIGUOUS = 0x1,$/;"	e	enum:NvmePsdt
NVME_PSDT_SGL_MPTR_SGL	femu/nvme.h	/^    NVME_PSDT_SGL_MPTR_SGL        = 0x2,$/;"	e	enum:NvmePsdt
NVME_Q_PC	femu/nvme.h	/^    NVME_Q_PC           = 1,$/;"	e	enum:NvmeQueueFlags
NVME_Q_PRIO_HIGH	femu/nvme.h	/^    NVME_Q_PRIO_HIGH    = 1,$/;"	e	enum:NvmeQueueFlags
NVME_Q_PRIO_LOW	femu/nvme.h	/^    NVME_Q_PRIO_LOW     = 3,$/;"	e	enum:NvmeQueueFlags
NVME_Q_PRIO_NORMAL	femu/nvme.h	/^    NVME_Q_PRIO_NORMAL  = 2,$/;"	e	enum:NvmeQueueFlags
NVME_Q_PRIO_URGENT	femu/nvme.h	/^    NVME_Q_PRIO_URGENT  = 0,$/;"	e	enum:NvmeQueueFlags
NVME_RESERVED	femu/nvme.h	/^    NVME_RESERVED               = 0x0104,$/;"	e	enum:NvmeStatusCodes
NVME_RW_DSM_COMPRESSED	femu/nvme.h	/^    NVME_RW_DSM_COMPRESSED      = 1 << 7,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_ONCE	femu/nvme.h	/^    NVME_RW_DSM_FREQ_ONCE       = 6,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_PREFETCH	femu/nvme.h	/^    NVME_RW_DSM_FREQ_PREFETCH   = 7,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_RARE	femu/nvme.h	/^    NVME_RW_DSM_FREQ_RARE       = 2,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_READS	femu/nvme.h	/^    NVME_RW_DSM_FREQ_READS      = 3,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_RW	femu/nvme.h	/^    NVME_RW_DSM_FREQ_RW         = 5,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_TEMP	femu/nvme.h	/^    NVME_RW_DSM_FREQ_TEMP       = 8,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_TYPICAL	femu/nvme.h	/^    NVME_RW_DSM_FREQ_TYPICAL    = 1,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_UNSPEC	femu/nvme.h	/^    NVME_RW_DSM_FREQ_UNSPEC     = 0,$/;"	e	enum:__anon34
NVME_RW_DSM_FREQ_WRITES	femu/nvme.h	/^    NVME_RW_DSM_FREQ_WRITES     = 4,$/;"	e	enum:__anon34
NVME_RW_DSM_LATENCY_IDLE	femu/nvme.h	/^    NVME_RW_DSM_LATENCY_IDLE    = 1 << 4,$/;"	e	enum:__anon34
NVME_RW_DSM_LATENCY_LOW	femu/nvme.h	/^    NVME_RW_DSM_LATENCY_LOW     = 3 << 4,$/;"	e	enum:__anon34
NVME_RW_DSM_LATENCY_NONE	femu/nvme.h	/^    NVME_RW_DSM_LATENCY_NONE    = 0 << 4,$/;"	e	enum:__anon34
NVME_RW_DSM_LATENCY_NORM	femu/nvme.h	/^    NVME_RW_DSM_LATENCY_NORM    = 2 << 4,$/;"	e	enum:__anon34
NVME_RW_DSM_SEQ_REQ	femu/nvme.h	/^    NVME_RW_DSM_SEQ_REQ         = 1 << 6,$/;"	e	enum:__anon34
NVME_RW_FUA	femu/nvme.h	/^    NVME_RW_FUA                 = 1 << 14,$/;"	e	enum:__anon34
NVME_RW_LR	femu/nvme.h	/^    NVME_RW_LR                  = 1 << 15,$/;"	e	enum:__anon34
NVME_RW_PRINFO_PRACT	femu/nvme.h	/^    NVME_RW_PRINFO_PRACT        = 1 << 13,$/;"	e	enum:__anon34
NVME_RW_PRINFO_PRCHK_APP	femu/nvme.h	/^    NVME_RW_PRINFO_PRCHK_APP    = 1 << 11,$/;"	e	enum:__anon34
NVME_RW_PRINFO_PRCHK_GUARD	femu/nvme.h	/^    NVME_RW_PRINFO_PRCHK_GUARD  = 1 << 12,$/;"	e	enum:__anon34
NVME_RW_PRINFO_PRCHK_REF	femu/nvme.h	/^    NVME_RW_PRINFO_PRCHK_REF    = 1 << 10,$/;"	e	enum:__anon34
NVME_SET_CSI	femu/nvme.h	579;"	d
NVME_SET_CSI	femu/zns/zns.h	80;"	d
NVME_SGL_SUBTYPE	femu/nvme.h	273;"	d
NVME_SGL_TYPE	femu/nvme.h	272;"	d
NVME_SMART_FAILED_VOLATILE_MEDIA	femu/nvme.h	/^    NVME_SMART_FAILED_VOLATILE_MEDIA  = 1 << 4,$/;"	e	enum:NvmeSmartWarn
NVME_SMART_MEDIA_READ_ONLY	femu/nvme.h	/^    NVME_SMART_MEDIA_READ_ONLY        = 1 << 3,$/;"	e	enum:NvmeSmartWarn
NVME_SMART_RELIABILITY	femu/nvme.h	/^    NVME_SMART_RELIABILITY            = 1 << 2,$/;"	e	enum:NvmeSmartWarn
NVME_SMART_SPARE	femu/nvme.h	/^    NVME_SMART_SPARE                  = 1 << 0,$/;"	e	enum:NvmeSmartWarn
NVME_SMART_TEMPERATURE	femu/nvme.h	/^    NVME_SMART_TEMPERATURE            = 1 << 1,$/;"	e	enum:NvmeSmartWarn
NVME_SOFTWARE_PROGRESS_MARKER	femu/nvme.h	/^    NVME_SOFTWARE_PROGRESS_MARKER   = 0x80,$/;"	e	enum:NvmeFeatureIds
NVME_SPARE_THRESHOLD	femu/nvme.h	82;"	d
NVME_SPEC_VER	femu/femu.c	6;"	d	file:
NVME_SPEC_VER	nvme.c	85;"	d	file:
NVME_SQ_FLAGS_PC	femu/nvme.h	389;"	d
NVME_SQ_FLAGS_QPRIO	femu/nvme.h	390;"	d
NVME_SUCCESS	femu/nvme.h	/^    NVME_SUCCESS                = 0x0000,$/;"	e	enum:NvmeStatusCodes
NVME_TEMPERATURE	femu/nvme.h	83;"	d
NVME_TEMPERATURE	nvme.c	88;"	d	file:
NVME_TEMPERATURE_CRITICAL	nvme.c	90;"	d	file:
NVME_TEMPERATURE_THRESHOLD	femu/nvme.h	/^    NVME_TEMPERATURE_THRESHOLD      = 0x4,$/;"	e	enum:NvmeFeatureIds
NVME_TEMPERATURE_WARNING	nvme.c	89;"	d	file:
NVME_TIMESTAMP	femu/nvme.h	/^	NVME_TIMESTAMP                  = 0xe,$/;"	e	enum:NvmeFeatureIds
NVME_UNRECOVERED_READ	femu/nvme.h	/^    NVME_UNRECOVERED_READ       = 0x0281,$/;"	e	enum:NvmeStatusCodes
NVME_VOLATILE_WRITE_CACHE	femu/nvme.h	/^    NVME_VOLATILE_WRITE_CACHE       = 0x6,$/;"	e	enum:NvmeFeatureIds
NVME_WRITE_ATOMICITY	femu/nvme.h	/^    NVME_WRITE_ATOMICITY            = 0xa,$/;"	e	enum:NvmeFeatureIds
NVME_WRITE_FAULT	femu/nvme.h	/^    NVME_WRITE_FAULT            = 0x0280,$/;"	e	enum:NvmeStatusCodes
NVME_WRITE_TO_RO	femu/nvme.h	/^    NVME_WRITE_TO_RO            = 0x0182,$/;"	e	enum:NvmeStatusCodes
NVME_ZA_FINISHED_BY_CTLR	femu/zns/zns.h	/^    NVME_ZA_FINISHED_BY_CTLR         = 1 << 0,$/;"	e	enum:NvmeZoneAttr
NVME_ZA_FINISH_RECOMMENDED	femu/zns/zns.h	/^    NVME_ZA_FINISH_RECOMMENDED       = 1 << 1,$/;"	e	enum:NvmeZoneAttr
NVME_ZA_RESET_RECOMMENDED	femu/zns/zns.h	/^    NVME_ZA_RESET_RECOMMENDED        = 1 << 2,$/;"	e	enum:NvmeZoneAttr
NVME_ZA_ZD_EXT_VALID	femu/zns/zns.h	/^    NVME_ZA_ZD_EXT_VALID             = 1 << 7,$/;"	e	enum:NvmeZoneAttr
NVME_ZONE_ACTION_CLOSE	femu/zns/zns.h	/^    NVME_ZONE_ACTION_CLOSE           = 0x01,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_ACTION_FINISH	femu/zns/zns.h	/^    NVME_ZONE_ACTION_FINISH          = 0x02,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_ACTION_OFFLINE	femu/zns/zns.h	/^    NVME_ZONE_ACTION_OFFLINE         = 0x05,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_ACTION_OPEN	femu/zns/zns.h	/^    NVME_ZONE_ACTION_OPEN            = 0x03,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_ACTION_RESET	femu/zns/zns.h	/^    NVME_ZONE_ACTION_RESET           = 0x04,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_ACTION_RSD	femu/zns/zns.h	/^    NVME_ZONE_ACTION_RSD             = 0x00,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_ACTION_SET_ZD_EXT	femu/zns/zns.h	/^    NVME_ZONE_ACTION_SET_ZD_EXT      = 0x10,$/;"	e	enum:NvmeZoneSendAction
NVME_ZONE_BOUNDARY_ERROR	femu/nvme.h	/^    NVME_ZONE_BOUNDARY_ERROR    = 0x01b8,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_FULL	femu/nvme.h	/^    NVME_ZONE_FULL              = 0x01b9,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_INVALID_WRITE	femu/nvme.h	/^    NVME_ZONE_INVALID_WRITE     = 0x01bc,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_INVAL_TRANSITION	femu/nvme.h	/^    NVME_ZONE_INVAL_TRANSITION  = 0x01bf,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_OFFLINE	femu/nvme.h	/^    NVME_ZONE_OFFLINE           = 0x01bb,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_READ_ONLY	femu/nvme.h	/^    NVME_ZONE_READ_ONLY         = 0x01ba,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_REPORT	femu/zns/zns.h	/^    NVME_ZONE_REPORT                 = 0,$/;"	e	enum:NvmeZoneReceiveAction
NVME_ZONE_REPORT_ALL	femu/zns/zns.h	/^    NVME_ZONE_REPORT_ALL             = 0,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_CLOSED	femu/zns/zns.h	/^    NVME_ZONE_REPORT_CLOSED          = 4,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_EMPTY	femu/zns/zns.h	/^    NVME_ZONE_REPORT_EMPTY           = 1,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_EXPLICITLY_OPEN	femu/zns/zns.h	/^    NVME_ZONE_REPORT_EXPLICITLY_OPEN = 3,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_EXTENDED	femu/zns/zns.h	/^    NVME_ZONE_REPORT_EXTENDED        = 1,$/;"	e	enum:NvmeZoneReceiveAction
NVME_ZONE_REPORT_FULL	femu/zns/zns.h	/^    NVME_ZONE_REPORT_FULL            = 5,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_IMPLICITLY_OPEN	femu/zns/zns.h	/^    NVME_ZONE_REPORT_IMPLICITLY_OPEN = 2,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_OFFLINE	femu/zns/zns.h	/^    NVME_ZONE_REPORT_OFFLINE         = 7,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_REPORT_READ_ONLY	femu/zns/zns.h	/^    NVME_ZONE_REPORT_READ_ONLY       = 6,$/;"	e	enum:NvmeZoneReportType
NVME_ZONE_STATE_CLOSED	femu/zns/zns.h	/^    NVME_ZONE_STATE_CLOSED           = 0x04,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_EMPTY	femu/zns/zns.h	/^    NVME_ZONE_STATE_EMPTY            = 0x01,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_EXPLICITLY_OPEN	femu/zns/zns.h	/^    NVME_ZONE_STATE_EXPLICITLY_OPEN  = 0x03,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_FULL	femu/zns/zns.h	/^    NVME_ZONE_STATE_FULL             = 0x0E,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_IMPLICITLY_OPEN	femu/zns/zns.h	/^    NVME_ZONE_STATE_IMPLICITLY_OPEN  = 0x02,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_OFFLINE	femu/zns/zns.h	/^    NVME_ZONE_STATE_OFFLINE          = 0x0F,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_READ_ONLY	femu/zns/zns.h	/^    NVME_ZONE_STATE_READ_ONLY        = 0x0D,$/;"	e	enum:NvmeZoneState
NVME_ZONE_STATE_RESERVED	femu/zns/zns.h	/^    NVME_ZONE_STATE_RESERVED         = 0x00,$/;"	e	enum:NvmeZoneState
NVME_ZONE_TOO_MANY_ACTIVE	femu/nvme.h	/^    NVME_ZONE_TOO_MANY_ACTIVE   = 0x01bd,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_TOO_MANY_OPEN	femu/nvme.h	/^    NVME_ZONE_TOO_MANY_OPEN     = 0x01be,$/;"	e	enum:NvmeStatusCodes
NVME_ZONE_TYPE_RESERVED	femu/zns/zns.h	/^    NVME_ZONE_TYPE_RESERVED          = 0x00,$/;"	e	enum:NvmeZoneType
NVME_ZONE_TYPE_SEQ_WRITE	femu/zns/zns.h	/^    NVME_ZONE_TYPE_SEQ_WRITE         = 0x02,$/;"	e	enum:NvmeZoneType
NandFlash	femu/nand/nand.h	/^struct NandFlash {$/;"	s
NandFlashTiming	femu/nand/nand.h	/^typedef struct NandFlashTiming {$/;"	s
NandFlashTiming	femu/nand/nand.h	/^} NandFlashTiming;$/;"	t	typeref:struct:NandFlashTiming
NvmeAdminCommands	femu/nvme.h	/^enum NvmeAdminCommands {$/;"	g
NvmeAerResult	femu/nvme.h	/^typedef struct NvmeAerResult {$/;"	s
NvmeAerResult	femu/nvme.h	/^} NvmeAerResult;$/;"	t	typeref:struct:NvmeAerResult
NvmeAqaMask	femu/nvme.h	/^enum NvmeAqaMask {$/;"	g
NvmeAqaShift	femu/nvme.h	/^enum NvmeAqaShift {$/;"	g
NvmeAsyncEvent	femu/nvme.h	/^typedef struct NvmeAsyncEvent {$/;"	s
NvmeAsyncEvent	femu/nvme.h	/^} NvmeAsyncEvent;$/;"	t	typeref:struct:NvmeAsyncEvent
NvmeAsyncEvent	nvme.h	/^typedef struct NvmeAsyncEvent {$/;"	s
NvmeAsyncEvent	nvme.h	/^} NvmeAsyncEvent;$/;"	t	typeref:struct:NvmeAsyncEvent
NvmeAsyncEventRequest	femu/nvme.h	/^enum NvmeAsyncEventRequest {$/;"	g
NvmeBar	femu/nvme.h	/^typedef struct NvmeBar {$/;"	s
NvmeBar	femu/nvme.h	/^} NvmeBar;$/;"	t	typeref:struct:NvmeBar
NvmeBus	nvme.h	/^typedef struct NvmeBus {$/;"	s
NvmeBus	nvme.h	/^} NvmeBus;$/;"	t	typeref:struct:NvmeBus
NvmeCQueue	femu/nvme.h	/^typedef struct NvmeCQueue {$/;"	s
NvmeCQueue	femu/nvme.h	/^} NvmeCQueue;$/;"	t	typeref:struct:NvmeCQueue
NvmeCQueue	nvme.h	/^typedef struct NvmeCQueue {$/;"	s
NvmeCQueue	nvme.h	/^} NvmeCQueue;$/;"	t	typeref:struct:NvmeCQueue
NvmeCapCss	femu/nvme.h	/^enum NvmeCapCss {$/;"	g
NvmeCapMask	femu/nvme.h	/^enum NvmeCapMask {$/;"	g
NvmeCapShift	femu/nvme.h	/^enum NvmeCapShift {$/;"	g
NvmeCcCss	femu/nvme.h	/^enum NvmeCcCss {$/;"	g
NvmeCcMask	femu/nvme.h	/^enum NvmeCcMask {$/;"	g
NvmeCcShift	femu/nvme.h	/^enum NvmeCcShift {$/;"	g
NvmeCmblocMask	femu/nvme.h	/^enum NvmeCmblocMask {$/;"	g
NvmeCmblocShift	femu/nvme.h	/^enum NvmeCmblocShift {$/;"	g
NvmeCmbszMask	femu/nvme.h	/^enum NvmeCmbszMask {$/;"	g
NvmeCmbszShift	femu/nvme.h	/^enum NvmeCmbszShift {$/;"	g
NvmeCmd	femu/nvme.h	/^typedef struct NvmeCmd {$/;"	s
NvmeCmd	femu/nvme.h	/^} NvmeCmd;$/;"	t	typeref:struct:NvmeCmd
NvmeCmdDptr	femu/nvme.h	/^typedef union NvmeCmdDptr {$/;"	u
NvmeCmdDptr	femu/nvme.h	/^} NvmeCmdDptr;$/;"	t	typeref:union:NvmeCmdDptr
NvmeCqe	femu/nvme.h	/^typedef struct NvmeCqe {$/;"	s
NvmeCqe	femu/nvme.h	/^} NvmeCqe;$/;"	t	typeref:struct:NvmeCqe
NvmeCreateCq	femu/nvme.h	/^typedef struct NvmeCreateCq {$/;"	s
NvmeCreateCq	femu/nvme.h	/^} NvmeCreateCq;$/;"	t	typeref:struct:NvmeCreateCq
NvmeCreateSq	femu/nvme.h	/^typedef struct NvmeCreateSq {$/;"	s
NvmeCreateSq	femu/nvme.h	/^} NvmeCreateSq;$/;"	t	typeref:struct:NvmeCreateSq
NvmeCsi	femu/nvme.h	/^enum NvmeCsi {$/;"	g
NvmeCsts	femu/nvme.h	/^enum NvmeCsts {$/;"	g
NvmeCstsMask	femu/nvme.h	/^enum NvmeCstsMask {$/;"	g
NvmeCstsShift	femu/nvme.h	/^enum NvmeCstsShift {$/;"	g
NvmeCtrl	nvme-ns.h	/^typedef struct NvmeCtrl NvmeCtrl;$/;"	t	typeref:struct:NvmeCtrl
NvmeCtrl	nvme.h	/^typedef struct NvmeCtrl {$/;"	s
NvmeCtrl	nvme.h	/^} NvmeCtrl;$/;"	t	typeref:struct:NvmeCtrl
NvmeDeleteQ	femu/nvme.h	/^typedef struct NvmeDeleteQ {$/;"	s
NvmeDeleteQ	femu/nvme.h	/^} NvmeDeleteQ;$/;"	t	typeref:struct:NvmeDeleteQ
NvmeDifTuple	femu/nvme.h	/^typedef struct NvmeDifTuple {$/;"	s
NvmeDifTuple	femu/nvme.h	/^} NvmeDifTuple;$/;"	t	typeref:struct:NvmeDifTuple
NvmeDsmCmd	femu/nvme.h	/^typedef struct NvmeDsmCmd {$/;"	s
NvmeDsmCmd	femu/nvme.h	/^} NvmeDsmCmd;$/;"	t	typeref:struct:NvmeDsmCmd
NvmeDsmRange	femu/nvme.h	/^typedef struct NvmeDsmRange {$/;"	s
NvmeDsmRange	femu/nvme.h	/^} NvmeDsmRange;$/;"	t	typeref:struct:NvmeDsmRange
NvmeEffectsLog	femu/nvme.h	/^typedef struct NvmeEffectsLog {$/;"	s
NvmeEffectsLog	femu/nvme.h	/^} NvmeEffectsLog;$/;"	t	typeref:struct:NvmeEffectsLog
NvmeErrorLog	femu/nvme.h	/^typedef struct NvmeErrorLog {$/;"	s
NvmeErrorLog	femu/nvme.h	/^} NvmeErrorLog;$/;"	t	typeref:struct:NvmeErrorLog
NvmeFeatureCap	femu/nvme.h	/^typedef enum NvmeFeatureCap {$/;"	g
NvmeFeatureCap	femu/nvme.h	/^} NvmeFeatureCap;$/;"	t	typeref:enum:NvmeFeatureCap
NvmeFeatureIds	femu/nvme.h	/^enum NvmeFeatureIds {$/;"	g
NvmeFeatureVal	femu/nvme.h	/^typedef struct NvmeFeatureVal {$/;"	s
NvmeFeatureVal	femu/nvme.h	/^} NvmeFeatureVal;$/;"	t	typeref:struct:NvmeFeatureVal
NvmeFeatureVal	nvme.h	/^typedef struct NvmeFeatureVal {$/;"	s
NvmeFeatureVal	nvme.h	/^} NvmeFeatureVal;$/;"	t	typeref:struct:NvmeFeatureVal
NvmeFwSlotInfoLog	femu/nvme.h	/^typedef struct NvmeFwSlotInfoLog {$/;"	s
NvmeFwSlotInfoLog	femu/nvme.h	/^} NvmeFwSlotInfoLog;$/;"	t	typeref:struct:NvmeFwSlotInfoLog
NvmeGetFeatureSelect	femu/nvme.h	/^typedef enum NvmeGetFeatureSelect {$/;"	g
NvmeGetFeatureSelect	femu/nvme.h	/^} NvmeGetFeatureSelect;$/;"	t	typeref:enum:NvmeGetFeatureSelect
NvmeIdCns	femu/nvme.h	/^enum NvmeIdCns {$/;"	g
NvmeIdCtrl	femu/nvme.h	/^typedef struct QEMU_PACKED NvmeIdCtrl {$/;"	s
NvmeIdCtrl	femu/nvme.h	/^} NvmeIdCtrl;$/;"	t	typeref:struct:NvmeIdCtrl
NvmeIdCtrlFrmw	femu/nvme.h	/^enum NvmeIdCtrlFrmw {$/;"	g
NvmeIdCtrlLpa	femu/nvme.h	/^enum NvmeIdCtrlLpa {$/;"	g
NvmeIdCtrlOacs	femu/nvme.h	/^enum NvmeIdCtrlOacs {$/;"	g
NvmeIdCtrlOncs	femu/nvme.h	/^enum NvmeIdCtrlOncs {$/;"	g
NvmeIdCtrlZoned	femu/zns/zns.h	/^typedef struct NvmeIdCtrlZoned {$/;"	s
NvmeIdCtrlZoned	femu/zns/zns.h	/^} NvmeIdCtrlZoned;$/;"	t	typeref:struct:NvmeIdCtrlZoned
NvmeIdNs	femu/nvme.h	/^typedef struct NvmeIdNs {$/;"	s
NvmeIdNs	femu/nvme.h	/^} NvmeIdNs;$/;"	t	typeref:struct:NvmeIdNs
NvmeIdNsDescr	femu/nvme.h	/^typedef struct QEMU_PACKED NvmeIdNsDescr {$/;"	s
NvmeIdNsDescr	femu/nvme.h	/^} NvmeIdNsDescr;$/;"	t	typeref:struct:NvmeIdNsDescr
NvmeIdNsDps	femu/nvme.h	/^enum NvmeIdNsDps {$/;"	g
NvmeIdNsZoned	femu/nvme.h	/^typedef struct NvmeIdNsZoned NvmeIdNsZoned;$/;"	t	typeref:struct:NvmeIdNsZoned
NvmeIdNsZoned	femu/zns/zns.h	/^typedef struct QEMU_PACKED NvmeIdNsZoned {$/;"	s
NvmeIdNsZoned	femu/zns/zns.h	/^} NvmeIdNsZoned;$/;"	t	typeref:struct:NvmeIdNsZoned
NvmeIdentify	femu/nvme.h	/^} NvmeIdentify;$/;"	t	typeref:struct:NvmeIdentity
NvmeIdentity	femu/nvme.h	/^typedef struct NvmeIdentity {$/;"	s
NvmeIoCommands	femu/nvme.h	/^enum NvmeIoCommands {$/;"	g
NvmeLBAF	femu/nvme.h	/^typedef struct NvmeLBAF {$/;"	s
NvmeLBAF	femu/nvme.h	/^} NvmeLBAF;$/;"	t	typeref:struct:NvmeLBAF
NvmeLBAFE	femu/zns/zns.h	/^typedef struct QEMU_PACKED NvmeLBAFE {$/;"	s
NvmeLBAFE	femu/zns/zns.h	/^} NvmeLBAFE;$/;"	t	typeref:struct:NvmeLBAFE
NvmeNamespace	femu/nvme.h	/^typedef struct NvmeNamespace {$/;"	s
NvmeNamespace	femu/nvme.h	/^} NvmeNamespace;$/;"	t	typeref:struct:NvmeNamespace
NvmeNamespace	nvme-ns.h	/^typedef struct NvmeNamespace {$/;"	s
NvmeNamespace	nvme-ns.h	/^} NvmeNamespace;$/;"	t	typeref:struct:NvmeNamespace
NvmeNamespaceParams	femu/zns/zns.h	/^typedef struct NvmeNamespaceParams {$/;"	s
NvmeNamespaceParams	femu/zns/zns.h	/^} NvmeNamespaceParams;$/;"	t	typeref:struct:NvmeNamespaceParams
NvmeNamespaceParams	nvme-ns.h	/^typedef struct NvmeNamespaceParams {$/;"	s
NvmeNamespaceParams	nvme-ns.h	/^} NvmeNamespaceParams;$/;"	t	typeref:struct:NvmeNamespaceParams
NvmeNsIdentifierLength	femu/nvme.h	/^enum NvmeNsIdentifierLength {$/;"	g
NvmeNsIdentifierType	femu/nvme.h	/^enum NvmeNsIdentifierType {$/;"	g
NvmePSD	femu/nvme.h	/^typedef struct NvmePSD {$/;"	s
NvmePSD	femu/nvme.h	/^} NvmePSD;$/;"	t	typeref:struct:NvmePSD
NvmeParams	femu/nvme.h	/^typedef struct NvmeParams {$/;"	s
NvmeParams	femu/nvme.h	/^} NvmeParams;$/;"	t	typeref:struct:NvmeParams
NvmeParams	nvme.h	/^typedef struct NvmeParams {$/;"	s
NvmeParams	nvme.h	/^} NvmeParams;$/;"	t	typeref:struct:NvmeParams
NvmePollerThreadArgument	femu/nvme.h	/^typedef struct NvmePollerThreadArgument {$/;"	s
NvmePollerThreadArgument	femu/nvme.h	/^} NvmePollerThreadArgument;$/;"	t	typeref:struct:NvmePollerThreadArgument
NvmePsdt	femu/nvme.h	/^enum NvmePsdt {$/;"	g
NvmeQueueFlags	femu/nvme.h	/^enum NvmeQueueFlags {$/;"	g
NvmeRangeType	femu/nvme.h	/^typedef struct NvmeRangeType {$/;"	s
NvmeRangeType	femu/nvme.h	/^} NvmeRangeType;$/;"	t	typeref:struct:NvmeRangeType
NvmeRequest	femu/nvme.h	/^typedef struct NvmeRequest {$/;"	s
NvmeRequest	femu/nvme.h	/^} NvmeRequest;$/;"	t	typeref:struct:NvmeRequest
NvmeRequest	femu/ocssd/oc20.h	/^typedef struct NvmeRequest NvmeRequest;$/;"	t	typeref:struct:NvmeRequest
NvmeRequest	nvme.h	/^typedef struct NvmeRequest {$/;"	s
NvmeRequest	nvme.h	/^} NvmeRequest;$/;"	t	typeref:struct:NvmeRequest
NvmeRwCmd	femu/nvme.h	/^typedef struct NvmeRwCmd {$/;"	s
NvmeRwCmd	femu/nvme.h	/^} NvmeRwCmd;$/;"	t	typeref:struct:NvmeRwCmd
NvmeSQueue	femu/nvme.h	/^typedef struct NvmeSQueue {$/;"	s
NvmeSQueue	femu/nvme.h	/^} NvmeSQueue;$/;"	t	typeref:struct:NvmeSQueue
NvmeSQueue	nvme.h	/^typedef struct NvmeSQueue {$/;"	s
NvmeSQueue	nvme.h	/^} NvmeSQueue;$/;"	t	typeref:struct:NvmeSQueue
NvmeSglDescriptor	femu/nvme.h	/^typedef struct QEMU_PACKED NvmeSglDescriptor {$/;"	s
NvmeSglDescriptor	femu/nvme.h	/^} NvmeSglDescriptor;$/;"	t	typeref:struct:NvmeSglDescriptor
NvmeSmartLog	femu/nvme.h	/^typedef struct NvmeSmartLog {$/;"	s
NvmeSmartLog	femu/nvme.h	/^} NvmeSmartLog;$/;"	t	typeref:struct:NvmeSmartLog
NvmeSmartWarn	femu/nvme.h	/^enum NvmeSmartWarn {$/;"	g
NvmeStatusCodes	femu/nvme.h	/^enum NvmeStatusCodes {$/;"	g
NvmeZone	femu/nvme.h	/^typedef struct NvmeZone NvmeZone;$/;"	t	typeref:struct:NvmeZone
NvmeZone	femu/zns/zns.h	/^typedef struct NvmeZone {$/;"	s
NvmeZone	femu/zns/zns.h	/^} NvmeZone;$/;"	t	typeref:struct:NvmeZone
NvmeZoneAttr	femu/zns/zns.h	/^enum NvmeZoneAttr {$/;"	g
NvmeZoneDescr	femu/zns/zns.h	/^typedef struct QEMU_PACKED NvmeZoneDescr {$/;"	s
NvmeZoneDescr	femu/zns/zns.h	/^} NvmeZoneDescr;$/;"	t	typeref:struct:NvmeZoneDescr
NvmeZoneProcessingMask	femu/zns/zns.c	/^enum NvmeZoneProcessingMask {$/;"	g	file:
NvmeZoneReceiveAction	femu/zns/zns.h	/^enum NvmeZoneReceiveAction {$/;"	g
NvmeZoneReportHeader	femu/zns/zns.h	/^typedef struct QEMU_PACKED NvmeZoneReportHeader {$/;"	s
NvmeZoneReportHeader	femu/zns/zns.h	/^} NvmeZoneReportHeader;$/;"	t	typeref:struct:NvmeZoneReportHeader
NvmeZoneReportType	femu/zns/zns.h	/^enum NvmeZoneReportType {$/;"	g
NvmeZoneSendAction	femu/zns/zns.h	/^enum NvmeZoneSendAction {$/;"	g
NvmeZoneState	femu/zns/zns.h	/^typedef enum NvmeZoneState {$/;"	g
NvmeZoneState	femu/zns/zns.h	/^} NvmeZoneState;$/;"	t	typeref:enum:NvmeZoneState
NvmeZoneType	femu/zns/zns.h	/^enum NvmeZoneType {$/;"	g
NvmeZonedResult	femu/zns/zns.h	/^typedef struct QEMU_PACKED NvmeZonedResult {$/;"	s
NvmeZonedResult	femu/zns/zns.h	/^} NvmeZonedResult;$/;"	t	typeref:struct:NvmeZonedResult
OBJECT_DECLARE_SIMPLE_TYPE	fdc.c	/^OBJECT_DECLARE_SIMPLE_TYPE(FDCtrlISABus, ISA_FDC)$/;"	f
OBJECT_DECLARE_SIMPLE_TYPE	fdc.c	/^OBJECT_DECLARE_SIMPLE_TYPE(FDCtrlSysBus, SYSBUS_FDC)$/;"	f
OBJECT_DECLARE_SIMPLE_TYPE	fdc.c	/^OBJECT_DECLARE_SIMPLE_TYPE(FloppyDrive, FLOPPY_DRIVE)$/;"	f
OBJECT_DECLARE_SIMPLE_TYPE	onenand.c	/^OBJECT_DECLARE_SIMPLE_TYPE(OneNANDState, ONE_NAND)$/;"	f
OC12_ADM_CMD_GET_BB_TBL	femu/ocssd/oc12.h	/^    OC12_ADM_CMD_GET_BB_TBL  = 0xf2,$/;"	e	enum:Oc12AdminCommands
OC12_ADM_CMD_GET_L2P_TBL	femu/ocssd/oc12.h	/^    OC12_ADM_CMD_GET_L2P_TBL = 0xea,$/;"	e	enum:Oc12AdminCommands
OC12_ADM_CMD_IDENTITY	femu/ocssd/oc12.h	/^    OC12_ADM_CMD_IDENTITY    = 0xe2,$/;"	e	enum:Oc12AdminCommands
OC12_ADM_CMD_SET_BB_TBL	femu/ocssd/oc12.h	/^    OC12_ADM_CMD_SET_BB_TBL  = 0xf1,$/;"	e	enum:Oc12AdminCommands
OC12_CMD_ERASE	femu/ocssd/oc12.h	/^    OC12_CMD_ERASE = 0x90,$/;"	e	enum:Oc12DmCommands
OC12_CMD_READ	femu/ocssd/oc12.h	/^    OC12_CMD_READ  = 0x92,$/;"	e	enum:Oc12DmCommands
OC12_CMD_WRITE	femu/ocssd/oc12.h	/^    OC12_CMD_WRITE = 0x91,$/;"	e	enum:Oc12DmCommands
OC12_FEAT_EXT_END	femu/ocssd/oc12.h	252;"	d
OC12_FEAT_EXT_START	femu/ocssd/oc12.h	251;"	d
OC12_LBA_UNMAPPED	femu/ocssd/oc12.h	254;"	d
OC12_MAX_GRPS_PR_IDENT	femu/ocssd/oc12.h	250;"	d
OC12_PBA_UNMAPPED	femu/ocssd/oc12.h	253;"	d
OC12_SEC_ERASED	femu/ocssd/oc12.h	/^    OC12_SEC_ERASED  = 0xDC,$/;"	e	enum:Oc12MetaState
OC12_SEC_UNKNOWN	femu/ocssd/oc12.h	/^    OC12_SEC_UNKNOWN = 0x0,$/;"	e	enum:Oc12MetaState
OC12_SEC_WRITTEN	femu/ocssd/oc12.h	/^    OC12_SEC_WRITTEN = 0xAC,$/;"	e	enum:Oc12MetaState
OC20AdminCommands	femu/nvme.h	/^enum OC20AdminCommands {$/;"	g
OC20_ADM_CMD_IDENTIFY	femu/nvme.h	/^    OC20_ADM_CMD_IDENTIFY       = 0xe2,$/;"	e	enum:OC20AdminCommands
OC20_ADM_CMD_SET_LOG_PAGE	femu/nvme.h	/^    OC20_ADM_CMD_SET_LOG_PAGE   = 0xc1,$/;"	e	enum:OC20AdminCommands
OC20_CHUNK_CLOSED	femu/ocssd/oc20.h	/^    OC20_CHUNK_CLOSED  = 1 << 1,$/;"	e	enum:Oc20ChunkStates
OC20_CHUNK_EARLY_CLOSE	femu/ocssd/oc20.h	/^    OC20_CHUNK_EARLY_CLOSE       = 0x02f1,$/;"	e	enum:Oc20StatusCodes
OC20_CHUNK_FREE	femu/ocssd/oc20.h	/^    OC20_CHUNK_FREE    = 1 << 0,$/;"	e	enum:Oc20ChunkStates
OC20_CHUNK_FROM_CHUNK_INDEX	femu/ocssd/oc20.h	41;"	d
OC20_CHUNK_INFO	femu/ocssd/oc20.h	/^    OC20_CHUNK_INFO = 0xCA,$/;"	e	enum:Oc20LogPage
OC20_CHUNK_OFFLINE	femu/ocssd/oc20.h	/^    OC20_CHUNK_OFFLINE = 1 << 3,$/;"	e	enum:Oc20ChunkStates
OC20_CHUNK_OPEN	femu/ocssd/oc20.h	/^    OC20_CHUNK_OPEN    = 1 << 2,$/;"	e	enum:Oc20ChunkStates
OC20_CHUNK_RESETABLE	femu/ocssd/oc20.h	55;"	d
OC20_CHUNK_TYPE_RAN	femu/ocssd/oc20.h	/^    OC20_CHUNK_TYPE_RAN = 1 << 1,$/;"	e	enum:Oc20ChunkTypes
OC20_CHUNK_TYPE_SEQ	femu/ocssd/oc20.h	/^    OC20_CHUNK_TYPE_SEQ = 1 << 0,$/;"	e	enum:Oc20ChunkTypes
OC20_CHUNK_TYPE_SRK	femu/ocssd/oc20.h	/^    OC20_CHUNK_TYPE_SRK = 1 << 4,$/;"	e	enum:Oc20ChunkTypes
OC20_CMD_MAX_LBAS	femu/ocssd/oc20.h	9;"	d
OC20_CMD_VECT_ERASE	femu/ocssd/oc20.h	/^    OC20_CMD_VECT_ERASE = 0x90,$/;"	e	enum:Oc20IoCommands
OC20_CMD_VECT_READ	femu/ocssd/oc20.h	/^    OC20_CMD_VECT_READ  = 0x92,$/;"	e	enum:Oc20IoCommands
OC20_CMD_VECT_WRITE	femu/ocssd/oc20.h	/^    OC20_CMD_VECT_WRITE = 0x91,$/;"	e	enum:Oc20IoCommands
OC20_DID	femu/ocssd/oc20.h	7;"	d
OC20_GROUP_FROM_CHUNK_INDEX	femu/ocssd/oc20.h	35;"	d
OC20_INVALID_RESET	femu/ocssd/oc20.h	/^    OC20_INVALID_RESET           = 0x02c1,$/;"	e	enum:Oc20StatusCodes
OC20_LBA	femu/ocssd/oc20.h	29;"	d
OC20_LBAL_SGL_LENGTH_INVALID	femu/ocssd/oc20.h	/^    OC20_LBAL_SGL_LENGTH_INVALID = 0x01c1,$/;"	e	enum:Oc20StatusCodes
OC20_LBA_FORMAT_TEMPLATE	femu/ocssd/oc20.h	52;"	d
OC20_LBA_FROM_CHUNK_INDEX	femu/ocssd/oc20.h	44;"	d
OC20_LBA_GET_CHUNK	femu/ocssd/oc20.h	18;"	d
OC20_LBA_GET_GROUP	femu/ocssd/oc20.h	26;"	d
OC20_LBA_GET_PUNIT	femu/ocssd/oc20.h	22;"	d
OC20_LBA_GET_SECTR	femu/ocssd/oc20.h	14;"	d
OC20_MAGIC	femu/ocssd/oc20.h	8;"	d
OC20_NS_LOGPAGE_CHUNK_INFO_BLK_OFFSET	femu/ocssd/oc20.h	11;"	d
OC20_OFFLINE_CHUNK	femu/ocssd/oc20.h	/^    OC20_OFFLINE_CHUNK           = 0x02c0,$/;"	e	enum:Oc20StatusCodes
OC20_OUT_OF_ORDER_WRITE	femu/ocssd/oc20.h	/^    OC20_OUT_OF_ORDER_WRITE      = 0x02f2,$/;"	e	enum:Oc20StatusCodes
OC20_PARAMS_MCCAP_EARLY_RESET	femu/ocssd/oc20.h	/^    OC20_PARAMS_MCCAP_EARLY_RESET = 0x1 << 2,$/;"	e	enum:Oc20ParamsMccap
OC20_PARAMS_MCCAP_MULTIPLE_RESETS	femu/ocssd/oc20.h	/^    OC20_PARAMS_MCCAP_MULTIPLE_RESETS = 0x1 << 1,$/;"	e	enum:Oc20ParamsMccap
OC20_PUNIT_FROM_CHUNK_INDEX	femu/ocssd/oc20.h	38;"	d
OC20_SEC_ERASED	femu/ocssd/oc20.h	/^    OC20_SEC_ERASED  = 0xDC,$/;"	e	enum:Oc20MetaStates
OC20_SEC_UNKNOWN	femu/ocssd/oc20.h	/^    OC20_SEC_UNKNOWN = 0x0,$/;"	e	enum:Oc20MetaStates
OC20_SEC_WRITTEN	femu/ocssd/oc20.h	/^    OC20_SEC_WRITTEN = 0xAC,$/;"	e	enum:Oc20MetaStates
OC20_VID	femu/ocssd/oc20.h	6;"	d
OC20_WRITE_NEXT_UNIT	femu/ocssd/oc20.h	/^    OC20_WRITE_NEXT_UNIT         = 0x02f0,$/;"	e	enum:Oc20StatusCodes
OCSSD	femu/nvme.h	/^static inline bool OCSSD(FemuCtrl *n)$/;"	f
OCSSD12	femu/nvme.h	/^    OCSSD12 = 0x1,$/;"	e	enum:__anon41
OCSSD20	femu/nvme.h	/^    OCSSD20 = 0x2,$/;"	e	enum:__anon41
ONEN_BUF_BLOCK	onenand.c	/^    ONEN_BUF_BLOCK = 0,$/;"	e	enum:__anon47	file:
ONEN_BUF_BLOCK2	onenand.c	/^    ONEN_BUF_BLOCK2 = 1,$/;"	e	enum:__anon47	file:
ONEN_BUF_DEST_BLOCK	onenand.c	/^    ONEN_BUF_DEST_BLOCK = 2,$/;"	e	enum:__anon47	file:
ONEN_BUF_DEST_PAGE	onenand.c	/^    ONEN_BUF_DEST_PAGE = 3,$/;"	e	enum:__anon47	file:
ONEN_BUF_PAGE	onenand.c	/^    ONEN_BUF_PAGE = 7,$/;"	e	enum:__anon47	file:
ONEN_ERR_CMD	onenand.c	/^    ONEN_ERR_CMD = 1 << 10,$/;"	e	enum:__anon48	file:
ONEN_ERR_ERASE	onenand.c	/^    ONEN_ERR_ERASE = 1 << 11,$/;"	e	enum:__anon48	file:
ONEN_ERR_LOAD	onenand.c	/^    ONEN_ERR_LOAD = 1 << 13,$/;"	e	enum:__anon48	file:
ONEN_ERR_PROG	onenand.c	/^    ONEN_ERR_PROG = 1 << 12,$/;"	e	enum:__anon48	file:
ONEN_INT	onenand.c	/^    ONEN_INT = 1 << 15,$/;"	e	enum:__anon49	file:
ONEN_INT_ERASE	onenand.c	/^    ONEN_INT_ERASE = 1 << 5,$/;"	e	enum:__anon49	file:
ONEN_INT_LOAD	onenand.c	/^    ONEN_INT_LOAD = 1 << 7,$/;"	e	enum:__anon49	file:
ONEN_INT_PROG	onenand.c	/^    ONEN_INT_PROG = 1 << 6,$/;"	e	enum:__anon49	file:
ONEN_INT_RESET	onenand.c	/^    ONEN_INT_RESET = 1 << 4,$/;"	e	enum:__anon49	file:
ONEN_LOCK_LOCKED	onenand.c	/^    ONEN_LOCK_LOCKED = 1 << 1,$/;"	e	enum:__anon50	file:
ONEN_LOCK_LOCKTIGHTEN	onenand.c	/^    ONEN_LOCK_LOCKTIGHTEN = 1 << 0,$/;"	e	enum:__anon50	file:
ONEN_LOCK_UNLOCKED	onenand.c	/^    ONEN_LOCK_UNLOCKED = 1 << 2,$/;"	e	enum:__anon50	file:
OOB_SHIFT	nand.c	119;"	d	file:
OOB_SIZE	nand.c	120;"	d	file:
Oc12AddrF	femu/ocssd/oc12.h	/^typedef struct Oc12AddrF {$/;"	s
Oc12AddrF	femu/ocssd/oc12.h	/^} Oc12AddrF;$/;"	t	typeref:struct:Oc12AddrF
Oc12AdminCommands	femu/ocssd/oc12.h	/^enum Oc12AdminCommands {$/;"	g
Oc12Bbt	femu/nvme.h	/^typedef struct Oc12Bbt Oc12Bbt;$/;"	t	typeref:struct:Oc12Bbt
Oc12Bbt	femu/ocssd/oc12.h	/^typedef struct Oc12Bbt {$/;"	s
Oc12Bbt	femu/ocssd/oc12.h	/^} QEMU_PACKED Oc12Bbt;$/;"	t	typeref:struct:Oc12Bbt
Oc12BbtGet	femu/ocssd/oc12.h	/^typedef struct Oc12BbtGet {$/;"	s
Oc12BbtGet	femu/ocssd/oc12.h	/^} Oc12BbtGet;$/;"	t	typeref:struct:Oc12BbtGet
Oc12BbtSet	femu/ocssd/oc12.h	/^typedef struct Oc12BbtSet {$/;"	s
Oc12BbtSet	femu/ocssd/oc12.h	/^} Oc12BbtSet;$/;"	t	typeref:struct:Oc12BbtSet
Oc12Ctrl	femu/nvme.h	/^typedef struct Oc12Ctrl Oc12Ctrl;$/;"	t	typeref:struct:Oc12Ctrl
Oc12Ctrl	femu/ocssd/oc12.h	/^typedef struct Oc12Ctrl {$/;"	s
Oc12Ctrl	femu/ocssd/oc12.h	/^} Oc12Ctrl;$/;"	t	typeref:struct:Oc12Ctrl
Oc12DmCmd	femu/ocssd/oc12.h	/^typedef struct Oc12DmCmd {$/;"	s
Oc12DmCmd	femu/ocssd/oc12.h	/^} Oc12DmCmd;$/;"	t	typeref:struct:Oc12DmCmd
Oc12DmCommands	femu/ocssd/oc12.h	/^enum Oc12DmCommands {$/;"	g
Oc12GetL2PTbl	femu/ocssd/oc12.h	/^typedef struct Oc12GetL2PTbl {$/;"	s
Oc12GetL2PTbl	femu/ocssd/oc12.h	/^} Oc12GetL2PTbl;$/;"	t	typeref:struct:Oc12GetL2PTbl
Oc12IdAddrFormat	femu/ocssd/oc12.h	/^typedef struct Oc12IdAddrFormat {$/;"	s
Oc12IdAddrFormat	femu/ocssd/oc12.h	/^} QEMU_PACKED Oc12IdAddrFormat;$/;"	t	typeref:struct:Oc12IdAddrFormat
Oc12IdCtrl	femu/ocssd/oc12.h	/^typedef struct Oc12IdCtrl {$/;"	s
Oc12IdCtrl	femu/ocssd/oc12.h	/^} QEMU_PACKED Oc12IdCtrl;$/;"	t	typeref:struct:Oc12IdCtrl
Oc12IdGroup	femu/ocssd/oc12.h	/^typedef struct Oc12IdGroup {$/;"	s
Oc12IdGroup	femu/ocssd/oc12.h	/^} QEMU_PACKED Oc12IdGroup;$/;"	t	typeref:struct:Oc12IdGroup
Oc12MetaState	femu/ocssd/oc12.h	/^enum Oc12MetaState {$/;"	g
Oc12PMODE_DUAL	femu/ocssd/oc12.h	/^    Oc12PMODE_DUAL = 0x1,      \/\/\/< Dual-plane (NVM_IO_DUAL_ACCESS)$/;"	e	enum:Oc12Pmode
Oc12PMODE_QUAD	femu/ocssd/oc12.h	/^    Oc12PMODE_QUAD = 0x2       \/\/\/< Quad-plane (NVM_IO_QUAD_ACCESS)$/;"	e	enum:Oc12Pmode
Oc12PMODE_SNGL	femu/ocssd/oc12.h	/^    Oc12PMODE_SNGL = 0x0,      \/\/\/< Single-plane$/;"	e	enum:Oc12Pmode
Oc12Params	femu/ocssd/oc12.h	/^typedef struct Oc12Params {$/;"	s
Oc12Params	femu/ocssd/oc12.h	/^} QEMU_PACKED Oc12Params;$/;"	t	typeref:struct:Oc12Params
Oc12Pmode	femu/ocssd/oc12.h	/^enum Oc12Pmode {$/;"	g
Oc12RSP_ECC	femu/ocssd/oc12.h	/^    Oc12RSP_ECC = 1 << 1,$/;"	e	enum:Oc12Responsibility
Oc12RSP_L2P	femu/ocssd/oc12.h	/^    Oc12RSP_L2P = 1 << 0,$/;"	e	enum:Oc12Responsibility
Oc12Responsibility	femu/ocssd/oc12.h	/^enum Oc12Responsibility {$/;"	g
Oc12RwCmd	femu/ocssd/oc12.h	/^typedef struct Oc12RwCmd {$/;"	s
Oc12RwCmd	femu/ocssd/oc12.h	/^} Oc12RwCmd;$/;"	t	typeref:struct:Oc12RwCmd
Oc20AddrBucket	femu/ocssd/oc20.h	/^typedef struct Oc20AddrBucket {$/;"	s
Oc20AddrBucket	femu/ocssd/oc20.h	/^} Oc20AddrBucket;$/;"	t	typeref:struct:Oc20AddrBucket
Oc20AddrF	femu/ocssd/oc20.h	/^typedef struct Oc20AddrF {$/;"	s
Oc20AddrF	femu/ocssd/oc20.h	/^} Oc20AddrF;$/;"	t	typeref:struct:Oc20AddrF
Oc20CS	femu/ocssd/oc20.h	/^} Oc20CS;$/;"	t	typeref:struct:Oc20ChunkState
Oc20ChunkState	femu/ocssd/oc20.h	/^typedef struct Oc20ChunkState {$/;"	s
Oc20ChunkStates	femu/ocssd/oc20.h	/^enum Oc20ChunkStates {$/;"	g
Oc20ChunkTypes	femu/ocssd/oc20.h	/^enum Oc20ChunkTypes {$/;"	g
Oc20Ctrl	femu/ocssd/oc20.h	/^typedef struct Oc20Ctrl {$/;"	s
Oc20Ctrl	femu/ocssd/oc20.h	/^} Oc20Ctrl;$/;"	t	typeref:struct:Oc20Ctrl
Oc20DmCmd	femu/ocssd/oc20.h	/^typedef struct Oc20DmCmd {$/;"	s
Oc20DmCmd	femu/ocssd/oc20.h	/^} Oc20DmCmd;$/;"	t	typeref:struct:Oc20DmCmd
Oc20Header	femu/ocssd/oc20.h	/^typedef struct Oc20Header {$/;"	s
Oc20Header	femu/ocssd/oc20.h	/^} Oc20Header;$/;"	t	typeref:struct:Oc20Header
Oc20IdGeo	femu/ocssd/oc20.h	/^typedef struct Oc20IdGeo {$/;"	s
Oc20IdGeo	femu/ocssd/oc20.h	/^} Oc20IdGeo;$/;"	t	typeref:struct:Oc20IdGeo
Oc20IdLBAF	femu/ocssd/oc20.h	/^typedef struct Oc20IdLBAF {$/;"	s
Oc20IdLBAF	femu/ocssd/oc20.h	/^} Oc20IdLBAF;$/;"	t	typeref:struct:Oc20IdLBAF
Oc20IdPerf	femu/ocssd/oc20.h	/^typedef struct Oc20IdPerf {$/;"	s
Oc20IdPerf	femu/ocssd/oc20.h	/^} Oc20IdPerf;$/;"	t	typeref:struct:Oc20IdPerf
Oc20IdWrt	femu/ocssd/oc20.h	/^typedef struct Oc20IdWrt {$/;"	s
Oc20IdWrt	femu/ocssd/oc20.h	/^} Oc20IdWrt;$/;"	t	typeref:struct:Oc20IdWrt
Oc20IoCommands	femu/ocssd/oc20.h	/^enum Oc20IoCommands {$/;"	g
Oc20LogPage	femu/ocssd/oc20.h	/^enum Oc20LogPage {$/;"	g
Oc20MetaStates	femu/ocssd/oc20.h	/^enum Oc20MetaStates {$/;"	g
Oc20Namespace	femu/ocssd/oc20.h	/^typedef struct Oc20Namespace {$/;"	s
Oc20Namespace	femu/ocssd/oc20.h	/^} Oc20Namespace;$/;"	t	typeref:struct:Oc20Namespace
Oc20NamespaceGeometry	femu/ocssd/oc20.h	/^typedef struct Oc20NamespaceGeometry {$/;"	s
Oc20NamespaceGeometry	femu/ocssd/oc20.h	/^} Oc20NamespaceGeometry;$/;"	t	typeref:struct:Oc20NamespaceGeometry
Oc20Params	femu/nvme.h	/^typedef struct Oc20Params {$/;"	s
Oc20Params	femu/nvme.h	/^} Oc20Params;$/;"	t	typeref:struct:Oc20Params
Oc20ParamsMccap	femu/ocssd/oc20.h	/^enum Oc20ParamsMccap {$/;"	g
Oc20RwCmd	femu/ocssd/oc20.h	/^typedef struct Oc20RwCmd {$/;"	s
Oc20RwCmd	femu/ocssd/oc20.h	/^} Oc20RwCmd;$/;"	t	typeref:struct:Oc20RwCmd
Oc20StatusCodes	femu/ocssd/oc20.h	/^enum Oc20StatusCodes {$/;"	g
OcCtrlParams	femu/nvme.h	/^typedef struct OcCtrlParams {$/;"	s
OcCtrlParams	femu/nvme.h	/^} OcCtrlParams;$/;"	t	typeref:struct:OcCtrlParams
PAGE	nand.c	116;"	d	file:
PAGE_MASK	nand.c	118;"	d	file:
PAGE_SECTORS	nand.c	126;"	d	file:
PAGE_SECTORS	nand.c	131;"	d	file:
PAGE_SECTORS	nand.c	136;"	d	file:
PAGE_SHIFT	nand.c	125;"	d	file:
PAGE_SHIFT	nand.c	130;"	d	file:
PAGE_SHIFT	nand.c	135;"	d	file:
PAGE_SHIFT	onenand.c	37;"	d	file:
PAGE_SIZE	nand.c	124;"	d	file:
PAGE_SIZE	nand.c	129;"	d	file:
PAGE_SIZE	nand.c	134;"	d	file:
PAGE_START	nand.c	117;"	d	file:
PFLASH_BE	pflash_cfi01.c	68;"	d	file:
PFLASH_DEBUG	pflash_cfi02.c	50;"	d	file:
PFLASH_LAZY_ROMD_THRESHOLD	pflash_cfi02.c	58;"	d	file:
PFLASH_MAX_ERASE_REGIONS	pflash_cfi02.c	65;"	d	file:
PFLASH_SECURE	pflash_cfi01.c	69;"	d	file:
PFlashCFI01	pflash_cfi01.c	/^struct PFlashCFI01 {$/;"	s	file:
PFlashCFI02	pflash_cfi02.c	/^struct PFlashCFI02 {$/;"	s	file:
PG_BITS	femu/bbssd/backup/ftl.h	49;"	d
PG_BITS	femu/bbssd/ftl.h	49;"	d
PG_FREE	femu/bbssd/backup/ftl.h	/^    PG_FREE = 0,$/;"	e	enum:__anon28
PG_FREE	femu/bbssd/ftl.h	/^    PG_FREE = 0,$/;"	e	enum:__anon22
PG_INVALID	femu/bbssd/backup/ftl.h	/^    PG_INVALID = 1,$/;"	e	enum:__anon28
PG_INVALID	femu/bbssd/ftl.h	/^    PG_INVALID = 1,$/;"	e	enum:__anon22
PG_VALID	femu/bbssd/backup/ftl.h	/^    PG_VALID = 2$/;"	e	enum:__anon28
PG_VALID	femu/bbssd/ftl.h	/^    PG_VALID = 2$/;"	e	enum:__anon22
PLC	femu/nand/nand.h	/^    PLC            = 5,$/;"	e	enum:FlashType
PL_BITS	femu/bbssd/backup/ftl.h	51;"	d
PL_BITS	femu/bbssd/ftl.h	51;"	d
POWEROF2	femu/lib/rte_ring.c	84;"	d	file:
PP	m25p80.c	/^    PP = 0x02,$/;"	e	enum:__anon42	file:
PP4	m25p80.c	/^    PP4 = 0x12,$/;"	e	enum:__anon42	file:
PP4_4	m25p80.c	/^    PP4_4 = 0x3e,$/;"	e	enum:__anon42	file:
PPA_BLK	femu/nand/nand.h	116;"	d
PPA_CH	femu/nand/nand.h	113;"	d
PPA_LUN	femu/nand/nand.h	114;"	d
PPA_PG	femu/nand/nand.h	117;"	d
PPA_PLN	femu/nand/nand.h	115;"	d
PPA_SEC	femu/nand/nand.h	118;"	d
PQUEUE_H	femu/inc/pqueue.h	36;"	d
QEMU_PACKED	hd-geometry.c	/^} QEMU_PACKED;$/;"	v	typeref:struct:partition
QIOR	m25p80.c	/^    QIOR = 0xeb,$/;"	e	enum:__anon42	file:
QIOR4	m25p80.c	/^    QIOR4 = 0xec,$/;"	e	enum:__anon42	file:
QLC	femu/nand/nand.h	/^    QLC            = 4,$/;"	e	enum:FlashType
QLC_BLOCK_ERASE_LATENCY_NS	femu/nand/nand.h	65;"	d
QLC_CENTER_LOWER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	55;"	d
QLC_CENTER_LOWER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	60;"	d
QLC_CENTER_UPPER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	56;"	d
QLC_CENTER_UPPER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	61;"	d
QLC_CHNL_PAGE_TRANSFER_LATENCY_NS	femu/nand/nand.h	64;"	d
QLC_LOWER_CENTER_PAGE	femu/nand/nand.h	/^    QLC_LOWER_CENTER_PAGE = 1,$/;"	e	enum:__anon32
QLC_LOWER_PAGE	femu/nand/nand.h	/^    QLC_LOWER_PAGE        = 0,$/;"	e	enum:__anon32
QLC_LOWER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	54;"	d
QLC_LOWER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	59;"	d
QLC_UPPER_CENTER_PAGE	femu/nand/nand.h	/^    QLC_UPPER_CENTER_PAGE = 2,$/;"	e	enum:__anon32
QLC_UPPER_PAGE	femu/nand/nand.h	/^    QLC_UPPER_PAGE        = 3,$/;"	e	enum:__anon32
QLC_UPPER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	57;"	d
QLC_UPPER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	62;"	d
QOR	m25p80.c	/^    QOR = 0x6b,$/;"	e	enum:__anon42	file:
QOR4	m25p80.c	/^    QOR4 = 0x6c,$/;"	e	enum:__anon42	file:
QPP	m25p80.c	/^    QPP = 0x32,$/;"	e	enum:__anon42	file:
QPP_4	m25p80.c	/^    QPP_4 = 0x34,$/;"	e	enum:__anon42	file:
RAN_BLOCK	femu/bbssd/common.h	137;"	d
RAN_COLD_BLOCK	femu/bbssd/common.h	139;"	d
RAN_COLD_MERGE_READ	femu/bbssd/common.h	197;"	d
RAN_COLD_MERGE_WRITE	femu/bbssd/common.h	199;"	d
RAN_COLD_WRITE	femu/bbssd/common.h	191;"	d
RAN_HOT_BLOCK	femu/bbssd/common.h	141;"	d
RAN_HOT_MERGE_READ	femu/bbssd/common.h	198;"	d
RAN_HOT_MERGE_WRITE	femu/bbssd/common.h	200;"	d
RAN_HOT_WRITE	femu/bbssd/common.h	192;"	d
RAN_MERGE	femu/bbssd/common.h	159;"	d
RAN_MERGE_READ	femu/bbssd/common.h	194;"	d
RAN_MERGE_WRITE	femu/bbssd/common.h	196;"	d
RAN_WRITE	femu/bbssd/common.h	190;"	d
RDCR	m25p80.c	/^    RDCR = 0x15,$/;"	e	enum:__anon42	file:
RDCR_EQIO	m25p80.c	/^    RDCR_EQIO = 0x35,$/;"	e	enum:__anon42	file:
RDID_90	m25p80.c	/^    RDID_90 = 0x90,$/;"	e	enum:__anon42	file:
RDID_AB	m25p80.c	/^    RDID_AB = 0xab,$/;"	e	enum:__anon42	file:
RDSR	m25p80.c	/^    RDSR = 0x5,$/;"	e	enum:__anon42	file:
RDY	tc58128.c	16;"	d	file:
RDY1	tc58128.c	14;"	d	file:
RDY2	tc58128.c	15;"	d	file:
RE	tc58128.c	10;"	d	file:
READ	femu/bbssd/common.h	184;"	d
READ	m25p80.c	/^    READ = 0x03,$/;"	e	enum:__anon42	file:
READ1	tc58128.c	/^typedef enum { WAIT, READ1, READ2, READ3 } state_t;$/;"	e	enum:__anon53	file:
READ2	tc58128.c	/^typedef enum { WAIT, READ1, READ2, READ3 } state_t;$/;"	e	enum:__anon53	file:
READ3	tc58128.c	/^typedef enum { WAIT, READ1, READ2, READ3 } state_t;$/;"	e	enum:__anon53	file:
READ4	m25p80.c	/^    READ4 = 0x13,$/;"	e	enum:__anon42	file:
READ_FSR	m25p80.c	/^    READ_FSR = 0x70,$/;"	e	enum:__anon42	file:
REG_IS_EMPTY	femu/bbssd/common.h	178;"	d
REG_IS_ERASE	femu/bbssd/common.h	181;"	d
REG_IS_READ	femu/bbssd/common.h	180;"	d
REG_IS_WRITE	femu/bbssd/common.h	179;"	d
REG_OP	femu/bbssd/common.h	170;"	d
REG_SHIFT	swim.c	62;"	d	file:
RESET_ENABLE	m25p80.c	/^    RESET_ENABLE = 0x66,$/;"	e	enum:__anon42	file:
RESET_MEMORY	m25p80.c	/^    RESET_MEMORY = 0x99,$/;"	e	enum:__anon42	file:
REVCR	m25p80.c	/^    REVCR = 0x65,$/;"	e	enum:__anon42	file:
RING_F_EXACT_SZ	femu/inc/rte_ring.h	157;"	d
RING_F_SC_DEQ	femu/inc/rte_ring.h	148;"	d
RING_F_SP_ENQ	femu/inc/rte_ring.h	147;"	d
RNVCR	m25p80.c	/^    RNVCR = 0xB5,$/;"	e	enum:__anon42	file:
RSTQIO	m25p80.c	/^    RSTQIO = 0xf5,$/;"	e	enum:__anon42	file:
RTE_ATOMIC_H	femu/inc/rte_atomic_x86.h	2;"	d
RTE_NAMESIZE	femu/inc/rte_ring.h	116;"	d
RTE_RING_MZ_PREFIX	femu/inc/rte_ring.h	104;"	d
RTE_RING_QUEUE_FIXED	femu/inc/rte_ring.h	/^	RTE_RING_QUEUE_FIXED = 0, \/* Enq\/Deq a fixed number of items from a ring *\/$/;"	e	enum:rte_ring_queue_behavior
RTE_RING_QUEUE_VARIABLE	femu/inc/rte_ring.h	/^	RTE_RING_QUEUE_VARIABLE   \/* Enq\/Deq as many items as possible from ring *\/$/;"	e	enum:rte_ring_queue_behavior
RTE_RING_SZ_MASK	femu/inc/rte_ring.h	158;"	d
RVCR	m25p80.c	/^    RVCR = 0x85,$/;"	e	enum:__anon42	file:
SECTOR	nand.c	121;"	d	file:
SECTOR_OFFSET	nand.c	122;"	d	file:
SEC_BITS	femu/bbssd/backup/ftl.h	50;"	d
SEC_BITS	femu/bbssd/ftl.h	50;"	d
SEC_FREE	femu/bbssd/backup/ftl.h	/^    SEC_FREE = 0,$/;"	e	enum:__anon28
SEC_FREE	femu/bbssd/ftl.h	/^    SEC_FREE = 0,$/;"	e	enum:__anon22
SEC_INVALID	femu/bbssd/backup/ftl.h	/^    SEC_INVALID = 1,$/;"	e	enum:__anon28
SEC_INVALID	femu/bbssd/ftl.h	/^    SEC_INVALID = 1,$/;"	e	enum:__anon22
SEC_VALID	femu/bbssd/backup/ftl.h	/^    SEC_VALID = 2,$/;"	e	enum:__anon28
SEC_VALID	femu/bbssd/ftl.h	/^    SEC_VALID = 2,$/;"	e	enum:__anon22
SEQ_BLOCK	femu/bbssd/common.h	135;"	d
SEQ_MERGE	femu/bbssd/common.h	158;"	d
SEQ_MERGE_READ	femu/bbssd/common.h	193;"	d
SEQ_MERGE_WRITE	femu/bbssd/common.h	195;"	d
SEQ_WRITE	femu/bbssd/common.h	189;"	d
SETADDR	onenand.c	410;"	d	file:
SETBUF_M	onenand.c	416;"	d	file:
SETBUF_S	onenand.c	420;"	d	file:
SET_CUR_DRV	fdc.c	181;"	d	file:
SLC	femu/nand/nand.h	/^    SLC            = 1,$/;"	e	enum:FlashType
SLC_BLOCK_ERASE_LATENCY_NS	femu/nand/nand.h	11;"	d
SLC_CHNL_PAGE_TRANSFER_LATENCY_NS	femu/nand/nand.h	12;"	d
SLC_PAGE	femu/nand/nand.h	/^    SLC_PAGE              = 0,$/;"	e	enum:__anon32
SLC_PAGE_READ_LATENCY_NS	femu/nand/nand.h	9;"	d
SLC_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	10;"	d
SM__init_bitmap	femu/bbssd/hmb_types.h	/^	HmbTime SM__init_bitmap;$/;"	m	struct:HmbDebugTime
SM__init_entry	femu/bbssd/hmb_types.h	/^	HmbTime SM__init_entry;$/;"	m	struct:HmbDebugTime
SM__init_heads	femu/bbssd/hmb_types.h	/^	HmbTime SM__init_heads;$/;"	m	struct:HmbDebugTime
SM__init_insert_map_info	femu/bbssd/hmb_types.h	/^	HmbTime SM__init_insert_map_info;$/;"	m	struct:HmbDebugTime
SM__init_sorted	femu/bbssd/hmb_types.h	/^	HmbTime SM__init_sorted;$/;"	m	struct:HmbDebugTime
SPANSION_ADDR_LEN_LEN	m25p80.c	163;"	d	file:
SPANSION_ADDR_LEN_POS	m25p80.c	162;"	d	file:
SPANSION_CONTINUOUS_READ_MODE_CMD_LEN	m25p80.c	170;"	d	file:
SPANSION_DUMMY_CLK_LEN	m25p80.c	161;"	d	file:
SPANSION_DUMMY_CLK_POS	m25p80.c	160;"	d	file:
SPANSION_QUAD_CFG_LEN	m25p80.c	159;"	d	file:
SPANSION_QUAD_CFG_POS	m25p80.c	158;"	d	file:
SPI_NOR_MAX_ID_LEN	m25p80.c	51;"	d	file:
SQ_POLLING_PERIOD_NS	femu/nvme.h	1342;"	d
STATE_COLLECTING_DATA	m25p80.c	/^    STATE_COLLECTING_DATA,$/;"	e	enum:__anon43	file:
STATE_COLLECTING_VAR_LEN_DATA	m25p80.c	/^    STATE_COLLECTING_VAR_LEN_DATA,$/;"	e	enum:__anon43	file:
STATE_IDLE	m25p80.c	/^    STATE_IDLE,$/;"	e	enum:__anon43	file:
STATE_PAGE_PROGRAM	m25p80.c	/^    STATE_PAGE_PROGRAM,$/;"	e	enum:__anon43	file:
STATE_READ	m25p80.c	/^    STATE_READ,$/;"	e	enum:__anon43	file:
STATE_READING_DATA	m25p80.c	/^    STATE_READING_DATA,$/;"	e	enum:__anon43	file:
SUCCESS	femu/bbssd/common.h	121;"	d
SWIM_ACTION	swim.c	123;"	d	file:
SWIM_CA_MASK	swim.c	79;"	d	file:
SWIM_CLFIFO	swim.c	120;"	d	file:
SWIM_CRC_ZERO	swim.c	99;"	d	file:
SWIM_DAT1BYTE	swim.c	105;"	d	file:
SWIM_DAT2BYTE	swim.c	104;"	d	file:
SWIM_DISK_IN	swim.c	87;"	d	file:
SWIM_DRIVE_PRESENT	swim.c	86;"	d	file:
SWIM_EJECT	swim.c	74;"	d	file:
SWIM_ENBL1	swim.c	121;"	d	file:
SWIM_ENBL2	swim.c	122;"	d	file:
SWIM_ERROR	swim.c	103;"	d	file:
SWIM_HEDSEL	swim.c	125;"	d	file:
SWIM_INDEX	swim.c	73;"	d	file:
SWIM_LSTRB	swim.c	78;"	d	file:
SWIM_MARK_BYTE	swim.c	98;"	d	file:
SWIM_MFM_MODE	swim.c	92;"	d	file:
SWIM_MODE_IWM	swim.c	64;"	d	file:
SWIM_MODE_SWIM	swim.c	65;"	d	file:
SWIM_MOTEN	swim.c	102;"	d	file:
SWIM_MOTON	swim.c	126;"	d	file:
SWIM_MOTOR_OFF	swim.c	72;"	d	file:
SWIM_MOTOR_ON	swim.c	71;"	d	file:
SWIM_ONEMEG_MEDIA	swim.c	94;"	d	file:
SWIM_RDDATA	swim.c	100;"	d	file:
SWIM_READ_DATA	swim.c	53;"	d	file:
SWIM_READ_DATA_0	swim.c	83;"	d	file:
SWIM_READ_DATA_1	swim.c	91;"	d	file:
SWIM_READ_ERROR	swim.c	55;"	d	file:
SWIM_READ_HANDSHAKE	swim.c	60;"	d	file:
SWIM_READ_MARK	swim.c	54;"	d	file:
SWIM_READ_PARAMETER	swim.c	56;"	d	file:
SWIM_READ_PHASE	swim.c	57;"	d	file:
SWIM_READ_SETUP	swim.c	58;"	d	file:
SWIM_READ_STATUS	swim.c	59;"	d	file:
SWIM_RELAX	swim.c	77;"	d	file:
SWIM_SEEK_COMPLETE	swim.c	93;"	d	file:
SWIM_SEEK_NEGATIVE	swim.c	69;"	d	file:
SWIM_SENSE	swim.c	101;"	d	file:
SWIM_SETGCR	swim.c	76;"	d	file:
SWIM_SETMFM	swim.c	75;"	d	file:
SWIM_SINGLE_SIDED	swim.c	85;"	d	file:
SWIM_STEP	swim.c	70;"	d	file:
SWIM_S_3_5_SELECT	swim.c	110;"	d	file:
SWIM_S_ERROR_CORR	swim.c	113;"	d	file:
SWIM_S_FCLK_DIV2	swim.c	112;"	d	file:
SWIM_S_GCR	swim.c	111;"	d	file:
SWIM_S_GCR_WRITE	swim.c	115;"	d	file:
SWIM_S_IBM_DRIVE	swim.c	114;"	d	file:
SWIM_S_INV_WDATA	swim.c	109;"	d	file:
SWIM_S_TIMEOUT	swim.c	116;"	d	file:
SWIM_TACHO	swim.c	90;"	d	file:
SWIM_TRACK_ZERO	swim.c	89;"	d	file:
SWIM_TWOMEG_DRIVE	swim.c	84;"	d	file:
SWIM_WRITE_CRC	swim.c	46;"	d	file:
SWIM_WRITE_DATA	swim.c	44;"	d	file:
SWIM_WRITE_MARK	swim.c	45;"	d	file:
SWIM_WRITE_MODE	swim.c	124;"	d	file:
SWIM_WRITE_MODE0	swim.c	50;"	d	file:
SWIM_WRITE_MODE1	swim.c	51;"	d	file:
SWIM_WRITE_PARAMETER	swim.c	47;"	d	file:
SWIM_WRITE_PHASE	swim.c	48;"	d	file:
SWIM_WRITE_PROT	swim.c	88;"	d	file:
SWIM_WRITE_SETUP	swim.c	49;"	d	file:
SectorInfo	pflash_cfi02.c	/^} SectorInfo;$/;"	t	typeref:struct:__anon52	file:
SsdDramBackend	femu/backend/dram.h	/^typedef struct SsdDramBackend {$/;"	s
SsdDramBackend	femu/backend/dram.h	/^} SsdDramBackend;$/;"	t	typeref:struct:SsdDramBackend
TLC	femu/nand/nand.h	/^    TLC            = 3,$/;"	e	enum:FlashType
TLC_BLOCK_ERASE_LATENCY_NS	femu/nand/nand.h	41;"	d
TLC_CENTER_PAGE	femu/nand/nand.h	/^    TLC_CENTER_PAGE       = 1,$/;"	e	enum:__anon32
TLC_CENTER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	33;"	d
TLC_CENTER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	37;"	d
TLC_CHNL_PAGE_TRANSFER_LATENCY_NS	femu/nand/nand.h	40;"	d
TLC_LOWER_PAGE	femu/nand/nand.h	/^    TLC_LOWER_PAGE        = 0,$/;"	e	enum:__anon32
TLC_LOWER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	32;"	d
TLC_LOWER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	36;"	d
TLC_UPPER_PAGE	femu/nand/nand.h	/^    TLC_UPPER_PAGE        = 2,$/;"	e	enum:__anon32
TLC_UPPER_PAGE_READ_LATENCY_NS	femu/nand/nand.h	34;"	d
TLC_UPPER_PAGE_WRITE_LATENCY_NS	femu/nand/nand.h	38;"	d
TYPE_FLOPPY_BUS	fdc.c	67;"	d	file:
TYPE_FLOPPY_DRIVE	fdc.c	497;"	d	file:
TYPE_M25P80	m25p80.c	465;"	d	file:
TYPE_NAND	nand.c	91;"	d	file:
TYPE_NVME	femu/nvme.h	1088;"	d
TYPE_NVME	nvme.h	104;"	d
TYPE_NVME_BUS	nvme.h	97;"	d
TYPE_NVME_NS	nvme-ns.h	18;"	d
TYPE_ONE_NAND	onenand.c	42;"	d	file:
TYPE_SYSBUS_FDC	fdc.c	888;"	d	file:
UNMAPPED_PPA	femu/bbssd/backup/ftl.h	8;"	d
UNMAPPED_PPA	femu/bbssd/ftl.h	8;"	d
UPDATE_END_TIME	femu/bbssd/common.h	205;"	d
UPDATE_GC_END_TIME	femu/bbssd/common.h	207;"	d
UPDATE_GC_START_TIME	femu/bbssd/common.h	206;"	d
UPDATE_START_TIME	femu/bbssd/common.h	204;"	d
USER_IO	femu/bbssd/backup/ftl.h	/^    USER_IO = 0,$/;"	e	enum:__anon27
USER_IO	femu/bbssd/ftl.h	/^    USER_IO = 0,$/;"	e	enum:__anon21
VALID	femu/bbssd/common.h	152;"	d
VCFG_DUMMY	m25p80.c	135;"	d	file:
VCFG_DUMMY_CLK_POS	m25p80.c	142;"	d	file:
VCFG_WRAP_SEQUENTIAL	m25p80.c	136;"	d	file:
VCFG_XIP_MODE_ENABLED	m25p80.c	139;"	d	file:
VICTIM_INCHIP	femu/bbssd/common.h	148;"	d
VICTIM_NOPARAL	femu/bbssd/common.h	149;"	d
VICTIM_OVERALL	femu/bbssd/common.h	147;"	d
VIRTIO_BLK_CFG_SIZE	virtio-blk.c	37;"	d	file:
VirtIOBlockDataPlane	dataplane/virtio-blk.c	/^struct VirtIOBlockDataPlane {$/;"	s	file:
VirtIOBlockDataPlane	dataplane/virtio-blk.h	/^typedef struct VirtIOBlockDataPlane VirtIOBlockDataPlane;$/;"	t	typeref:struct:VirtIOBlockDataPlane
VirtIOBlockIoctlReq	virtio-blk.c	/^} VirtIOBlockIoctlReq;$/;"	t	typeref:struct:__anon55	file:
WAIT	tc58128.c	/^typedef enum { WAIT, READ1, READ2, READ3 } state_t;$/;"	e	enum:__anon53	file:
WCYCLE_AUTOSELECT_CFI	pflash_cfi02.c	/^    WCYCLE_AUTOSELECT_CFI   = 8,$/;"	e	enum:__anon51	file:
WCYCLE_CFI	pflash_cfi02.c	/^    WCYCLE_CFI              = 7,$/;"	e	enum:__anon51	file:
WE	tc58128.c	11;"	d	file:
WEVCR	m25p80.c	/^    WEVCR = 0x61,$/;"	e	enum:__anon42	file:
WHOLE_BLOCKING	femu/bbssd/common.h	20;"	d
WINBOND_CONTINUOUS_READ_MODE_CMD_LEN	m25p80.c	171;"	d	file:
WNVCR	m25p80.c	/^    WNVCR = 0xB1,$/;"	e	enum:__anon42	file:
WRDI	m25p80.c	/^    WRDI = 0x4,$/;"	e	enum:__anon42	file:
WREN	m25p80.c	/^    WREN = 0x6,$/;"	e	enum:__anon42	file:
WRITE	femu/bbssd/common.h	185;"	d
WRSR	m25p80.c	/^    WRSR = 0x1,$/;"	e	enum:__anon42	file:
WVCR	m25p80.c	/^    WVCR = 0x81,$/;"	e	enum:__anon42	file:
XEN_BLKIF_H	xen_blkif.h	2;"	d
XEN_BLKIF_SECTOR_SIZE	xen_blkif.h	145;"	d
XenBlockDataPlane	dataplane/xen-block.c	/^struct XenBlockDataPlane {$/;"	s	file:
XenBlockDataPlane	dataplane/xen-block.h	/^typedef struct XenBlockDataPlane XenBlockDataPlane;$/;"	t	typeref:struct:XenBlockDataPlane
XenBlockRequest	dataplane/xen-block.c	/^typedef struct XenBlockRequest {$/;"	s	file:
XenBlockRequest	dataplane/xen-block.c	/^} XenBlockRequest;$/;"	t	typeref:struct:XenBlockRequest	file:
ZNSSD	femu/nvme.h	/^static inline bool ZNSSD(FemuCtrl *n)$/;"	f
_COMMON_H_	femu/bbssd/common.h	9;"	d
_RTE_BRANCH_PREDICTION_H_	femu/inc/rte_branch_prediction.h	11;"	d
_RTE_RING_GENERIC_H_	femu/inc/rte_ring_generic.h	11;"	d
_RTE_RING_H_	femu/inc/rte_ring.h	67;"	d
__FEMU_FTL_H	femu/bbssd/backup/ftl.h	2;"	d
__FEMU_FTL_H	femu/bbssd/ftl.h	2;"	d
__FEMU_MEM_BACKEND	femu/backend/dram.h	2;"	d
__FEMU_NAND_H	femu/nand/nand.h	2;"	d
__FEMU_NVME_H	femu/nvme.h	2;"	d
__FEMU_OC12_H	femu/ocssd/oc12.h	2;"	d
__FEMU_OC20_H	femu/ocssd/oc20.h	2;"	d
__FEMU_TIMING_MODEL	femu/timing-model/timing.h	2;"	d
__FEMU_ZNS_H	femu/zns/zns.h	2;"	d
__HMB_DEBUG_H__	femu/bbssd/hmb_debug.h	33;"	d
__IS_MC	femu/inc/rte_ring.h	164;"	d
__IS_MP	femu/inc/rte_ring.h	162;"	d
__IS_SC	femu/inc/rte_ring.h	163;"	d
__IS_SP	femu/inc/rte_ring.h	161;"	d
__SSD__HMB_CONFIG_H__	femu/bbssd/hmb_config.h	2;"	d
__SSD__HMB_H__	femu/bbssd/hmb.h	30;"	d
__SSD__HMB_INTERNAL_H__	femu/bbssd/hmb_internal.h	30;"	d
__SSD__HMB_SPACEMGMT_H__	femu/bbssd/hmb_spaceMgmt.h	30;"	d
__SSD__HMB_TYPES_H__	femu/bbssd/hmb_types.h	2;"	d
__SSD__HMB_UTILS_H__	femu/bbssd/hmb_utils.h	2;"	d
__rte_always_inline	femu/inc/rte_ring.h	101;"	d
__rte_ring_do_dequeue	femu/inc/rte_ring.h	/^__rte_ring_do_dequeue(struct rte_ring *r, void **obj_table,$/;"	f
__rte_ring_do_enqueue	femu/inc/rte_ring.h	/^__rte_ring_do_enqueue(struct rte_ring *r, void * const *obj_table,$/;"	f
__rte_ring_move_cons_head	femu/inc/rte_ring.h	/^__rte_ring_move_cons_head(struct rte_ring *r, int is_sc,$/;"	f
__rte_ring_move_cons_head	femu/inc/rte_ring_generic.h	/^__rte_ring_move_cons_head(struct rte_ring *r, unsigned int is_sc,$/;"	f
__rte_ring_move_prod_head	femu/inc/rte_ring.h	/^__rte_ring_move_prod_head(struct rte_ring *r, int is_sp,$/;"	f
__rte_ring_move_prod_head	femu/inc/rte_ring_generic.h	/^__rte_ring_move_prod_head(struct rte_ring *r, unsigned int is_sp,$/;"	f
_oc20_check_size	femu/ocssd/oc20.h	/^static inline void _oc20_check_size(void)$/;"	f
acct	dataplane/xen-block.c	/^    BlockAcctCookie acct;$/;"	m	struct:XenBlockRequest	file:
acct	nvme.h	/^    BlockAcctCookie         acct;$/;"	m	struct:NvmeRequest
acl	femu/nvme.h	/^    uint8_t     acl;$/;"	m	struct:FemuCtrl
acl	femu/nvme.h	/^    uint8_t     acl;$/;"	m	struct:NvmeIdCtrl
acl	femu/nvme.h	/^    uint8_t  acl;$/;"	m	struct:NvmeParams
acq	femu/nvme.h	/^    uint64_t    acq;$/;"	m	struct:NvmeBar
acs	femu/nvme.h	/^    uint32_t    acs[256];$/;"	m	struct:NvmeEffectsLog
acwu	femu/nvme.h	/^    uint16_t    acwu;$/;"	m	struct:NvmeIdCtrl
addr	femu/bbssd/hmb_types.h	/^	HmbMappedAddr      addr;$/;"	m	struct:HmbMapInfo
addr	femu/bbssd/hmb_types.h	/^	uint64_t    addr; \/* 8bytes (acc: 8) *\/$/;"	m	struct:HmbEntry
addr	femu/nvme.h	/^    uint64_t addr;$/;"	m	struct:NvmeSglDescriptor
addr	nand.c	/^    uint64_t addr;$/;"	m	struct:NANDFlashState	file:
addr_shift	nand.c	/^    int page_shift, oob_shift, erase_shift, addr_shift;$/;"	m	struct:NANDFlashState	file:
address	tc58128.c	/^    uint32_t address;$/;"	m	struct:__anon54	file:
address_cycle	tc58128.c	/^    uint8_t address_cycle;$/;"	m	struct:__anon54	file:
addrlen	nand.c	/^    int addrlen;$/;"	m	struct:NANDFlashState	file:
admin_cmd	femu/nvme.h	/^    uint16_t (*admin_cmd)(struct FemuCtrl *, NvmeCmd *);$/;"	m	struct:FemuExtCtrlOps
admin_cq	femu/nvme.h	/^    NvmeCQueue      admin_cq;$/;"	m	struct:FemuCtrl
admin_cq	nvme.h	/^    NvmeCQueue      admin_cq;$/;"	m	struct:NvmeCtrl
admin_sq	femu/nvme.h	/^    NvmeSQueue      admin_sq;$/;"	m	struct:FemuCtrl
admin_sq	nvme.h	/^    NvmeSQueue      admin_sq;$/;"	m	struct:NvmeCtrl
advance_channel_timestamp	femu/timing-model/timing.c	/^int64_t advance_channel_timestamp(FemuCtrl *n, int ch, uint64_t now, int opcode)$/;"	f
advance_chip_timestamp	femu/timing-model/timing.c	/^int64_t advance_chip_timestamp(FemuCtrl *n, int lunid, uint64_t now, int opcode,$/;"	f
aer_mask	femu/nvme.h	/^    uint8_t         aer_mask;$/;"	m	struct:FemuCtrl
aer_mask	nvme.h	/^    uint8_t     aer_mask;$/;"	m	struct:NvmeCtrl
aer_max_queued	nvme.h	/^    uint32_t aer_max_queued;$/;"	m	struct:NvmeParams
aer_queue	femu/nvme.h	/^    QSIMPLEQ_HEAD(aer_queue, NvmeAsyncEvent) aer_queue;$/;"	m	struct:FemuCtrl
aer_queue	nvme.h	/^    QTAILQ_HEAD(, NvmeAsyncEvent) aer_queue;$/;"	m	struct:NvmeCtrl
aer_queued	nvme.h	/^    int         aer_queued;$/;"	m	struct:NvmeCtrl
aer_reqs	femu/nvme.h	/^    NvmeRequest     **aer_reqs;$/;"	m	struct:FemuCtrl
aer_reqs	nvme.h	/^    NvmeRequest **aer_reqs;$/;"	m	struct:NvmeCtrl
aer_timer	femu/nvme.h	/^    QEMUTimer       *aer_timer;$/;"	m	struct:FemuCtrl
aerl	femu/nvme.h	/^    uint8_t     aerl;$/;"	m	struct:FemuCtrl
aerl	femu/nvme.h	/^    uint8_t     aerl;$/;"	m	struct:NvmeIdCtrl
aerl	femu/nvme.h	/^    uint8_t  aerl;$/;"	m	struct:NvmeParams
aerl	nvme.h	/^    uint8_t  aerl;$/;"	m	struct:NvmeParams
afi	femu/nvme.h	/^    uint8_t     afi;$/;"	m	struct:NvmeFwSlotInfoLog
aio_errors	dataplane/xen-block.c	/^    int aio_errors;$/;"	m	struct:XenBlockRequest	file:
aio_inflight	dataplane/xen-block.c	/^    int aio_inflight;$/;"	m	struct:XenBlockRequest	file:
aiocb	nvme.h	/^    BlockAIOCB              *aiocb;$/;"	m	struct:NvmeRequest
ale	nand.c	/^    uint8_t cle, ale, ce, wp, gnd;$/;"	m	struct:NANDFlashState	file:
app_tag	femu/nvme.h	/^    uint16_t app_tag;$/;"	m	struct:NvmeDifTuple
appmask	femu/nvme.h	/^    uint16_t    appmask;$/;"	m	struct:NvmeRwCmd
apptag	femu/nvme.h	/^    uint16_t    apptag;$/;"	m	struct:NvmeRwCmd
apsta	femu/nvme.h	/^    uint8_t     apsta;$/;"	m	struct:NvmeIdCtrl
aqa	femu/nvme.h	/^    uint32_t    aqa;$/;"	m	struct:NvmeBar
arb_burst	femu/nvme.h	/^    uint8_t     arb_burst;$/;"	m	struct:NvmeSQueue
arbitration	femu/nvme.h	/^    uint32_t    arbitration;$/;"	m	struct:NvmeFeatureVal
asq	femu/nvme.h	/^    uint64_t    asq;$/;"	m	struct:NvmeBar
assert_dq3	pflash_cfi02.c	/^static inline void assert_dq3(PFlashCFI02 *pfl)$/;"	f	file:
async_config	femu/nvme.h	/^    uint32_t    async_config;$/;"	m	struct:NvmeFeatureVal
async_config	nvme.h	/^	uint32_t    async_config;$/;"	m	struct:NvmeFeatureVal
attributes	femu/nvme.h	/^    uint32_t    attributes;$/;"	m	struct:NvmeDsmCmd
attributes	femu/nvme.h	/^    uint8_t     attributes;$/;"	m	struct:NvmeRangeType
avail	femu/inc/pqueue.h	/^    size_t avail;               \/**< slots available in this queue *\/$/;"	m	struct:pqueue_t
available_spare	femu/nvme.h	/^    uint8_t     available_spare;$/;"	m	struct:NvmeSmartLog
available_spare_threshold	femu/nvme.h	/^    uint8_t     available_spare_threshold;$/;"	m	struct:NvmeSmartLog
avscc	femu/nvme.h	/^    uint8_t     avscc;$/;"	m	struct:NvmeIdCtrl
awun	femu/nvme.h	/^    uint16_t    awun;$/;"	m	struct:NvmeIdCtrl
awupf	femu/nvme.h	/^    uint16_t    awupf;$/;"	m	struct:NvmeIdCtrl
backend_rw	femu/backend/dram.c	/^int backend_rw(SsdDramBackend *b, QEMUSGList *qsg, uint64_t *lbal, bool is_write)$/;"	f
bank_width	pflash_cfi01.c	/^    uint8_t bank_width;$/;"	m	struct:PFlashCFI01	file:
bar	femu/nvme.h	/^    NvmeBar         bar;$/;"	m	struct:FemuCtrl
bar	nvme.h	/^    NvmeBar      bar;$/;"	m	struct:NvmeCtrl
batch_notifications	dataplane/virtio-blk.c	/^    bool batch_notifications;$/;"	m	struct:VirtIOBlockDataPlane	file:
batch_notify_vqs	dataplane/virtio-blk.c	/^    unsigned long *batch_notify_vqs;$/;"	m	struct:VirtIOBlockDataPlane	file:
bb_admin_cmd	femu/bbssd/backup/bb.c	/^static uint16_t bb_admin_cmd(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
bb_admin_cmd	femu/bbssd/bb.c	/^static uint16_t bb_admin_cmd(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
bb_flip	femu/bbssd/backup/bb.c	/^static void bb_flip(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
bb_flip	femu/bbssd/bb.c	/^static void bb_flip(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
bb_init	femu/bbssd/backup/bb.c	/^static void bb_init(FemuCtrl *n, Error **errp)$/;"	f	file:
bb_init	femu/bbssd/bb.c	/^static void bb_init(FemuCtrl *n, Error **errp)$/;"	f	file:
bb_init_ctrl_str	femu/bbssd/backup/bb.c	/^static void bb_init_ctrl_str(FemuCtrl *n)$/;"	f	file:
bb_init_ctrl_str	femu/bbssd/bb.c	/^static void bb_init_ctrl_str(FemuCtrl *n)$/;"	f	file:
bb_init_ctrl_str	femu/nossd/nop.c	/^static void bb_init_ctrl_str(FemuCtrl *n)$/;"	f	file:
bb_io_cmd	femu/bbssd/backup/bb.c	/^static uint16_t bb_io_cmd(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
bb_io_cmd	femu/bbssd/bb.c	/^static uint16_t bb_io_cmd(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
bb_nvme_rw	femu/bbssd/backup/bb.c	/^static uint16_t bb_nvme_rw(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
bb_nvme_rw	femu/bbssd/bb.c	/^static uint16_t bb_nvme_rw(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
bbt_auto_gen	femu/ocssd/oc12.h	/^    uint8_t     bbt_auto_gen;$/;"	m	struct:Oc12Ctrl
bbt_gen_freq	femu/ocssd/oc12.h	/^    uint8_t     bbt_gen_freq;$/;"	m	struct:Oc12Ctrl
bbtbl	femu/nvme.h	/^    Oc12Bbt   **bbtbl;$/;"	m	struct:NvmeNamespace
be	pflash_cfi02.c	/^    uint8_t be;$/;"	m	struct:PFlashCFI02	file:
begin	femu/nvme.h	/^        uint64_t begin;$/;"	m	struct:NvmeNamespace::__anon39
bh	dataplane/virtio-blk.c	/^    QEMUBH *bh;                     \/* bh for guest notification *\/$/;"	m	struct:VirtIOBlockDataPlane	file:
bh	dataplane/xen-block.c	/^    QEMUBH *bh;$/;"	m	struct:XenBlockDataPlane	file:
blk	dataplane/xen-block.c	/^    BlockBackend *blk;$/;"	m	struct:XenBlockDataPlane	file:
blk	fdc.c	/^        BlockBackend *blk;$/;"	m	struct:FDCtrl::__anon17	file:
blk	fdc.c	/^    BlockBackend *blk;$/;"	m	struct:FDrive	file:
blk	femu/bbssd/backup/ftl.h	/^            uint64_t blk : BLK_BITS;$/;"	m	struct:ppa::__anon30::__anon31
blk	femu/bbssd/backup/ftl.h	/^    int blk;$/;"	m	struct:write_pointer
blk	femu/bbssd/backup/ftl.h	/^    struct nand_block *blk;$/;"	m	struct:nand_plane	typeref:struct:nand_plane::nand_block
blk	femu/bbssd/ftl.h	/^            uint64_t blk : BLK_BITS;$/;"	m	struct:ppa::__anon24::__anon25
blk	femu/bbssd/ftl.h	/^    int blk;$/;"	m	struct:write_pointer
blk	femu/bbssd/ftl.h	/^    struct nand_block *blk;$/;"	m	struct:nand_plane	typeref:struct:nand_plane::nand_block
blk	femu/nvme.h	/^    } blk;$/;"	m	struct:NvmeNamespace	typeref:struct:NvmeNamespace::__anon39
blk	femu/ocssd/oc12.h	/^    uint8_t     blk[0];$/;"	m	struct:Oc12Bbt
blk	m25p80.c	/^    BlockBackend *blk;$/;"	m	struct:Flash	file:
blk	nand.c	/^    BlockBackend *blk;$/;"	m	struct:NANDFlashState	file:
blk	pflash_cfi01.c	/^    BlockBackend *blk;$/;"	m	struct:PFlashCFI01	file:
blk	pflash_cfi02.c	/^    BlockBackend *blk;$/;"	m	struct:PFlashCFI02	file:
blk_check_size_and_read_all	block.c	/^bool blk_check_size_and_read_all(BlockBackend *blk, void *buf, hwaddr size,$/;"	f
blk_er_lat	femu/bbssd/backup/ftl.h	/^    int blk_er_lat;   \/* NAND block erase latency in nanoseconds *\/$/;"	m	struct:ssdparams
blk_er_lat	femu/bbssd/ftl.h	/^    int blk_er_lat;   \/* NAND block erase latency in nanoseconds *\/$/;"	m	struct:ssdparams
blk_er_lat	femu/nand/nand.h	/^    int64_t blk_er_lat;$/;"	m	struct:NandFlash
blk_er_lat	femu/nand/nand.h	/^    int64_t blk_er_lat[MAX_FLASH_TYPE];$/;"	m	struct:NandFlashTiming
blk_er_lat_ns	femu/nvme.h	/^    int64_t blk_er_lat_ns;$/;"	m	struct:FemuCtrl
blk_erase	nand.c	/^    void (*blk_erase)(NANDFlashState *s);$/;"	m	struct:NANDFlashState	file:
blk_hdr	femu/ocssd/oc20.h	/^    Oc20Header blk_hdr;$/;"	m	struct:Oc20Ctrl
blk_len	femu/ocssd/oc12.h	/^    uint8_t     blk_len;$/;"	m	struct:Oc12IdAddrFormat
blk_load	nand.c	/^    void (*blk_load)(NANDFlashState *s, uint64_t addr, int offset);$/;"	m	struct:NANDFlashState	file:
blk_mask	femu/ocssd/oc12.h	/^	uint64_t	blk_mask;$/;"	m	struct:Oc12AddrF
blk_offset	femu/ocssd/oc12.h	/^	uint8_t     blk_offset;$/;"	m	struct:Oc12AddrF
blk_offset	femu/ocssd/oc12.h	/^    uint8_t     blk_offset;$/;"	m	struct:Oc12IdAddrFormat
blk_ops	vhost-user-blk.c	/^const VhostDevConfigOps blk_ops = {$/;"	v
blk_per_pl	femu/ocssd/oc12.h	/^    uint32_t    blk_per_pl;$/;"	m	struct:Oc12Params
blk_sync_complete	m25p80.c	/^static void blk_sync_complete(void *opaque, int ret)$/;"	f	file:
blk_units	femu/ocssd/oc12.h	/^    uint32_t    blk_units;$/;"	m	struct:Oc12Params
blk_write	nand.c	/^    void (*blk_write)(NANDFlashState *s);$/;"	m	struct:NANDFlashState	file:
blkconf	nvme-ns.h	/^    BlockConf    blkconf;$/;"	m	struct:NvmeNamespace
blkconf_apply_backend_options	block.c	/^bool blkconf_apply_backend_options(BlockConf *conf, bool readonly,$/;"	f
blkconf_blocksizes	block.c	/^bool blkconf_blocksizes(BlockConf *conf, Error **errp)$/;"	f
blkconf_geometry	block.c	/^bool blkconf_geometry(BlockConf *conf, int *ptrans,$/;"	f
blkif_back_rings	xen_blkif.h	/^union blkif_back_rings {$/;"	u
blkif_back_rings_t	xen_blkif.h	/^typedef union blkif_back_rings blkif_back_rings_t;$/;"	t	typeref:union:blkif_back_rings
blkif_common_request	xen_blkif.h	/^struct blkif_common_request {$/;"	s
blkif_common_response	xen_blkif.h	/^struct blkif_common_response {$/;"	s
blkif_get_x86_32_req	xen_blkif.h	/^static inline void blkif_get_x86_32_req(blkif_request_t *dst,$/;"	f
blkif_get_x86_64_req	xen_blkif.h	/^static inline void blkif_get_x86_64_req(blkif_request_t *dst,$/;"	f
blkif_protocol	xen_blkif.h	/^enum blkif_protocol {$/;"	g
blkif_x86_32_request	xen_blkif.h	/^struct blkif_x86_32_request {$/;"	s
blkif_x86_32_request_discard	xen_blkif.h	/^struct blkif_x86_32_request_discard {$/;"	s
blkif_x86_32_request_t	xen_blkif.h	/^typedef struct blkif_x86_32_request blkif_x86_32_request_t;$/;"	t	typeref:struct:blkif_x86_32_request
blkif_x86_32_response	xen_blkif.h	/^struct blkif_x86_32_response {$/;"	s
blkif_x86_32_response_t	xen_blkif.h	/^typedef struct blkif_x86_32_response blkif_x86_32_response_t;$/;"	t	typeref:struct:blkif_x86_32_response
blkif_x86_64_request	xen_blkif.h	/^struct blkif_x86_64_request {$/;"	s
blkif_x86_64_request_discard	xen_blkif.h	/^struct blkif_x86_64_request_discard {$/;"	s
blkif_x86_64_request_t	xen_blkif.h	/^typedef struct blkif_x86_64_request blkif_x86_64_request_t;$/;"	t	typeref:struct:blkif_x86_64_request
blkif_x86_64_response	xen_blkif.h	/^struct blkif_x86_64_response {$/;"	s
blkif_x86_64_response_t	xen_blkif.h	/^typedef struct blkif_x86_64_response blkif_x86_64_response_t;$/;"	t	typeref:struct:blkif_x86_64_response
blks_per_ch	femu/bbssd/backup/ftl.h	/^    int blks_per_ch;  \/* # of blocks per channel *\/$/;"	m	struct:ssdparams
blks_per_ch	femu/bbssd/ftl.h	/^    int blks_per_ch;  \/* # of blocks per channel *\/$/;"	m	struct:ssdparams
blks_per_line	femu/bbssd/backup/ftl.h	/^    int blks_per_line;$/;"	m	struct:ssdparams
blks_per_line	femu/bbssd/ftl.h	/^    int blks_per_line;$/;"	m	struct:ssdparams
blks_per_lun	femu/bbssd/backup/ftl.h	/^    int blks_per_lun; \/* # of blocks per LUN *\/$/;"	m	struct:ssdparams
blks_per_lun	femu/bbssd/ftl.h	/^    int blks_per_lun; \/* # of blocks per LUN *\/$/;"	m	struct:ssdparams
blks_per_pl	femu/bbssd/backup/ftl.h	/^    int blks_per_pl;  \/* # of blocks per plane *\/$/;"	m	struct:ssdparams
blks_per_pl	femu/bbssd/ftl.h	/^    int blks_per_pl;  \/* # of blocks per plane *\/$/;"	m	struct:ssdparams
bm	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *bm;$/;"	m	struct:HmbSpaceMgmtCtrl
bm_empty	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *bm_empty;$/;"	m	struct:HmbSpaceMgmtCtrl
bm_empty_table	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *bm_empty_table;$/;"	m	struct:HmbSpaceMgmtCtrl
bm_parts_cnt	femu/bbssd/hmb_types.h	/^	uint32_t  bm_parts_cnt;$/;"	m	struct:HmbSpaceMgmtCtrl
boot_ind	hd-geometry.c	/^        uint8_t boot_ind;           \/* 0x80 - active *\/$/;"	m	struct:partition	file:
bootindex	nvme-ns.h	/^    int32_t      bootindex;$/;"	m	struct:NvmeNamespace
bps	fdc.c	/^    uint16_t bps;             \/* Bytes per sector       *\/$/;"	m	struct:FDrive	file:
bubble_up	femu/lib/pqueue.c	/^static void bubble_up(pqueue_t *q, size_t i)$/;"	f	file:
buf	dataplane/xen-block.c	/^    void *buf;$/;"	m	struct:XenBlockRequest	file:
build_fdinfo_aml	fdc.c	/^static Aml *build_fdinfo_aml(int idx, FloppyDriveType type)$/;"	f	file:
bus	fdc.c	/^    BusState bus;$/;"	m	struct:FloppyBus	file:
bus	fdc.c	/^    FloppyBus bus;$/;"	m	struct:FDCtrl	file:
bus	nvme.h	/^    NvmeBus      bus;$/;"	m	struct:NvmeCtrl
buswidth	nand.c	/^    uint8_t buswidth; \/* in BYTES *\/$/;"	m	struct:NANDFlashState	file:
busy	femu/bbssd/backup/ftl.h	/^    bool busy;$/;"	m	struct:nand_lun
busy	femu/bbssd/backup/ftl.h	/^    bool busy;$/;"	m	struct:ssd_channel
busy	femu/bbssd/ftl.h	/^    bool busy;$/;"	m	struct:nand_lun
busy	femu/bbssd/ftl.h	/^    bool busy;$/;"	m	struct:ssd_channel
bypass	pflash_cfi02.c	/^    int bypass;$/;"	m	struct:PFlashCFI02	file:
cache_unit	femu/bbssd/hmb_types.h	/^	uint64_t cache_unit;$/;"	m	struct:HmbSpaceMgmtCtrl
cache_unit_bits	femu/bbssd/hmb_types.h	/^	uint8_t  cache_unit_bits;$/;"	m	struct:HmbSpaceMgmtCtrl
cap	femu/nvme.h	/^    uint64_t    cap;$/;"	m	struct:NvmeBar
cap	femu/ocssd/oc12.h	/^    uint32_t    cap;$/;"	m	struct:Oc12IdCtrl
capacity	femu/inc/rte_ring.h	/^	uint32_t capacity;       \/**< Usable size of ring *\/$/;"	m	struct:rte_ring
cattr	femu/nvme.h	/^    uint32_t    cattr;$/;"	m	struct:NvmeDsmRange
cc	femu/nvme.h	/^    uint32_t    cc;$/;"	m	struct:NvmeBar
cctemp	femu/nvme.h	/^    uint16_t    cctemp;$/;"	m	struct:NvmeIdCtrl
cdrom_read_toc	cdrom.c	/^int cdrom_read_toc(int nb_sectors, uint8_t *buf, int msf, int start_track)$/;"	f
cdrom_read_toc_raw	cdrom.c	/^int cdrom_read_toc_raw(int nb_sectors, uint8_t *buf, int msf, int session_num)$/;"	f
cdw10	femu/nvme.h	/^    uint32_t    cdw10;$/;"	m	struct:NvmeCmd
cdw11	femu/nvme.h	/^    uint32_t    cdw11;$/;"	m	struct:NvmeCmd
cdw12	femu/nvme.h	/^    uint32_t    cdw12;$/;"	m	struct:NvmeCmd
cdw13	femu/nvme.h	/^    uint32_t    cdw13;$/;"	m	struct:NvmeCmd
cdw14	femu/nvme.h	/^    uint32_t    cdw14;$/;"	m	struct:NvmeCmd
cdw15	femu/nvme.h	/^    uint32_t    cdw15;$/;"	m	struct:NvmeCmd
ce	nand.c	/^    uint8_t cle, ale, ce, wp, gnd;$/;"	m	struct:NANDFlashState	file:
cfi_table	pflash_cfi01.c	/^    uint8_t cfi_table[0x52];$/;"	m	struct:PFlashCFI01	file:
cfi_table	pflash_cfi02.c	/^    uint8_t cfi_table[0x4d];$/;"	m	struct:PFlashCFI02	file:
cgrps	femu/ocssd/oc12.h	/^    uint8_t     cgrps;$/;"	m	struct:Oc12IdCtrl
ch	femu/bbssd/backup/ftl.h	/^            uint64_t ch  : CH_BITS;$/;"	m	struct:ppa::__anon30::__anon31
ch	femu/bbssd/backup/ftl.h	/^    int ch;$/;"	m	struct:write_pointer
ch	femu/bbssd/backup/ftl.h	/^    struct ssd_channel *ch;$/;"	m	struct:ssd	typeref:struct:ssd::ssd_channel
ch	femu/bbssd/ftl.h	/^            uint64_t ch  : CH_BITS;$/;"	m	struct:ppa::__anon24::__anon25
ch	femu/bbssd/ftl.h	/^    int ch;$/;"	m	struct:write_pointer
ch	femu/bbssd/ftl.h	/^    struct ssd_channel *ch;$/;"	m	struct:ssd	typeref:struct:ssd::ssd_channel
ch	femu/ocssd/oc12.h	/^    int  ch;$/;"	m	struct:AddrBucket
ch	femu/ocssd/oc20.h	/^    int  ch;$/;"	m	struct:Oc20AddrBucket
ch_len	femu/ocssd/oc12.h	/^    uint8_t     ch_len;$/;"	m	struct:Oc12IdAddrFormat
ch_mask	femu/ocssd/oc12.h	/^	uint64_t	ch_mask;$/;"	m	struct:Oc12AddrF
ch_offset	femu/ocssd/oc12.h	/^	uint8_t     ch_offset;$/;"	m	struct:Oc12AddrF
ch_offset	femu/ocssd/oc12.h	/^    uint8_t     ch_offset;$/;"	m	struct:Oc12IdAddrFormat
ch_units	femu/ocssd/oc12.h	/^    uint32_t    ch_units;$/;"	m	struct:Oc12Params
ch_xfer_lat	femu/bbssd/backup/ftl.h	/^    int ch_xfer_lat;  \/* channel transfer latency for one page in nanoseconds$/;"	m	struct:ssdparams
ch_xfer_lat	femu/bbssd/ftl.h	/^    int ch_xfer_lat;  \/* channel transfer latency for one page in nanoseconds$/;"	m	struct:ssdparams
check_addr	femu/bbssd/backup/ftl.c	/^static inline void check_addr(int a, int max)$/;"	f	file:
check_addr	femu/bbssd/ftl.c	/^static inline void check_addr(int a, int max)$/;"	f	file:
check_media_rate	fdc.c	/^    uint32_t check_media_rate;$/;"	m	struct:FDCtrl	file:
check_params	femu/bbssd/backup/ftl.c	/^static void check_params(struct ssdparams *spp)$/;"	f	file:
check_params	femu/bbssd/ftl.c	/^static void check_params(struct ssdparams *spp)$/;"	f	file:
chip_id	nand.c	/^    uint8_t manf_id, chip_id;$/;"	m	struct:NANDFlashState	file:
chip_len	pflash_cfi02.c	/^    uint32_t chip_len;$/;"	m	struct:PFlashCFI02	file:
chip_locks	femu/nvme.h	/^    pthread_spinlock_t chip_locks[FEMU_MAX_NUM_CHIPS];$/;"	m	struct:FemuCtrl
chip_next_avail_time	femu/nvme.h	/^    volatile int64_t chip_next_avail_time[FEMU_MAX_NUM_CHIPS];$/;"	m	struct:FemuCtrl
chk_len	femu/ocssd/oc20.h	/^    uint8_t chk_len;$/;"	m	struct:Oc20IdLBAF
chk_mask	femu/ocssd/oc20.h	/^    uint64_t chk_mask;$/;"	m	struct:Oc20AddrF
chk_offset	femu/ocssd/oc20.h	/^    uint8_t  chk_offset;$/;"	m	struct:Oc20AddrF
chks_per_grp	femu/ocssd/oc20.h	/^    uint32_t chks_per_grp;$/;"	m	struct:Oc20Namespace
chks_total	femu/ocssd/oc20.h	/^    uint32_t chks_total;$/;"	m	struct:Oc20Namespace
chnl_locks	femu/nvme.h	/^    pthread_spinlock_t chnl_locks[FEMU_MAX_NUM_CHNLS];$/;"	m	struct:FemuCtrl
chnl_next_avail_time	femu/nvme.h	/^    volatile int64_t chnl_next_avail_time[FEMU_MAX_NUM_CHNLS];$/;"	m	struct:FemuCtrl
chnl_pg_xfer_lat	femu/nand/nand.h	/^    int64_t chnl_pg_xfer_lat;$/;"	m	struct:NandFlash
chnl_pg_xfer_lat	femu/nand/nand.h	/^    int64_t chnl_pg_xfer_lat[MAX_FLASH_TYPE];$/;"	m	struct:NandFlashTiming
chnl_pg_xfer_lat_ns	femu/nvme.h	/^    int64_t chnl_pg_xfer_lat_ns;$/;"	m	struct:FemuCtrl
chunk_info	femu/ocssd/oc20.h	/^    Oc20CS *chunk_info;$/;"	m	struct:Oc20Namespace
chunkinfo_size	femu/ocssd/oc20.h	/^    uint64_t chunkinfo_size;$/;"	m	struct:Oc20Namespace
chunkstate_fname	femu/nvme.h	/^    char *chunkstate_fname;$/;"	m	struct:Oc20Params
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeCmd
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeCqe
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeCreateCq
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeCreateSq
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeDeleteQ
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeDsmCmd
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeErrorLog
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeIdentity
cid	femu/nvme.h	/^    uint16_t    cid;$/;"	m	struct:NvmeRwCmd
cid	femu/ocssd/oc12.h	/^    uint16_t    cid;$/;"	m	struct:Oc12BbtGet
cid	femu/ocssd/oc12.h	/^    uint16_t    cid;$/;"	m	struct:Oc12BbtSet
cid	femu/ocssd/oc12.h	/^    uint16_t    cid;$/;"	m	struct:Oc12DmCmd
cid	femu/ocssd/oc12.h	/^    uint16_t    cid;$/;"	m	struct:Oc12GetL2PTbl
cid	femu/ocssd/oc12.h	/^    uint16_t    cid;$/;"	m	struct:Oc12RwCmd
cid	femu/ocssd/oc20.h	/^    uint16_t    cid;$/;"	m	struct:Oc20RwCmd
cid	femu/ocssd/oc20.h	/^    uint16_t cid;$/;"	m	struct:Oc20DmCmd
clba	femu/ocssd/oc20.h	/^    uint32_t clba;$/;"	m	struct:Oc20IdGeo
cle	nand.c	/^    uint8_t cle, ale, ce, wp, gnd;$/;"	m	struct:NANDFlashState	file:
clean_one_block	femu/bbssd/backup/ftl.c	/^static void clean_one_block(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
clean_one_block	femu/bbssd/ftl.c	/^static void clean_one_block(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
closed_zones	femu/nvme.h	/^    QTAILQ_HEAD(, NvmeZone) closed_zones;$/;"	m	struct:FemuCtrl
clpg_rd_lat_ns	femu/nvme.h	/^    int64_t clpg_rd_lat_ns; \/* center-lower page in QLC *\/$/;"	m	struct:FemuCtrl
clpg_wr_lat_ns	femu/nvme.h	/^    int64_t clpg_wr_lat_ns;$/;"	m	struct:FemuCtrl
cmb_size_mb	femu/nvme.h	/^    uint32_t cmb_size_mb;$/;"	m	struct:NvmeParams
cmb_size_mb	nvme.h	/^    uint32_t cmb_size_mb;$/;"	m	struct:NvmeParams
cmbloc	femu/nvme.h	/^    uint32_t    cmbloc;$/;"	m	struct:FemuCtrl
cmbloc	femu/nvme.h	/^    uint32_t    cmbloc;$/;"	m	struct:NvmeBar
cmbsz	femu/nvme.h	/^    uint32_t    cmbsz;$/;"	m	struct:FemuCtrl
cmbsz	femu/nvme.h	/^    uint32_t    cmbsz;$/;"	m	struct:NvmeBar
cmbuf	femu/nvme.h	/^    uint8_t     *cmbuf;$/;"	m	struct:FemuCtrl
cmbuf	nvme.h	/^    uint8_t     *cmbuf;$/;"	m	struct:NvmeCtrl
cmd	femu/bbssd/backup/ftl.h	/^    int cmd;$/;"	m	struct:nand_cmd
cmd	femu/bbssd/ftl.h	/^    int cmd;$/;"	m	struct:nand_cmd
cmd	femu/nvme.h	/^    NvmeCmd                 cmd;$/;"	m	struct:NvmeRequest
cmd	nand.c	/^    uint32_t cmd;$/;"	m	struct:NANDFlashState	file:
cmd	nvme.h	/^    NvmeCmd                 cmd;$/;"	m	struct:NvmeRequest
cmd	pflash_cfi01.c	/^    uint8_t cmd;$/;"	m	struct:PFlashCFI01	file:
cmd	pflash_cfi02.c	/^    uint8_t cmd;$/;"	m	struct:PFlashCFI02	file:
cmd_in_progress	m25p80.c	/^    uint8_t cmd_in_progress;$/;"	m	struct:Flash	file:
cmd_lns	femu/ocssd/oc20.c	/^static inline Oc20Namespace *cmd_lns(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
cmd_ns	femu/ocssd/oc20.c	/^static inline NvmeNamespace *cmd_ns(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
cmd_opcode	femu/nvme.h	/^    uint8_t                 cmd_opcode;$/;"	m	struct:NvmeRequest
cmic	femu/nvme.h	/^    uint8_t     cmic;$/;"	m	struct:NvmeIdCtrl
cmos_get_fd_drive_type	fdc.c	/^int cmos_get_fd_drive_type(FloppyDriveType fd0)$/;"	f
cmp_pri	femu/nvme-io.c	/^static int cmp_pri(pqueue_pri_t next, pqueue_pri_t curr)$/;"	f	file:
cmppri	femu/inc/pqueue.h	/^    pqueue_cmp_pri_f cmppri;    \/**< callback to compare nodes *\/$/;"	m	struct:pqueue_t
cnlb	femu/ocssd/oc20.h	/^    uint64_t cnlb;$/;"	m	struct:Oc20ChunkState
cns	femu/nvme.h	/^    uint32_t    cns;$/;"	m	struct:NvmeIdentity
cnt	femu/ocssd/oc12.h	/^    int  cnt;$/;"	m	struct:AddrBucket
cnt	femu/ocssd/oc20.h	/^    int  cnt;$/;"	m	struct:Oc20AddrBucket
cntlid	femu/nvme.h	/^    uint16_t    cntlid;$/;"	m	struct:NvmeIdCtrl
command_to_handler	fdc.c	/^static uint8_t command_to_handler[256];$/;"	v	file:
common	xen_blkif.h	/^    blkif_common_back_ring_t common;$/;"	m	union:blkif_back_rings
complete_collecting_data	m25p80.c	/^static void complete_collecting_data(Flash *s)$/;"	f	file:
completed	femu/nvme.h	/^    int             completed;$/;"	m	struct:FemuCtrl
completed	femu/nvme.h	/^    uint64_t    completed;$/;"	m	struct:NvmeSQueue
conf	dataplane/virtio-blk.c	/^    VirtIOBlkConf *conf;$/;"	m	struct:VirtIOBlockDataPlane	file:
conf	fdc.c	/^    BlockConf *conf;$/;"	m	struct:FDrive	file:
conf	nvme.h	/^    BlockConf    conf;$/;"	m	struct:NvmeCtrl
config	fdc.c	/^    uint8_t config;$/;"	m	struct:FDCtrl	file:
cons	femu/inc/rte_ring.h	/^	struct rte_ring_headtail cons;$/;"	m	struct:rte_ring	typeref:struct:rte_ring::rte_ring_headtail
control	femu/nvme.h	/^    uint16_t    control;$/;"	m	struct:NvmeRwCmd
control	femu/ocssd/oc12.h	/^    uint16_t    control;  \/* For Suspend, SLC mode, Scramble, FUA, LR control *\/$/;"	m	struct:Oc12RwCmd
control	femu/ocssd/oc20.h	/^    uint16_t    control;$/;"	m	struct:Oc20RwCmd
controller_busy_time	femu/nvme.h	/^    uint64_t    controller_busy_time[2];$/;"	m	struct:NvmeSmartLog
counter	pflash_cfi01.c	/^    uint64_t counter;$/;"	m	struct:PFlashCFI01	file:
cpar	femu/ocssd/oc12.h	/^    uint16_t    cpar;$/;"	m	struct:Oc12IdGroup
cpg_rd_lat_ns	femu/nvme.h	/^    int64_t cpg_rd_lat_ns; \/* center page in TLC *\/$/;"	m	struct:FemuCtrl
cpg_wr_lat_ns	femu/nvme.h	/^    int64_t cpg_wr_lat_ns;$/;"	m	struct:FemuCtrl
cq	femu/nvme.h	/^    NvmeCQueue      **cq;$/;"	m	struct:FemuCtrl
cq	femu/nvme.h	/^    struct NvmeCQueue       *cq;$/;"	m	struct:NvmeRequest	typeref:struct:NvmeRequest::NvmeCQueue
cq	nvme.h	/^    NvmeCQueue      **cq;$/;"	m	struct:NvmeCtrl
cq_flags	femu/nvme.h	/^    uint16_t    cq_flags;$/;"	m	struct:NvmeCreateCq
cqe	femu/nvme.h	/^    NvmeCqe                 cqe;$/;"	m	struct:NvmeRequest
cqe	nvme.h	/^    NvmeCqe                 cqe;$/;"	m	struct:NvmeRequest
cqe_size	femu/nvme.h	/^    uint16_t    cqe_size;$/;"	m	struct:FemuCtrl
cqe_size	nvme.h	/^    uint16_t    cqe_size;$/;"	m	struct:NvmeCtrl
cqes	femu/nvme.h	/^    uint8_t     cqes;$/;"	m	struct:NvmeIdCtrl
cqes_pending	femu/nvme.h	/^    uint8_t     cqes_pending;$/;"	m	struct:FemuCtrl
cqid	femu/nvme.h	/^    uint16_t    cqid;$/;"	m	struct:NvmeCQueue
cqid	femu/nvme.h	/^    uint16_t    cqid;$/;"	m	struct:NvmeCreateCq
cqid	femu/nvme.h	/^    uint16_t    cqid;$/;"	m	struct:NvmeCreateSq
cqid	femu/nvme.h	/^    uint16_t    cqid;$/;"	m	struct:NvmeSQueue
cqid	nvme.h	/^    uint16_t    cqid;$/;"	m	struct:NvmeCQueue
cqid	nvme.h	/^    uint16_t    cqid;$/;"	m	struct:NvmeSQueue
cqr	femu/nvme.h	/^    uint8_t     cqr;$/;"	m	struct:FemuCtrl
cqr	femu/nvme.h	/^    uint8_t  cqr;$/;"	m	struct:NvmeParams
critical_warning	femu/nvme.h	/^    uint8_t     critical_warning;$/;"	m	struct:NvmeSmartLog
cross_zone_read	femu/nvme.h	/^    bool            cross_zone_read;$/;"	m	struct:FemuCtrl
cross_zone_read	femu/zns/zns.h	/^    bool     cross_zone_read;$/;"	m	struct:NvmeNamespaceParams
csecs	femu/ocssd/oc12.h	/^    uint16_t    csecs;$/;"	m	struct:Oc12IdGroup
csi	femu/nvme.h	/^    uint8_t         csi;$/;"	m	struct:FemuCtrl
csi	femu/nvme.h	/^    uint8_t     csi;$/;"	m	struct:NvmeIdentity
csts	femu/nvme.h	/^    uint32_t    csts;$/;"	m	struct:NvmeBar
ctratt	femu/nvme.h	/^    uint32_t    ctratt;$/;"	m	struct:NvmeIdCtrl
ctrl	femu/nvme.h	/^    struct FemuCtrl *ctrl;$/;"	m	struct:NvmeCQueue	typeref:struct:NvmeCQueue::FemuCtrl
ctrl	femu/nvme.h	/^    struct FemuCtrl *ctrl;$/;"	m	struct:NvmeNamespace	typeref:struct:NvmeNamespace::FemuCtrl
ctrl	femu/nvme.h	/^    struct FemuCtrl *ctrl;$/;"	m	struct:NvmeSQueue	typeref:struct:NvmeSQueue::FemuCtrl
ctrl	femu/nvme.h	/^    uint16_t                ctrl;$/;"	m	struct:NvmeRequest
ctrl	nvme.h	/^    struct NvmeCtrl *ctrl;$/;"	m	struct:NvmeCQueue	typeref:struct:NvmeCQueue::NvmeCtrl
ctrl	nvme.h	/^    struct NvmeCtrl *ctrl;$/;"	m	struct:NvmeSQueue	typeref:struct:NvmeSQueue::NvmeCtrl
ctrl_mem	femu/nvme.h	/^    MemoryRegion    ctrl_mem;$/;"	m	struct:FemuCtrl
ctrl_mem	nvme.h	/^    MemoryRegion ctrl_mem;$/;"	m	struct:NvmeCtrl
ctx	dataplane/virtio-blk.c	/^    AioContext *ctx;$/;"	m	struct:VirtIOBlockDataPlane	file:
ctx	dataplane/xen-block.c	/^    AioContext *ctx;$/;"	m	struct:XenBlockDataPlane	file:
cupg_rd_lat_ns	femu/nvme.h	/^    int64_t cupg_rd_lat_ns; \/* center-upper page in QLC *\/$/;"	m	struct:FemuCtrl
cupg_wr_lat_ns	femu/nvme.h	/^    int64_t cupg_wr_lat_ns;$/;"	m	struct:FemuCtrl
cur_addr	m25p80.c	/^    uint32_t cur_addr;$/;"	m	struct:Flash	file:
cur_drv	fdc.c	/^    uint8_t cur_drv;$/;"	m	struct:FDCtrl	file:
curline	femu/bbssd/backup/ftl.h	/^    struct line *curline;$/;"	m	struct:write_pointer	typeref:struct:write_pointer::line
curline	femu/bbssd/ftl.h	/^    struct line *curline;$/;"	m	struct:write_pointer	typeref:struct:write_pointer::line
cyl	hd-geometry.c	/^        uint8_t cyl;                \/* starting cylinder *\/$/;"	m	struct:partition	file:
d	femu/inc/pqueue.h	/^    void **d;                   \/**< The actualy queue in binary heap form *\/$/;"	m	struct:pqueue_t
d	femu/zns/zns.h	/^    NvmeZoneDescr   d;$/;"	m	struct:NvmeZone
data	femu/nvme.h	/^        uint64_t data;$/;"	m	struct:NvmeNamespace::__anon39
data	m25p80.c	/^    uint8_t data[M25P80_INTERNAL_DATA_BUFFER_SZ];$/;"	m	struct:Flash	file:
data_dir	fdc.c	/^    uint8_t data_dir;$/;"	m	struct:FDCtrl	file:
data_len	fdc.c	/^    uint32_t data_len;$/;"	m	struct:FDCtrl	file:
data_pos	fdc.c	/^    uint32_t data_pos;$/;"	m	struct:FDCtrl	file:
data_read_loop	m25p80.c	/^    bool data_read_loop;$/;"	m	struct:Flash	file:
data_state	fdc.c	/^    uint8_t data_state;$/;"	m	struct:FDCtrl	file:
data_units_read	femu/nvme.h	/^    uint64_t    data_units_read[2];$/;"	m	struct:NvmeSmartLog
data_units_written	femu/nvme.h	/^    uint64_t    data_units_written[2];$/;"	m	struct:NvmeSmartLog
dataplane	dataplane/xen-block.c	/^    XenBlockDataPlane *dataplane;$/;"	m	struct:XenBlockRequest	file:
dataplane_started	femu/nvme.h	/^    bool        dataplane_started;$/;"	m	struct:FemuCtrl
dataplane_started_ptr	femu/bbssd/backup/ftl.h	/^    bool *dataplane_started_ptr;$/;"	m	struct:ssd
dataplane_started_ptr	femu/bbssd/ftl.h	/^    bool *dataplane_started_ptr;$/;"	m	struct:ssd
db_addr	femu/nvme.h	/^    uint64_t    db_addr;$/;"	m	struct:NvmeCQueue
db_addr	femu/nvme.h	/^    uint64_t    db_addr;$/;"	m	struct:NvmeSQueue
db_addr_hva	femu/nvme.h	/^    uint64_t    db_addr_hva;$/;"	m	struct:NvmeCQueue
db_addr_hva	femu/nvme.h	/^    uint64_t    db_addr_hva;$/;"	m	struct:NvmeSQueue
db_stride	femu/nvme.h	/^    uint8_t     db_stride;$/;"	m	struct:FemuCtrl
db_stride	femu/nvme.h	/^    uint8_t  db_stride;$/;"	m	struct:NvmeParams
dbs_addr	femu/nvme.h	/^	uint64_t		dbs_addr;$/;"	m	struct:FemuCtrl
dbs_addr_hva	femu/nvme.h	/^    uint64_t        dbs_addr_hva;$/;"	m	struct:FemuCtrl
debug	femu/nvme.h	/^    uint8_t debug;$/;"	m	struct:Oc20Params
debug	femu/ocssd/oc12.h	/^    uint8_t     debug;$/;"	m	struct:Oc12Ctrl
decode_dio_read_cmd	m25p80.c	/^static void decode_dio_read_cmd(Flash *s)$/;"	f	file:
decode_fast_read_cmd	m25p80.c	/^static void decode_fast_read_cmd(Flash *s)$/;"	f	file:
decode_new_cmd	m25p80.c	/^static void decode_new_cmd(Flash *s, uint32_t value)$/;"	f	file:
decode_qio_read_cmd	m25p80.c	/^static void decode_qio_read_cmd(Flash *s)$/;"	f	file:
dev_pci	femu/bbssd/hmb_types.h	/^    void *dev_pci;$/;"	m	struct:HmbCtrl
device_width	pflash_cfi01.c	/^    uint8_t device_width; \/* If 0, device width not specified. *\/$/;"	m	struct:PFlashCFI01	file:
devname	femu/nvme.h	/^    char            devname[64];$/;"	m	struct:FemuCtrl
dialect	femu/nvme.h	/^    uint8_t  dialect;$/;"	m	struct:NvmeParams
did	femu/nvme.h	/^    uint16_t    did;$/;"	m	struct:FemuCtrl
did	femu/nvme.h	/^    uint16_t did;$/;"	m	struct:NvmeParams
die_cnt	m25p80.c	/^    uint8_t die_cnt;$/;"	m	struct:FlashPartInfo	file:
direction	fdc.c	/^    int direction;$/;"	m	struct:FDCtrlCommand	file:
dirty	femu/bbssd/hmb_types.h	/^	uint64_t dirty  :  1;  $/;"	m	struct:HmbSharedEnt
dirty_page	m25p80.c	/^    int64_t dirty_page;$/;"	m	struct:Flash	file:
disk	fdc.c	/^    FloppyDriveType disk;     \/* Current disk type      *\/$/;"	m	struct:FDrive	file:
disk_to_vbd_name	xen-block.c	/^static char *disk_to_vbd_name(unsigned int disk)$/;"	f	file:
dlfeat	femu/nvme.h	/^    uint8_t     dlfeat;$/;"	m	struct:FemuCtrl
dlfeat	femu/nvme.h	/^    uint8_t     dlfeat;$/;"	m	struct:NvmeIdNs
dlfeat	femu/nvme.h	/^    uint8_t  dlfeat;$/;"	m	struct:NvmeParams
dma	fdc.c	/^    IsaDma *dma;$/;"	m	struct:FDCtrl	file:
dma_addr	femu/nvme.h	/^    uint64_t    dma_addr;$/;"	m	struct:NvmeCQueue
dma_addr	femu/nvme.h	/^    uint64_t    dma_addr;$/;"	m	struct:NvmeSQueue
dma_addr	nvme.h	/^    uint64_t    dma_addr;$/;"	m	struct:NvmeCQueue
dma_addr	nvme.h	/^    uint64_t    dma_addr;$/;"	m	struct:NvmeSQueue
dma_addr_hva	femu/nvme.h	/^    uint64_t    dma_addr_hva;$/;"	m	struct:NvmeCQueue
dma_addr_hva	femu/nvme.h	/^    uint64_t    dma_addr_hva;$/;"	m	struct:NvmeSQueue
dma_chann	fdc.c	/^    int dma_chann;$/;"	m	struct:FDCtrl	file:
dma_read_prp	femu/dma.c	/^uint16_t dma_read_prp(FemuCtrl *n, uint8_t *ptr, uint32_t len, uint64_t prp1,$/;"	f
dma_write_prp	femu/dma.c	/^uint16_t dma_write_prp(FemuCtrl *n, uint8_t *ptr, uint32_t len, uint64_t prp1,$/;"	f
do_gc	femu/bbssd/backup/ftl.c	/^static int do_gc(struct ssd *ssd, bool force)$/;"	f	file:
do_gc	femu/bbssd/ftl.c	/^static int do_gc(struct ssd *ssd, bool force)$/;"	f	file:
dom	femu/ocssd/oc12.h	/^    uint32_t    dom;$/;"	m	struct:Oc12IdCtrl
dor	fdc.c	/^    uint8_t dor;$/;"	m	struct:FDCtrl	file:
dor_vmstate	fdc.c	/^    uint8_t dor_vmstate; \/* only used as temp during vmstate *\/$/;"	m	struct:FDCtrl	file:
dpc	femu/nvme.h	/^    uint8_t     dpc;$/;"	m	struct:FemuCtrl
dpc	femu/nvme.h	/^    uint8_t     dpc;$/;"	m	struct:NvmeIdNs
dpc	femu/nvme.h	/^    uint8_t  dpc;$/;"	m	struct:NvmeParams
dps	femu/nvme.h	/^    uint8_t     dps;$/;"	m	struct:FemuCtrl
dps	femu/nvme.h	/^    uint8_t     dps;$/;"	m	struct:NvmeIdNs
dps	femu/nvme.h	/^    uint8_t  dps;$/;"	m	struct:NvmeParams
dptr	femu/nvme.h	/^    NvmeCmdDptr dptr;$/;"	m	struct:NvmeCmd
dptr	femu/ocssd/oc20.h	/^    NvmeCmdDptr dptr;$/;"	m	struct:Oc20RwCmd
drive	fdc.c	/^    FloppyDriveType drive;    \/* CMOS drive type        *\/$/;"	m	struct:FDrive	file:
drive	fdc.c	/^    FloppyDriveType drive;$/;"	m	struct:FDFormat	file:
drive_size	fdc.c	/^static FDriveSize drive_size(FloppyDriveType drive)$/;"	f	file:
drives	fdc.c	/^    FDrive drives[MAX_FD];$/;"	m	struct:FDCtrl	file:
drv0	fdc.c	/^static inline FDrive *drv0(FDCtrl *fdctrl)$/;"	f	file:
drv1	fdc.c	/^static inline FDrive *drv1(FDCtrl *fdctrl)$/;"	f	file:
drv2	fdc.c	/^static inline FDrive *drv2(FDCtrl *fdctrl)$/;"	f	file:
drv3	fdc.c	/^static inline FDrive *drv3(FDCtrl *fdctrl)$/;"	f	file:
dsmgmt	femu/nvme.h	/^    uint32_t    dsmgmt;$/;"	m	struct:NvmeRwCmd
dsmgmt	femu/ocssd/oc12.h	/^    uint32_t    dsmgmt;$/;"	m	struct:Oc12RwCmd
dsr	fdc.c	/^    uint8_t dsr;$/;"	m	struct:FDCtrl	file:
dsto	femu/nvme.h	/^    uint8_t     dsto;$/;"	m	struct:NvmeIdCtrl
dummy	xen_blkif.h	/^    char dummy;$/;"	m	struct:blkif_common_request
dummy	xen_blkif.h	/^    char dummy;$/;"	m	struct:blkif_common_response
e_next	femu/bbssd/hmb_types.h	/^	int32_t e_next;$/;"	m	struct:HmbDLL
e_next	femu/bbssd/hmb_types.h	/^	uint32_t e_next;		\/* 4bytes (acc: 20) *\/$/;"	m	struct:HmbSharedEnt
e_next	femu/bbssd/hmb_types.h	/^	uint32_t e_next;$/;"	m	struct:HmbSortedEnt
e_own	femu/bbssd/hmb_types.h	/^	uint32_t e_own;			\/* 4bytes (acc: 12) *\/$/;"	m	struct:HmbSharedEnt
e_own	femu/bbssd/hmb_types.h	/^	uint32_t e_own;$/;"	m	struct:HmbSortedEnt
e_prev	femu/bbssd/hmb_types.h	/^	int32_t e_prev;$/;"	m	struct:HmbDLL
e_prev	femu/bbssd/hmb_types.h	/^	uint32_t e_prev;		\/* 4bytes (acc: 16) *\/$/;"	m	struct:HmbSharedEnt
e_prev	femu/bbssd/hmb_types.h	/^	uint32_t e_prev;$/;"	m	struct:HmbSortedEnt
ear	m25p80.c	/^    uint8_t ear;$/;"	m	struct:Flash	file:
early_reset	femu/nvme.h	/^    uint8_t early_reset;$/;"	m	struct:Oc20Params
ecc_digest	ecc.c	/^uint8_t ecc_digest(ECCState *s, uint8_t sample)$/;"	f
ecc_reset	ecc.c	/^void ecc_reset(ECCState *s)$/;"	f
edstt	femu/nvme.h	/^    uint16_t    edstt;$/;"	m	struct:NvmeIdCtrl
eis_addr	femu/nvme.h	/^	uint64_t		eis_addr;$/;"	m	struct:FemuCtrl
eis_addr_hva	femu/nvme.h	/^    uint64_t        eis_addr_hva;$/;"	m	struct:FemuCtrl
elp_index	femu/nvme.h	/^    uint8_t     elp_index;$/;"	m	struct:FemuCtrl
elpe	femu/nvme.h	/^    uint8_t     elpe;$/;"	m	struct:FemuCtrl
elpe	femu/nvme.h	/^    uint8_t     elpe;$/;"	m	struct:NvmeIdCtrl
elpe	femu/nvme.h	/^    uint8_t  elpe;$/;"	m	struct:NvmeParams
elpes	femu/nvme.h	/^    NvmeErrorLog    *elpes;$/;"	m	struct:FemuCtrl
empty_list	femu/bbssd/hmb_types.h	/^	struct HmbSegEmpty *empty_list; \/* previously, "empty_list"*\/$/;"	m	struct:HmbSeg	typeref:struct:HmbSeg::HmbSegEmpty
enable_gc_delay	femu/bbssd/backup/ftl.h	/^    bool enable_gc_delay;$/;"	m	struct:ssdparams
enable_gc_delay	femu/bbssd/ftl.h	/^    bool enable_gc_delay;$/;"	m	struct:ssdparams
enable_hmb	femu/bbssd/hmb_types.h	/^	bool     enable_hmb;     \/* HMB: Enable Host Memory (from dword 11) *\/$/;"	m	struct:HmbCtrl
end_cyl	hd-geometry.c	/^        uint8_t end_cyl;            \/* end cylinder *\/$/;"	m	struct:partition	file:
end_head	hd-geometry.c	/^        uint8_t end_head;           \/* end head *\/$/;"	m	struct:partition	file:
end_sector	hd-geometry.c	/^        uint8_t end_sector;         \/* end sector *\/$/;"	m	struct:partition	file:
enh_volatile_cfg	m25p80.c	/^    uint32_t enh_volatile_cfg;$/;"	m	struct:Flash	file:
enlat	femu/nvme.h	/^    uint32_t    enlat;$/;"	m	struct:NvmePSD
entry	femu/bbssd/backup/ftl.h	/^    QTAILQ_ENTRY(line) entry; \/* in either {free,victim,full} list *\/$/;"	m	struct:line
entry	femu/bbssd/ftl.h	/^    QTAILQ_ENTRY(line) entry; \/* in either {free,victim,full} list *\/$/;"	m	struct:line
entry	femu/nvme.h	/^    QSIMPLEQ_ENTRY(NvmeAsyncEvent) entry;$/;"	m	struct:NvmeAsyncEvent
entry	femu/nvme.h	/^    QTAILQ_ENTRY(NvmeRequest)entry;$/;"	m	struct:NvmeRequest
entry	femu/nvme.h	/^    QTAILQ_ENTRY(NvmeSQueue) entry;$/;"	m	struct:NvmeSQueue
entry	femu/zns/zns.h	/^    QTAILQ_ENTRY(NvmeZone) entry;$/;"	m	struct:NvmeZone
entry	nvme.h	/^    QTAILQ_ENTRY(NvmeAsyncEvent) entry;$/;"	m	struct:NvmeAsyncEvent
entry	nvme.h	/^    QTAILQ_ENTRY(NvmeRequest)entry;$/;"	m	struct:NvmeRequest
entry	nvme.h	/^    QTAILQ_ENTRY(NvmeSQueue) entry;$/;"	m	struct:NvmeSQueue
entry_id	femu/bbssd/hmb_types.h	/^	int32_t            entry_id;$/;"	m	struct:HmbMapInfo
eot	fdc.c	/^    uint8_t eot; \/* last wanted sector *\/$/;"	m	struct:FDCtrl	file:
erase_cnt	femu/bbssd/backup/ftl.h	/^    int erase_cnt;$/;"	m	struct:nand_block
erase_cnt	femu/bbssd/ftl.h	/^    int erase_cnt;$/;"	m	struct:nand_block
erase_shift	nand.c	/^    int erase_shift;$/;"	m	struct:__anon45	file:
erase_shift	nand.c	/^    int page_shift, oob_shift, erase_shift, addr_shift;$/;"	m	struct:NANDFlashState	file:
erase_time_remaining	pflash_cfi02.c	/^    uint64_t erase_time_remaining;$/;"	m	struct:PFlashCFI02	file:
err_rec	femu/nvme.h	/^    uint32_t    err_rec;$/;"	m	struct:NvmeFeatureVal
error_count	femu/nvme.h	/^    uint64_t    error_count;$/;"	m	struct:NvmeErrorLog
error_count	femu/nvme.h	/^    uint8_t     error_count;$/;"	m	struct:FemuCtrl
eui64	femu/nvme.h	/^    uint64_t    eui64;$/;"	m	struct:NvmeIdNs
event_channel	dataplane/xen-block.c	/^    XenEventChannel *event_channel;$/;"	m	struct:XenBlockDataPlane	file:
event_info	femu/nvme.h	/^    uint8_t event_info;$/;"	m	struct:NvmeAerResult
event_type	femu/nvme.h	/^    uint8_t event_type;$/;"	m	struct:NvmeAerResult
eventidx_addr	femu/nvme.h	/^    uint64_t    eventidx_addr;$/;"	m	struct:NvmeCQueue
eventidx_addr	femu/nvme.h	/^    uint64_t    eventidx_addr;$/;"	m	struct:NvmeSQueue
eventidx_addr_hva	femu/nvme.h	/^    uint64_t    eventidx_addr_hva;$/;"	m	struct:NvmeCQueue
eventidx_addr_hva	femu/nvme.h	/^    uint64_t    eventidx_addr_hva;$/;"	m	struct:NvmeSQueue
exit	femu/nvme.h	/^    void     (*exit)(struct FemuCtrl *);$/;"	m	struct:FemuExtCtrlOps
exlat	femu/nvme.h	/^    uint32_t    exlat;$/;"	m	struct:NvmePSD
exp_open_zones	femu/nvme.h	/^    QTAILQ_HEAD(, NvmeZone) exp_open_zones;$/;"	m	struct:FemuCtrl
expire_time	femu/nvme.h	/^    int64_t                 expire_time;$/;"	m	struct:NvmeRequest
ext_ops	femu/nvme.h	/^    FemuExtCtrlOps ext_ops;$/;"	m	struct:FemuCtrl
extended	femu/nvme.h	/^    uint8_t     extended;$/;"	m	struct:FemuCtrl
extended	femu/nvme.h	/^    uint8_t  extended;$/;"	m	struct:NvmeParams
fallback	fdc.c	/^    FloppyDriveType fallback; \/* type=auto failure fallback *\/$/;"	m	struct:FDCtrl	file:
fd_block_ops	fdc.c	/^static const BlockDevOps fd_block_ops = {$/;"	v	file:
fd_change_cb	fdc.c	/^static void fd_change_cb(void *opaque, bool load, Error **errp)$/;"	f	file:
fd_empty_seek_hack	fdc.c	/^static void fd_empty_seek_hack(FDrive *drv)$/;"	f	file:
fd_formats	fdc.c	/^static const FDFormat fd_formats[] = {$/;"	v	file:
fd_init	fdc.c	/^static void fd_init(FDrive *drv)$/;"	f	file:
fd_offset	fdc.c	/^static int fd_offset(FDrive *drv)$/;"	f	file:
fd_recalibrate	fdc.c	/^static void fd_recalibrate(FDrive *drv)$/;"	f	file:
fd_recalibrate	swim.c	/^static void fd_recalibrate(FDrive *drive)$/;"	f	file:
fd_revalidate	fdc.c	/^static void fd_revalidate(FDrive *drv)$/;"	f	file:
fd_sector	fdc.c	/^static int fd_sector(FDrive *drv)$/;"	f	file:
fd_sector_calc	fdc.c	/^static int fd_sector_calc(uint8_t head, uint8_t track, uint8_t sect,$/;"	f	file:
fd_seek	fdc.c	/^static int fd_seek(FDrive *drv, uint8_t head, uint8_t track, uint8_t sect,$/;"	f	file:
fdc	fdc.c	/^    FDCtrl *fdc;$/;"	m	struct:FloppyBus	file:
fdc_isa_build_aml	fdc.c	/^static void fdc_isa_build_aml(ISADevice *isadev, Aml *scope)$/;"	f	file:
fdc_phase_needed	fdc.c	/^static bool fdc_phase_needed(void *opaque)$/;"	f	file:
fdc_portio_list	fdc.c	/^static const MemoryRegionPortio fdc_portio_list[] = {$/;"	v	file:
fdc_post_load	fdc.c	/^static int fdc_post_load(void *opaque, int version_id)$/;"	f	file:
fdc_pre_load	fdc.c	/^static int fdc_pre_load(void *opaque)$/;"	f	file:
fdc_pre_save	fdc.c	/^static int fdc_pre_save(void *opaque)$/;"	f	file:
fdc_register_types	fdc.c	/^static void fdc_register_types(void)$/;"	f	file:
fdc_reset_sensei_needed	fdc.c	/^static bool fdc_reset_sensei_needed(void *opaque)$/;"	f	file:
fdc_result_timer_needed	fdc.c	/^static bool fdc_result_timer_needed(void *opaque)$/;"	f	file:
fdctrl	fdc.c	/^    FDCtrl *fdctrl;$/;"	m	struct:FDrive	file:
fdctrl_connect_drives	fdc.c	/^static void fdctrl_connect_drives(FDCtrl *fdctrl, DeviceState *fdc_dev,$/;"	f	file:
fdctrl_external_reset_isa	fdc.c	/^static void fdctrl_external_reset_isa(DeviceState *d)$/;"	f	file:
fdctrl_external_reset_sysbus	fdc.c	/^static void fdctrl_external_reset_sysbus(DeviceState *d)$/;"	f	file:
fdctrl_format_sector	fdc.c	/^static void fdctrl_format_sector(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_handle_configure	fdc.c	/^static void fdctrl_handle_configure(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_drive_specification_command	fdc.c	/^static void fdctrl_handle_drive_specification_command(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_dumpreg	fdc.c	/^static void fdctrl_handle_dumpreg(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_format_track	fdc.c	/^static void fdctrl_handle_format_track(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_lock	fdc.c	/^static void fdctrl_handle_lock(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_option	fdc.c	/^static void fdctrl_handle_option(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_partid	fdc.c	/^static void fdctrl_handle_partid(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_perpendicular_mode	fdc.c	/^static void fdctrl_handle_perpendicular_mode(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_powerdown_mode	fdc.c	/^static void fdctrl_handle_powerdown_mode(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_readid	fdc.c	/^static void fdctrl_handle_readid(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_recalibrate	fdc.c	/^static void fdctrl_handle_recalibrate(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_relative_seek_in	fdc.c	/^static void fdctrl_handle_relative_seek_in(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_relative_seek_out	fdc.c	/^static void fdctrl_handle_relative_seek_out(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_restore	fdc.c	/^static void fdctrl_handle_restore(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_save	fdc.c	/^static void fdctrl_handle_save(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_seek	fdc.c	/^static void fdctrl_handle_seek(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_sense_drive_status	fdc.c	/^static void fdctrl_handle_sense_drive_status(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_sense_interrupt_status	fdc.c	/^static void fdctrl_handle_sense_interrupt_status(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_specify	fdc.c	/^static void fdctrl_handle_specify(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_handle_tc	fdc.c	/^static void fdctrl_handle_tc(void *opaque, int irq, int level)$/;"	f	file:
fdctrl_handle_version	fdc.c	/^static void fdctrl_handle_version(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_init_drives	fdc.c	/^static void fdctrl_init_drives(FloppyBus *bus, DriveInfo **fds)$/;"	f	file:
fdctrl_init_sysbus	fdc.c	/^void fdctrl_init_sysbus(qemu_irq irq, int dma_chann,$/;"	f
fdctrl_media_changed	fdc.c	/^static int fdctrl_media_changed(FDrive *drv)$/;"	f	file:
fdctrl_mem_ops	fdc.c	/^static const MemoryRegionOps fdctrl_mem_ops = {$/;"	v	file:
fdctrl_mem_strict_ops	fdc.c	/^static const MemoryRegionOps fdctrl_mem_strict_ops = {$/;"	v	file:
fdctrl_raise_irq	fdc.c	/^static void fdctrl_raise_irq(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read	fdc.c	/^static uint32_t fdctrl_read (void *opaque, uint32_t reg)$/;"	f	file:
fdctrl_read_data	fdc.c	/^static uint32_t fdctrl_read_data(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read_dir	fdc.c	/^static uint32_t fdctrl_read_dir(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read_dor	fdc.c	/^static uint32_t fdctrl_read_dor(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read_main_status	fdc.c	/^static uint32_t fdctrl_read_main_status(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read_mem	fdc.c	/^static uint64_t fdctrl_read_mem (void *opaque, hwaddr reg,$/;"	f	file:
fdctrl_read_statusA	fdc.c	/^static uint32_t fdctrl_read_statusA(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read_statusB	fdc.c	/^static uint32_t fdctrl_read_statusB(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_read_tape	fdc.c	/^static uint32_t fdctrl_read_tape(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_realize_common	fdc.c	/^static void fdctrl_realize_common(DeviceState *dev, FDCtrl *fdctrl,$/;"	f	file:
fdctrl_reset	fdc.c	/^static void fdctrl_reset(FDCtrl *fdctrl, int do_irq)$/;"	f	file:
fdctrl_reset_irq	fdc.c	/^static void fdctrl_reset_irq(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_result_timer	fdc.c	/^static void fdctrl_result_timer(void *opaque)$/;"	f	file:
fdctrl_seek_to_next_sect	fdc.c	/^static int fdctrl_seek_to_next_sect(FDCtrl *fdctrl, FDrive *cur_drv)$/;"	f	file:
fdctrl_start_transfer	fdc.c	/^static void fdctrl_start_transfer(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_start_transfer_del	fdc.c	/^static void fdctrl_start_transfer_del(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_stop_transfer	fdc.c	/^static void fdctrl_stop_transfer(FDCtrl *fdctrl, uint8_t status0,$/;"	f	file:
fdctrl_to_command_phase	fdc.c	/^static void fdctrl_to_command_phase(FDCtrl *fdctrl)$/;"	f	file:
fdctrl_to_result_phase	fdc.c	/^static void fdctrl_to_result_phase(FDCtrl *fdctrl, int fifo_len)$/;"	f	file:
fdctrl_transfer_handler	fdc.c	/^static int fdctrl_transfer_handler (void *opaque, int nchan,$/;"	f	file:
fdctrl_unimplemented	fdc.c	/^static void fdctrl_unimplemented(FDCtrl *fdctrl, int direction)$/;"	f	file:
fdctrl_write	fdc.c	/^static void fdctrl_write (void *opaque, uint32_t reg, uint32_t value)$/;"	f	file:
fdctrl_write_ccr	fdc.c	/^static void fdctrl_write_ccr(FDCtrl *fdctrl, uint32_t value)$/;"	f	file:
fdctrl_write_data	fdc.c	/^static void fdctrl_write_data(FDCtrl *fdctrl, uint32_t value)$/;"	f	file:
fdctrl_write_dor	fdc.c	/^static void fdctrl_write_dor(FDCtrl *fdctrl, uint32_t value)$/;"	f	file:
fdctrl_write_mem	fdc.c	/^static void fdctrl_write_mem (void *opaque, hwaddr reg,$/;"	f	file:
fdctrl_write_rate	fdc.c	/^static void fdctrl_write_rate(FDCtrl *fdctrl, uint32_t value)$/;"	f	file:
fdctrl_write_tape	fdc.c	/^static void fdctrl_write_tape(FDCtrl *fdctrl, uint32_t value)$/;"	f	file:
fdrive_media_changed_needed	fdc.c	/^static bool fdrive_media_changed_needed(void *opaque)$/;"	f	file:
fdrive_media_rate_needed	fdc.c	/^static bool fdrive_media_rate_needed(void *opaque)$/;"	f	file:
fdrive_perpendicular_needed	fdc.c	/^static bool fdrive_perpendicular_needed(void *opaque)$/;"	f	file:
fdrive_post_load	fdc.c	/^static int fdrive_post_load(void *opaque, int version_id)$/;"	f	file:
feature_sizes	virtio-blk.c	/^static VirtIOFeature feature_sizes[] = {$/;"	v	file:
features	femu/nvme.h	/^    NvmeFeatureVal  features;$/;"	m	struct:FemuCtrl
features	nvme.h	/^    NvmeFeatureVal  features;$/;"	m	struct:NvmeCtrl
features	pflash_cfi01.c	/^    uint32_t features;$/;"	m	struct:PFlashCFI01	file:
femu_class_init	femu/femu.c	/^static void femu_class_init(ObjectClass *oc, void *data)$/;"	f	file:
femu_debug	femu/nvme.h	1484;"	d
femu_debug	femu/nvme.h	1487;"	d
femu_err	femu/nvme.h	1491;"	d
femu_exit	femu/femu.c	/^static void femu_exit(PCIDevice *pci_dev)$/;"	f	file:
femu_info	femu/femu.c	/^static const TypeInfo femu_info = {$/;"	v	file:
femu_log	femu/nvme.h	1494;"	d
femu_mode	femu/backend/dram.h	/^    int     femu_mode;$/;"	m	struct:SsdDramBackend
femu_mode	femu/nvme.h	/^    uint8_t         femu_mode;$/;"	m	struct:FemuCtrl
femu_nvme_rw_check_req	femu/nvme-util.c	/^uint16_t femu_nvme_rw_check_req(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f
femu_oc20_init_id_ctrl	femu/ocssd/oc20.c	/^static void femu_oc20_init_id_ctrl(FemuCtrl *n, NvmeNamespace *ns,$/;"	f	file:
femu_props	femu/femu.c	/^static Property femu_props[] = {$/;"	v	file:
femu_realize	femu/femu.c	/^static void femu_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
femu_register_types	femu/femu.c	/^static void femu_register_types(void)$/;"	f	file:
femu_ring_count	femu/lib/rte_ring.c	/^size_t femu_ring_count(struct rte_ring *ring)$/;"	f
femu_ring_create	femu/lib/rte_ring.c	/^struct rte_ring *femu_ring_create(enum femu_ring_type type, size_t count)$/;"	f
femu_ring_dequeue	femu/lib/rte_ring.c	/^size_t femu_ring_dequeue(struct rte_ring *ring, void **objs, size_t count)$/;"	f
femu_ring_enqueue	femu/lib/rte_ring.c	/^size_t femu_ring_enqueue(struct rte_ring *ring, void **objs, size_t count)$/;"	f
femu_ring_free	femu/lib/rte_ring.c	/^void femu_ring_free(struct rte_ring *ring)$/;"	f
femu_ring_type	femu/inc/rte_ring.h	/^enum femu_ring_type {$/;"	g
femu_vmstate	femu/femu.c	/^static const VMStateDescription femu_vmstate = {$/;"	v	file:
fguid	femu/nvme.h	/^    uint8_t     fguid[16];$/;"	m	struct:NvmeIdCtrl
fifo	fdc.c	/^    uint8_t *fifo;$/;"	m	struct:FDCtrl	file:
fifo_size	fdc.c	/^    int32_t fifo_size;$/;"	m	struct:FDCtrl	file:
filled	femu/bbssd/hmb_types.h	/^	HmbBitmap32 filled;$/;"	m	struct:HmbSharedBitmapEnt
flag	xen_blkif.h	/^    uint8_t        flag;             \/* nr_segments in request struct        *\/$/;"	m	struct:blkif_x86_32_request_discard
flag	xen_blkif.h	/^    uint8_t        flag;             \/* nr_segments in request struct        *\/$/;"	m	struct:blkif_x86_64_request_discard
flags	fdc.c	/^    FDiskFlags flags;$/;"	m	struct:FDrive	file:
flags	femu/inc/rte_ring.h	/^	int flags;               \/**< Flags supplied at creation. *\/$/;"	m	struct:rte_ring
flags	femu/nvme.h	/^    uint8_t     flags;$/;"	m	struct:NvmeCreateCq
flags	femu/nvme.h	/^    uint8_t     flags;$/;"	m	struct:NvmeCreateSq
flags	femu/nvme.h	/^    uint8_t     flags;$/;"	m	struct:NvmeDeleteQ
flags	femu/nvme.h	/^    uint8_t     flags;$/;"	m	struct:NvmeDsmCmd
flags	femu/nvme.h	/^    uint8_t     flags;$/;"	m	struct:NvmeIdentity
flags	femu/nvme.h	/^    uint8_t     flags;$/;"	m	struct:NvmeRwCmd
flags	femu/ocssd/oc12.h	/^    uint8_t     flags;$/;"	m	struct:Oc12BbtGet
flags	femu/ocssd/oc12.h	/^    uint8_t     flags;$/;"	m	struct:Oc12BbtSet
flags	femu/ocssd/oc12.h	/^    uint8_t     flags;$/;"	m	struct:Oc12DmCmd
flags	femu/ocssd/oc12.h	/^    uint8_t     flags;$/;"	m	struct:Oc12GetL2PTbl
flags	femu/ocssd/oc12.h	/^    uint8_t     flags;$/;"	m	struct:Oc12RwCmd
flags	femu/ocssd/oc20.h	/^    uint8_t  flags;$/;"	m	struct:Oc20DmCmd
flags	m25p80.c	/^    uint16_t flags;$/;"	m	struct:FlashPartInfo	file:
flash_contents	tc58128.c	/^    uint8_t *flash_contents;$/;"	m	struct:__anon54	file:
flash_erase	m25p80.c	/^static void flash_erase(Flash *s, int offset, FlashCMD cmd)$/;"	f	file:
flash_sync_area	m25p80.c	/^static inline void flash_sync_area(Flash *s, int64_t off, int64_t len)$/;"	f	file:
flash_sync_dirty	m25p80.c	/^static inline void flash_sync_dirty(Flash *s, int64_t newpage)$/;"	f	file:
flash_sync_page	m25p80.c	/^static void flash_sync_page(Flash *s, int page)$/;"	f	file:
flash_type	femu/nand/nand.h	/^    uint8_t flash_type;$/;"	m	struct:NandFlash
flash_type	femu/nvme.h	/^    uint8_t         flash_type;$/;"	m	struct:FemuCtrl
flash_write8	m25p80.c	/^void flash_write8(Flash *s, uint32_t addr, uint8_t data)$/;"	f	file:
flbas	femu/nvme.h	/^    uint8_t     flbas;$/;"	m	struct:NvmeIdNs
floppy_bus_create	fdc.c	/^static void floppy_bus_create(FDCtrl *fdc, FloppyBus *bus, DeviceState *dev)$/;"	f	file:
floppy_bus_info	fdc.c	/^static const TypeInfo floppy_bus_info = {$/;"	v	file:
floppy_drive_class_init	fdc.c	/^static void floppy_drive_class_init(ObjectClass *klass, void *data)$/;"	f	file:
floppy_drive_info	fdc.c	/^static const TypeInfo floppy_drive_info = {$/;"	v	file:
floppy_drive_properties	fdc.c	/^static Property floppy_drive_properties[] = {$/;"	v	file:
floppy_drive_realize	fdc.c	/^static void floppy_drive_realize(DeviceState *qdev, Error **errp)$/;"	f	file:
fmtype	femu/ocssd/oc12.h	/^    uint8_t     fmtype;$/;"	m	struct:Oc12IdGroup
fmtype	femu/ocssd/oc12.h	/^    uint8_t     fmtype;$/;"	m	struct:Oc12Params
fna	femu/nvme.h	/^    uint8_t     fna;$/;"	m	struct:NvmeIdCtrl
four_bytes_address_mode	m25p80.c	/^    bool four_bytes_address_mode;$/;"	m	struct:Flash	file:
fpg_sz	femu/ocssd/oc12.h	/^    uint16_t    fpg_sz;$/;"	m	struct:Oc12IdGroup
fpi	femu/nvme.h	/^    uint8_t     fpi;$/;"	m	struct:NvmeIdNs
fr	femu/nvme.h	/^    uint8_t     fr[8];$/;"	m	struct:NvmeIdCtrl
free_dram_backend	femu/backend/dram.c	/^void free_dram_backend(SsdDramBackend *b)$/;"	f
free_line_cnt	femu/bbssd/backup/ftl.h	/^    int free_line_cnt;$/;"	m	struct:line_mgmt
free_line_cnt	femu/bbssd/ftl.h	/^    int free_line_cnt;$/;"	m	struct:line_mgmt
free_line_list	femu/bbssd/backup/ftl.h	/^    QTAILQ_HEAD(free_line_list, line) free_line_list;$/;"	m	struct:line_mgmt
free_line_list	femu/bbssd/ftl.h	/^    QTAILQ_HEAD(free_line_list, line) free_line_list;$/;"	m	struct:line_mgmt
frl	femu/zns/zns.h	/^    uint32_t    frl;$/;"	m	struct:NvmeIdNsZoned
frmw	femu/nvme.h	/^    uint8_t     frmw;$/;"	m	struct:NvmeIdCtrl
frs1	femu/nvme.h	/^    uint8_t     frs1[8];$/;"	m	struct:NvmeFwSlotInfoLog
frs2	femu/nvme.h	/^    uint8_t     frs2[8];$/;"	m	struct:NvmeFwSlotInfoLog
frs3	femu/nvme.h	/^    uint8_t     frs3[8];$/;"	m	struct:NvmeFwSlotInfoLog
frs4	femu/nvme.h	/^    uint8_t     frs4[8];$/;"	m	struct:NvmeFwSlotInfoLog
frs5	femu/nvme.h	/^    uint8_t     frs5[8];$/;"	m	struct:NvmeFwSlotInfoLog
frs6	femu/nvme.h	/^    uint8_t     frs6[8];$/;"	m	struct:NvmeFwSlotInfoLog
frs7	femu/nvme.h	/^    uint8_t     frs7[8];$/;"	m	struct:NvmeFwSlotInfoLog
ftl_assert	femu/bbssd/backup/ftl.h	232;"	d
ftl_assert	femu/bbssd/backup/ftl.h	234;"	d
ftl_assert	femu/bbssd/ftl.h	232;"	d
ftl_assert	femu/bbssd/ftl.h	234;"	d
ftl_debug	femu/bbssd/backup/ftl.h	216;"	d
ftl_debug	femu/bbssd/backup/ftl.h	219;"	d
ftl_debug	femu/bbssd/ftl.h	216;"	d
ftl_debug	femu/bbssd/ftl.h	219;"	d
ftl_err	femu/bbssd/backup/ftl.h	223;"	d
ftl_err	femu/bbssd/ftl.h	223;"	d
ftl_log	femu/bbssd/backup/ftl.h	226;"	d
ftl_log	femu/bbssd/ftl.h	226;"	d
ftl_thread	femu/bbssd/backup/ftl.c	/^static void *ftl_thread(void *arg)$/;"	f	file:
ftl_thread	femu/bbssd/backup/ftl.h	/^    QemuThread ftl_thread;$/;"	m	struct:ssd
ftl_thread	femu/bbssd/ftl.c	/^static void *ftl_thread(void *arg)$/;"	f	file:
ftl_thread	femu/bbssd/ftl.h	/^    QemuThread ftl_thread;$/;"	m	struct:ssd
full_line_cnt	femu/bbssd/backup/ftl.h	/^    int full_line_cnt;$/;"	m	struct:line_mgmt
full_line_cnt	femu/bbssd/ftl.h	/^    int full_line_cnt;$/;"	m	struct:line_mgmt
full_line_list	femu/bbssd/backup/ftl.h	/^    QTAILQ_HEAD(full_line_list, line) full_line_list;$/;"	m	struct:line_mgmt
full_line_list	femu/bbssd/ftl.h	/^    QTAILQ_HEAD(full_line_list, line) full_line_list;$/;"	m	struct:line_mgmt
full_zones	femu/nvme.h	/^    QTAILQ_HEAD(, NvmeZone) full_zones;$/;"	m	struct:FemuCtrl
fuse	femu/nvme.h	/^    uint16_t    fuse   : 2;$/;"	m	struct:NvmeCmd
fuse	femu/ocssd/oc20.h	/^    uint16_t    fuse   :  2;$/;"	m	struct:Oc20RwCmd
fuses	femu/nvme.h	/^    uint16_t    fuses;$/;"	m	struct:NvmeIdCtrl
fwug	femu/nvme.h	/^    uint8_t     fwug;$/;"	m	struct:NvmeIdCtrl
g	femu/bbssd/backup/ftl.h	/^        } g;$/;"	m	union:ppa::__anon30	typeref:struct:ppa::__anon30::__anon31
g	femu/bbssd/ftl.h	/^        } g;$/;"	m	union:ppa::__anon24	typeref:struct:ppa::__anon24::__anon25
gc_endtime	femu/bbssd/backup/ftl.h	/^    uint64_t gc_endtime;$/;"	m	struct:nand_lun
gc_endtime	femu/bbssd/backup/ftl.h	/^    uint64_t gc_endtime;$/;"	m	struct:ssd_channel
gc_endtime	femu/bbssd/ftl.h	/^    uint64_t gc_endtime;$/;"	m	struct:nand_lun
gc_endtime	femu/bbssd/ftl.h	/^    uint64_t gc_endtime;$/;"	m	struct:ssd_channel
gc_read_page	femu/bbssd/backup/ftl.c	/^static void gc_read_page(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
gc_read_page	femu/bbssd/ftl.c	/^static void gc_read_page(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
gc_thres_lines	femu/bbssd/backup/ftl.h	/^    int gc_thres_lines;$/;"	m	struct:ssdparams
gc_thres_lines	femu/bbssd/ftl.h	/^    int gc_thres_lines;$/;"	m	struct:ssdparams
gc_thres_lines_high	femu/bbssd/backup/ftl.h	/^    int gc_thres_lines_high;$/;"	m	struct:ssdparams
gc_thres_lines_high	femu/bbssd/ftl.h	/^    int gc_thres_lines_high;$/;"	m	struct:ssdparams
gc_thres_pcent	femu/bbssd/backup/ftl.h	/^    double gc_thres_pcent;$/;"	m	struct:ssdparams
gc_thres_pcent	femu/bbssd/ftl.h	/^    double gc_thres_pcent;$/;"	m	struct:ssdparams
gc_thres_pcent_high	femu/bbssd/backup/ftl.h	/^    double gc_thres_pcent_high;$/;"	m	struct:ssdparams
gc_thres_pcent_high	femu/bbssd/ftl.h	/^    double gc_thres_pcent_high;$/;"	m	struct:ssdparams
gc_write_page	femu/bbssd/backup/ftl.c	/^static uint64_t gc_write_page(struct ssd *ssd, struct ppa *old_ppa)$/;"	f	file:
gc_write_page	femu/bbssd/ftl.c	/^static uint64_t gc_write_page(struct ssd *ssd, struct ppa *old_ppa)$/;"	f	file:
gcrt	femu/nvme.h	/^    int64_t                 gcrt;$/;"	m	struct:NvmeRequest
geo	femu/ocssd/oc20.h	/^    Oc20IdGeo  geo;$/;"	m	struct:Oc20NamespaceGeometry
get_addr_length	m25p80.c	/^static inline int get_addr_length(Flash *s)$/;"	f	file:
get_blk	femu/bbssd/backup/ftl.c	/^static inline struct nand_block *get_blk(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_blk	femu/bbssd/ftl.c	/^static inline struct nand_block *get_blk(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_blk_erase_latency	femu/nand/nand.h	/^static inline int64_t get_blk_erase_latency(int flash_type)$/;"	f
get_ch	femu/bbssd/backup/ftl.c	/^static inline struct ssd_channel *get_ch(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_ch	femu/bbssd/ftl.c	/^static inline struct ssd_channel *get_ch(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_ch_lun_chk	femu/ocssd/oc20.c	/^static int get_ch_lun_chk(char *chunkinfo, unsigned int *grp, unsigned int *lun,$/;"	f	file:
get_chunk_meta_index	femu/ocssd/oc20.c	/^static int get_chunk_meta_index(FemuCtrl *n, NvmeNamespace *ns,$/;"	f	file:
get_command	fdc.c	/^static const FDCtrlCommand *get_command(uint8_t cmd)$/;"	f	file:
get_cur_drv	fdc.c	/^static FDrive *get_cur_drv(FDCtrl *fdctrl)$/;"	f	file:
get_drv	fdc.c	/^static FDrive *get_drv(FDCtrl *fdctrl, int unit)$/;"	f	file:
get_fallback_drive_type	fdc.c	/^static FloppyDriveType get_fallback_drive_type(FDrive *drv)$/;"	f	file:
get_line	femu/bbssd/backup/ftl.c	/^static inline struct line *get_line(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_line	femu/bbssd/ftl.c	/^static inline struct line *get_line(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_log	femu/nvme.h	/^    uint16_t (*get_log)(struct FemuCtrl *, NvmeCmd *);$/;"	m	struct:FemuExtCtrlOps
get_lun	femu/bbssd/backup/ftl.c	/^static inline struct nand_lun *get_lun(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_lun	femu/bbssd/ftl.c	/^static inline struct nand_lun *get_lun(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_man	m25p80.c	/^static inline Manufacturer get_man(Flash *s)$/;"	f	file:
get_maptbl_ent	femu/bbssd/backup/ftl.c	/^static inline struct ppa get_maptbl_ent(struct ssd *ssd, uint64_t lpn)$/;"	f	file:
get_maptbl_ent	femu/bbssd/ftl.c	/^static inline struct ppa get_maptbl_ent(struct ssd *ssd, uint64_t lpn)$/;"	f	file:
get_new_page	femu/bbssd/backup/ftl.c	/^static struct ppa get_new_page(struct ssd *ssd)$/;"	f	file:
get_new_page	femu/bbssd/ftl.c	/^static struct ppa get_new_page(struct ssd *ssd)$/;"	f	file:
get_next_free_line	femu/bbssd/backup/ftl.c	/^static struct line *get_next_free_line(struct ssd *ssd)$/;"	f	file:
get_next_free_line	femu/bbssd/ftl.c	/^static struct line *get_next_free_line(struct ssd *ssd)$/;"	f	file:
get_page_read_latency	femu/nand/nand.h	/^static inline int64_t get_page_read_latency(int flash_type, int page_type)$/;"	f
get_page_type	femu/nand/nand.h	/^static inline uint8_t get_page_type(int flash_type, int pg)$/;"	f
get_page_write_latency	femu/nand/nand.h	/^static inline int64_t get_page_write_latency(int flash_type, int page_type)$/;"	f
get_pg	femu/bbssd/backup/ftl.c	/^static inline struct nand_page *get_pg(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_pg	femu/bbssd/ftl.c	/^static inline struct nand_page *get_pg(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_pl	femu/bbssd/backup/ftl.c	/^static inline struct nand_plane *get_pl(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_pl	femu/bbssd/ftl.c	/^static inline struct nand_plane *get_pl(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_pos	femu/nvme-io.c	/^static size_t get_pos(void *a)$/;"	f	file:
get_pri	femu/nvme-io.c	/^static pqueue_pri_t get_pri(void *a)$/;"	f	file:
get_rmap_ent	femu/bbssd/backup/ftl.c	/^static inline uint64_t get_rmap_ent(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_rmap_ent	femu/bbssd/ftl.c	/^static inline uint64_t get_rmap_ent(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
get_unsigned	femu/ocssd/oc20.c	/^static unsigned get_unsigned(char *string, const char *key, unsigned int *value)$/;"	f	file:
getpos	femu/inc/pqueue.h	/^    pqueue_get_pos_f getpos;    \/**< callback to get position of a node *\/$/;"	m	struct:pqueue_t
getpri	femu/inc/pqueue.h	/^    pqueue_get_pri_f getpri;    \/**< callback to get priority of a node *\/$/;"	m	struct:pqueue_t
gnd	nand.c	/^    uint8_t cle, ale, ce, wp, gnd;$/;"	m	struct:NANDFlashState	file:
groups	femu/ocssd/oc12.h	/^    Oc12IdGroup groups[4];$/;"	m	struct:Oc12IdCtrl
grp_len	femu/ocssd/oc20.h	/^    uint8_t grp_len;$/;"	m	struct:Oc20IdLBAF
grp_mask	femu/ocssd/oc20.h	/^    uint64_t grp_mask;$/;"	m	struct:Oc20AddrF
grp_offset	femu/ocssd/oc20.h	/^    uint8_t  grp_offset;$/;"	m	struct:Oc20AddrF
guard_tag	femu/nvme.h	/^    uint16_t guard_tag;$/;"	m	struct:NvmeDifTuple
guess_chs_for_size	hd-geometry.c	/^static void guess_chs_for_size(BlockBackend *blk,$/;"	f	file:
guess_disk_lchs	hd-geometry.c	/^static int guess_disk_lchs(BlockBackend *blk,$/;"	f	file:
guest_notifier	femu/nvme.h	/^    EventNotifier guest_notifier;$/;"	m	struct:NvmeCQueue
guid	femu/nvme.h	/^    uint8_t     guid[16];$/;"	m	struct:NvmeRangeType
handle	xen_blkif.h	/^    blkif_vdev_t   handle;           \/* only for read\/write requests         *\/$/;"	m	struct:blkif_x86_32_request
handle	xen_blkif.h	/^    blkif_vdev_t   handle;           \/* only for read\/write requests         *\/$/;"	m	struct:blkif_x86_32_request_discard
handle	xen_blkif.h	/^    blkif_vdev_t   handle;           \/* only for read\/write requests         *\/$/;"	m	struct:blkif_x86_64_request
handle	xen_blkif.h	/^    blkif_vdev_t   handle;           \/* only for read\/write requests         *\/$/;"	m	struct:blkif_x86_64_request_discard
handle_address	tc58128.c	/^static void handle_address(tc58128_dev * dev, uint8_t data)$/;"	f	file:
handle_command	tc58128.c	/^static void handle_command(tc58128_dev * dev, uint8_t command)$/;"	f	file:
handle_read	tc58128.c	/^static uint8_t handle_read(tc58128_dev * dev)$/;"	f	file:
handler	fdc.c	/^    void (*handler)(FDCtrl *fdctrl, int direction);$/;"	m	struct:FDCtrlCommand	file:
handlers	fdc.c	/^static const FDCtrlCommand handlers[] = {$/;"	v	file:
hctma	femu/nvme.h	/^    uint16_t    hctma;$/;"	m	struct:NvmeIdCtrl
hd_bios_chs_auto_trans	hd-geometry.c	/^int hd_bios_chs_auto_trans(uint32_t cyls, uint32_t heads, uint32_t secs)$/;"	f
hd_geometry_guess	hd-geometry.c	/^void hd_geometry_guess(BlockBackend *blk,$/;"	f
hdr	virtio-blk.c	/^    struct sg_io_hdr hdr;$/;"	m	struct:__anon55	typeref:struct:__anon55::sg_io_hdr	file:
head	fdc.c	/^    uint8_t head;$/;"	m	struct:FDrive	file:
head	femu/inc/rte_ring.h	/^	volatile uint32_t head;  \/**< Prod\/consumer head. *\/$/;"	m	struct:rte_ring_headtail
head	femu/nvme.h	/^    uint32_t    head;$/;"	m	struct:NvmeCQueue
head	femu/nvme.h	/^    uint32_t    head;$/;"	m	struct:NvmeSQueue
head	hd-geometry.c	/^        uint8_t head;               \/* starting head *\/$/;"	m	struct:partition	file:
head	nvme.h	/^    uint32_t    head;$/;"	m	struct:NvmeCQueue
head	nvme.h	/^    uint32_t    head;$/;"	m	struct:NvmeSQueue
heads_ST_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr* heads_ST_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
heads_ST_size	femu/bbssd/hmb_types.h	/^	uint64_t       heads_ST_size;$/;"	m	struct:HmbSpaceMgmtCtrl
heads_cnt	femu/bbssd/hmb_types.h	/^	uint32_t heads_cnt;$/;"	m	struct:HmbSpaceMgmtCtrl
heads_hash_bit	femu/bbssd/hmb_types.h	/^	uint8_t  heads_hash_bit; \/* for hashing: # hash bits *\/$/;"	m	struct:HmbSpaceMgmtCtrl
heads_split_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr** heads_split_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
heads_split_num	femu/bbssd/hmb_types.h	/^	uint16_t        heads_split_num;$/;"	m	struct:HmbSpaceMgmtCtrl
heads_split_unit	femu/bbssd/hmb_types.h	/^	uint32_t        heads_split_unit;$/;"	m	struct:HmbSpaceMgmtCtrl
heap_storage	nvme.h	/^    void            *heap_storage;$/;"	m	struct:NvmeCtrl
hmb_calloc	femu/bbssd/hmb.c	/^HmbMappedAddr *hmb_calloc(uint64_t size)$/;"	f
hmb_debug	femu/bbssd/hmb_debug.h	57;"	d
hmb_debug_file_name	femu/bbssd/hmb_debug.c	/^bool hmb_debug_file_name(const char *idx, const char *format_filename, ...)$/;"	f
hmb_enable	femu/bbssd/hmb.c	/^bool hmb_enable(uint32_t page_size, uint32_t dw11,$/;"	f
hmb_free	femu/bbssd/hmb.c	/^void hmb_free(HmbMappedAddr *addr)$/;"	f
hmb_get_max_allocable_size_byte	femu/bbssd/hmb_internal.c	/^int64_t hmb_get_max_allocable_size_byte(void)$/;"	f
hmb_get_segEnt_by_id	femu/bbssd/hmb_internal.c	/^HmbSegEnt *hmb_get_segEnt_by_id(bool for_write, int32_t id)$/;"	f
hmb_get_seg_by_id	femu/bbssd/hmb_internal.c	/^HmbSeg *hmb_get_seg_by_id(int32_t id)$/;"	f
hmb_get_total_allocable_size_byte	femu/bbssd/hmb_internal.c	/^int64_t hmb_get_total_allocable_size_byte(void)$/;"	f
hmb_gettid	femu/bbssd/hmb_debug.c	/^pid_t hmb_gettid(void)$/;"	f
hmb_hashing	femu/bbssd/hmb_internal.c	/^uint32_t hmb_hashing(uint64_t value, uint8_t bits)$/;"	f
hmb_init	femu/bbssd/hmb.c	/^bool hmb_init(void *dev_pci, void *nvme_ctrl)$/;"	f
hmb_init_structure	femu/bbssd/hmb.c	/^bool hmb_init_structure(void)$/;"	f
hmb_is_addr_remapped	femu/bbssd/hmb_internal.c	/^bool hmb_is_addr_remapped; \/* extern-ed in "hmb_internal.h" *\/$/;"	v
hmb_is_reallocated	femu/bbssd/hmb.c	/^bool hmb_is_reallocated;$/;"	v
hmb_malloc	femu/bbssd/hmb.c	/^HmbMappedAddr *hmb_malloc(uint64_t size)$/;"	f
hmb_mapInfo_delete	femu/bbssd/hmb_internal.c	/^bool hmb_mapInfo_delete(HmbMapInfo *target)$/;"	f
hmb_mapInfo_free	femu/bbssd/hmb_internal.c	/^void hmb_mapInfo_free(HmbMapInfo *target)$/;"	f
hmb_mapInfo_get_hashed_idx_by_mapped_addr	femu/bbssd/hmb_internal.c	/^int64_t hmb_mapInfo_get_hashed_idx_by_mapped_addr(HmbMappedAddr *addr)$/;"	f
hmb_mapInfo_get_hashed_idx_by_obj	femu/bbssd/hmb_internal.c	/^int64_t hmb_mapInfo_get_hashed_idx_by_obj(HmbMapInfo *target)$/;"	f
hmb_mapInfo_init	femu/bbssd/hmb_internal.c	/^bool hmb_mapInfo_init(uint64_t n)$/;"	f
hmb_mapInfo_insert	femu/bbssd/hmb_internal.c	/^bool hmb_mapInfo_insert(HmbMapInfo *target)$/;"	f
hmb_mapInfo_new	femu/bbssd/hmb_internal.c	/^HmbMapInfo *hmb_mapInfo_new(void)$/;"	f
hmb_mapInfo_search	femu/bbssd/hmb_internal.c	/^HmbMapInfo *hmb_mapInfo_search(HmbMappedAddr *addr)$/;"	f
hmb_meta_get	femu/bbssd/hmb_internal.c	/^HmbMeta *hmb_meta_get(bool for_write)$/;"	f
hmb_meta_init	femu/bbssd/hmb_internal.c	/^bool hmb_meta_init(void)$/;"	f
hmb_printf	femu/bbssd/hmb_debug.c	/^void hmb_printf(const char *file, int line, const char *func, const char *format, ...)$/;"	f
hmb_read	femu/bbssd/hmb_internal.c	/^bool hmb_read(HmbHostAddr host_addr, void *dev_addr, uint64_t len)$/;"	f
hmb_segEmpty_delete	femu/bbssd/hmb_internal.c	/^bool hmb_segEmpty_delete(HmbSeg *segment, HmbSegEmpty *target)$/;"	f
hmb_segEmpty_emptying	femu/bbssd/hmb_internal.c	/^bool hmb_segEmpty_emptying(HmbSeg *segment, uint32_t offset, uint32_t size)$/;"	f
hmb_segEmpty_filling	femu/bbssd/hmb_internal.c	/^bool hmb_segEmpty_filling(HmbSeg *segment, HmbSegEmpty *target, uint32_t size)$/;"	f
hmb_segEmpty_free	femu/bbssd/hmb_internal.c	/^void hmb_segEmpty_free(HmbSegEmpty *target)$/;"	f
hmb_segEmpty_get_head	femu/bbssd/hmb_internal.c	/^HmbSegEmpty *hmb_segEmpty_get_head(HmbSeg *segment)$/;"	f
hmb_segEmpty_insert	femu/bbssd/hmb_internal.c	/^bool hmb_segEmpty_insert(HmbSeg *segment, HmbSegEmpty *target)$/;"	f
hmb_segEmpty_insert_tail	femu/bbssd/hmb_internal.c	/^bool hmb_segEmpty_insert_tail(HmbSeg *segment, HmbSegEmpty *target)$/;"	f
hmb_segEmpty_new	femu/bbssd/hmb_internal.c	/^HmbSegEmpty *hmb_segEmpty_new(void)$/;"	f
hmb_segEmpty_search	femu/bbssd/hmb_internal.c	/^HmbSegEmpty *hmb_segEmpty_search(uint32_t offset)$/;"	f
hmb_segEmpty_search_max	femu/bbssd/hmb_internal.c	/^HmbSegEmpty *hmb_segEmpty_search_max(void)$/;"	f
hmb_segEmpty_search_proper	femu/bbssd/hmb_internal.c	/^HmbSegEmpty *hmb_segEmpty_search_proper(uint64_t size)$/;"	f
hmb_segEmpty_set_head	femu/bbssd/hmb_internal.c	/^bool hmb_segEmpty_set_head(HmbSeg *segment, HmbSegEmpty *target)$/;"	f
hmb_segEnt_ST_get_by_idx	femu/bbssd/hmb_internal.c	/^HmbSplitTable *hmb_segEnt_ST_get_by_idx(bool for_write, int16_t idx)$/;"	f
hmb_segEnt_bm_empty_delete	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_bm_empty_delete(uint32_t idx)$/;"	f
hmb_segEnt_bm_empty_get_by_idx	femu/bbssd/hmb_internal.c	/^HmbDLL* hmb_segEnt_bm_empty_get_by_idx(uint32_t idx)$/;"	f
hmb_segEnt_bm_empty_get_head	femu/bbssd/hmb_internal.c	/^int32_t* hmb_segEnt_bm_empty_get_head(void)$/;"	f
hmb_segEnt_bm_empty_insert	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_bm_empty_insert(uint32_t idx)$/;"	f
hmb_segEnt_bm_empty_set_head	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_bm_empty_set_head(uint32_t idx)$/;"	f
hmb_segEnt_bm_fill_overflowed	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_bm_fill_overflowed(uint32_t from, uint32_t to)$/;"	f
hmb_segEnt_bm_get_empty	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_bm_get_empty(uint32_t *val)$/;"	f
hmb_segEnt_bm_set	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_bm_set(bool enable, uint32_t val)$/;"	f
hmb_segEnt_get_max_cnt	femu/bbssd/hmb_internal.c	/^uint32_t hmb_segEnt_get_max_cnt(void)$/;"	f
hmb_segEnt_get_new_id	femu/bbssd/hmb_internal.c	/^int32_t hmb_segEnt_get_new_id(void)$/;"	f
hmb_segEnt_init	femu/bbssd/hmb_internal.c	/^bool hmb_segEnt_init(void)$/;"	f
hmb_seg_init	femu/bbssd/hmb_internal.c	/^bool hmb_seg_init(void)$/;"	f
hmb_seg_init_empty	femu/bbssd/hmb_internal.c	/^bool hmb_seg_init_empty(HmbSeg *segment)$/;"	f
hmb_seg_update_max_allocable_size	femu/bbssd/hmb_internal.c	/^bool hmb_seg_update_max_allocable_size(HmbSeg *segment)$/;"	f
hmb_spaceMgmt_RCOnly_sorted_delete	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RCOnly_sorted_delete(uint32_t idx)$/;"	f
hmb_spaceMgmt_RCOnly_sorted_get_head_idx	femu/bbssd/hmb_spaceMgmt.c	/^int32_t hmb_spaceMgmt_RCOnly_sorted_get_head_idx(void)$/;"	f
hmb_spaceMgmt_RCOnly_sorted_insert_tail	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RCOnly_sorted_insert_tail(uint32_t idx)$/;"	f
hmb_spaceMgmt_RCOnly_sorted_set_head	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RCOnly_sorted_set_head(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_caching	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_caching(uint64_t lpn, uint32_t n_lb, bool do_data_copy, int64_t *expire_time)$/;"	f
hmb_spaceMgmt_RC_evict	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_evict(uint32_t n_evict, int64_t *expire_time)$/;"	f
hmb_spaceMgmt_RC_evict_LRU	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_evict_LRU(uint32_t n_evict, int64_t *expire_time)$/;"	f
hmb_spaceMgmt_RC_reorder	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_reorder(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_reorder_LRU	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_reorder_LRU(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_sorted_delete	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_sorted_delete(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_sorted_get_head_idx	femu/bbssd/hmb_spaceMgmt.c	/^int32_t hmb_spaceMgmt_RC_sorted_get_head_idx(void)$/;"	f
hmb_spaceMgmt_RC_sorted_insert_after	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_sorted_insert_after(uint32_t idx, uint32_t idx_after)$/;"	f
hmb_spaceMgmt_RC_sorted_insert_tail	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_sorted_insert_tail(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_sorted_set_head	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_sorted_set_head(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_update	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_update(uint32_t idx)$/;"	f
hmb_spaceMgmt_RC_update_LRU	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_RC_update_LRU(uint32_t idx)$/;"	f
hmb_spaceMgmt_WB_flush	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_flush(uint32_t n_lb, void *_ssd, int64_t *expire_time)$/;"	f
hmb_spaceMgmt_WB_flush_explicit	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_flush_explicit(uint32_t n_lb, void *ssd, int64_t *expire_time)$/;"	f
hmb_spaceMgmt_WB_flush_implicit	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_flush_implicit(void *ssd, int64_t *expire_time)$/;"	f
hmb_spaceMgmt_WB_flusher	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_WB_flusher(void *opaque)$/;"	f
hmb_spaceMgmt_WB_sorted_delete	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_sorted_delete(int32_t urgency, uint32_t idx)$/;"	f
hmb_spaceMgmt_WB_sorted_delete_head	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_sorted_delete_head(int32_t urgency)$/;"	f
hmb_spaceMgmt_WB_sorted_get_head	femu/bbssd/hmb_spaceMgmt.c	/^int32_t* hmb_spaceMgmt_WB_sorted_get_head(bool for_write, int32_t urgency)$/;"	f
hmb_spaceMgmt_WB_sorted_get_head_idx	femu/bbssd/hmb_spaceMgmt.c	/^int32_t hmb_spaceMgmt_WB_sorted_get_head_idx(int32_t urgency)$/;"	f
hmb_spaceMgmt_WB_sorted_insert_tail	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_sorted_insert_tail(int32_t urgency, uint32_t idx)$/;"	f
hmb_spaceMgmt_WB_sorted_set_head	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_WB_sorted_set_head(int32_t urgency, uint32_t idx)$/;"	f
hmb_spaceMgmt_bm_empty_delete	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_empty_delete(uint32_t idx)$/;"	f
hmb_spaceMgmt_bm_empty_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbDLL *hmb_spaceMgmt_bm_empty_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_bm_empty_get_head	femu/bbssd/hmb_spaceMgmt.c	/^int32_t *hmb_spaceMgmt_bm_empty_get_head(bool for_write)$/;"	f
hmb_spaceMgmt_bm_empty_insert	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_empty_insert(uint32_t idx) $/;"	f
hmb_spaceMgmt_bm_empty_set_head	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_empty_set_head(uint32_t idx)$/;"	f
hmb_spaceMgmt_bm_fill_overflowed	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_fill_overflowed(uint32_t from, uint32_t to)$/;"	f
hmb_spaceMgmt_bm_get_empty	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_get_empty(uint32_t *val)$/;"	f
hmb_spaceMgmt_bm_init	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_init(uint32_t n_parts)$/;"	f
hmb_spaceMgmt_bm_set	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_bm_set(bool enable, uint32_t val)$/;"	f
hmb_spaceMgmt_debug_ssd_delay_state	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_debug_ssd_delay_state(void)$/;"	f
hmb_spaceMgmt_entry_init	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_entry_init(void)$/;"	f
hmb_spaceMgmt_hash_calc_bits	femu/bbssd/hmb_spaceMgmt.c	/^uint8_t hmb_spaceMgmt_hash_calc_bits(uint32_t max_entries)$/;"	f
hmb_spaceMgmt_hash_verify	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_hash_verify(uint32_t idx)$/;"	f
hmb_spaceMgmt_heads_ST_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSplitTable *hmb_spaceMgmt_heads_ST_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_heads_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbHeads *hmb_spaceMgmt_heads_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_heads_get_size	femu/bbssd/hmb_spaceMgmt.c	/^uint32_t hmb_spaceMgmt_heads_get_size(void)$/;"	f
hmb_spaceMgmt_heads_init	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_heads_init(uint8_t n_bits)$/;"	f
hmb_spaceMgmt_heap_rw	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_heap_rw(bool is_write, uint64_t offset, uint64_t len, void *buf)$/;"	f
hmb_spaceMgmt_init	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_init(void)$/;"	f
hmb_spaceMgmt_init_cache_unit	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_init_cache_unit(uint32_t cache_unit)$/;"	f
hmb_spaceMgmt_lba_to_lpn	femu/bbssd/hmb_spaceMgmt.c	/^uint64_t hmb_spaceMgmt_lba_to_lpn(uint64_t lba)$/;"	f
hmb_spaceMgmt_lock	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_lock(void)$/;"	f
hmb_spaceMgmt_lpn_to_bytes	femu/bbssd/hmb_spaceMgmt.c	/^uint64_t hmb_spaceMgmt_lpn_to_bytes(uint64_t lpn)$/;"	f
hmb_spaceMgmt_lpn_to_lba	femu/bbssd/hmb_spaceMgmt.c	/^uint64_t hmb_spaceMgmt_lpn_to_lba(uint64_t lpn)$/;"	f
hmb_spaceMgmt_mappedAddr_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^void *hmb_spaceMgmt_mappedAddr_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_mappedAddr_get_by_lpn	femu/bbssd/hmb_spaceMgmt.c	/^void *hmb_spaceMgmt_mappedAddr_get_by_lpn(bool for_write, uint32_t lpn)$/;"	f
hmb_spaceMgmt_nlb_to_nlp	femu/bbssd/hmb_spaceMgmt.c	/^uint32_t hmb_spaceMgmt_nlb_to_nlp(uint32_t n_lb, uint64_t slba)$/;"	f
hmb_spaceMgmt_nlp_to_nlb	femu/bbssd/hmb_spaceMgmt.c	/^uint32_t hmb_spaceMgmt_nlp_to_nlb(uint32_t n_lp)$/;"	f
hmb_spaceMgmt_shared_delete_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_delete_by_idx(uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_get_head_by_lpn	femu/bbssd/hmb_spaceMgmt.c	/^HmbSharedEnt *hmb_spaceMgmt_shared_get_head_by_lpn(bool for_write, uint64_t lpn)$/;"	f
hmb_spaceMgmt_shared_get_new_entry_idx	femu/bbssd/hmb_spaceMgmt.c	/^int32_t hmb_spaceMgmt_shared_get_new_entry_idx(uint64_t lpn)$/;"	f
hmb_spaceMgmt_shared_insert	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_insert(uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_insert_LRU	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_insert_LRU(uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_insert_after	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_insert_after(uint32_t idx, uint32_t idx_after)$/;"	f
hmb_spaceMgmt_shared_insert_tail	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_insert_tail(uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_is_reusable_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_is_reusable_by_idx(uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_is_reusable_by_lpn	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_is_reusable_by_lpn(uint64_t lpn)$/;"	f
hmb_spaceMgmt_shared_set_dirty	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_shared_set_dirty(bool to_dirty, uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_set_enable	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_shared_set_enable(bool enable, uint32_t idx)$/;"	f
hmb_spaceMgmt_shared_set_head	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_shared_set_head(uint32_t idx)$/;"	f
hmb_spaceMgmt_sorted_ST_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSplitTable *hmb_spaceMgmt_sorted_ST_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_sorted_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSortedEnt *hmb_spaceMgmt_sorted_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_sorted_init	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_sorted_init(uint32_t n_parts)$/;"	f
hmb_spaceMgmt_table_ST_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSplitTable *hmb_spaceMgmt_table_ST_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_table_bm_ST_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSplitTable *hmb_spaceMgmt_table_bm_ST_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_table_bm_fill_overflowed	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_table_bm_fill_overflowed(uint32_t idx, uint32_t from, uint32_t to)$/;"	f
hmb_spaceMgmt_table_bm_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSharedBitmapEnt *hmb_spaceMgmt_table_bm_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_table_bm_isCached_fully	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_table_bm_isCached_fully(uint32_t idx)$/;"	f
hmb_spaceMgmt_table_bm_isCached_partially	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_table_bm_isCached_partially(uint32_t idx, uint32_t idx_internal)$/;"	f
hmb_spaceMgmt_table_bm_set	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_table_bm_set(bool enable, uint32_t idx, uint32_t idx_internal)$/;"	f
hmb_spaceMgmt_table_bm_set_fully	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_table_bm_set_fully(bool enable, uint32_t idx)$/;"	f
hmb_spaceMgmt_table_get_by_idx	femu/bbssd/hmb_spaceMgmt.c	/^HmbSharedEnt *hmb_spaceMgmt_table_get_by_idx(bool for_write, uint32_t idx)$/;"	f
hmb_spaceMgmt_table_get_by_lpn	femu/bbssd/hmb_spaceMgmt.c	/^HmbSharedEnt *hmb_spaceMgmt_table_get_by_lpn(bool for_write, uint64_t lpn)$/;"	f
hmb_spaceMgmt_table_get_cache_num	femu/bbssd/hmb_spaceMgmt.c	/^uint32_t hmb_spaceMgmt_table_get_cache_num(void)$/;"	f
hmb_spaceMgmt_table_is_full	femu/bbssd/hmb_spaceMgmt.c	/^bool hmb_spaceMgmt_table_is_full(void)$/;"	f
hmb_spaceMgmt_table_max_entries	femu/bbssd/hmb_spaceMgmt.c	/^uint32_t hmb_spaceMgmt_table_max_entries(void)$/;"	f
hmb_spaceMgmt_table_nCached_inc	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_table_nCached_inc(bool is_inc)$/;"	f
hmb_spaceMgmt_table_nDirty_inc	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_table_nDirty_inc(bool is_inc)$/;"	f
hmb_spaceMgmt_unlock	femu/bbssd/hmb_spaceMgmt.c	/^void hmb_spaceMgmt_unlock(void)$/;"	f
hmb_spaceMgmt_victimAll_get	femu/bbssd/hmb_spaceMgmt.c	/^int32_t *hmb_spaceMgmt_victimAll_get(bool for_write)$/;"	f
hmb_spaceMgmt_victimRc_get	femu/bbssd/hmb_spaceMgmt.c	/^int32_t *hmb_spaceMgmt_victimRc_get(bool for_write)$/;"	f
hmb_timeDbg_get_time_ns	femu/bbssd/hmb_utils.c	/^uint64_t hmb_timeDbg_get_time_ns(HmbTime *t)$/;"	f
hmb_timeDbg_get_time_s	femu/bbssd/hmb_utils.c	/^double hmb_timeDbg_get_time_s(HmbTime *t)$/;"	f
hmb_timeDbg_record	femu/bbssd/hmb_utils.c	/^void hmb_timeDbg_record(HmbTime *t, bool is_start)$/;"	f
hmb_timeDbg_time	femu/bbssd/hmb_utils.c	/^uint64_t hmb_timeDbg_time(void)$/;"	f
hmb_tkill	femu/bbssd/hmb_debug.c	/^bool hmb_tkill(int tid, int sig)$/;"	f
hmb_write	femu/bbssd/hmb_internal.c	/^bool hmb_write(HmbHostAddr host_addr, void *dev_addr, uint64_t len)$/;"	f
hmmin	femu/nvme.h	/^    uint32_t    hmmin;$/;"	m	struct:NvmeIdCtrl
hmpre	femu/nvme.h	/^    uint32_t    hmpre;$/;"	m	struct:NvmeIdCtrl
host_addr	femu/bbssd/hmb_types.h	/^	HmbHostAddr        host_addr;$/;"	m	struct:HmbSeg
host_memory_buffer	nvme.h	/^	uint32_t host_memory_buffer;$/;"	m	struct:NvmeFeatureVal
host_read_commands	femu/nvme.h	/^    uint64_t    host_read_commands[2];$/;"	m	struct:NvmeSmartLog
host_timestamp	nvme.h	/^    uint64_t    host_timestamp;                 \/* Timestamp sent by the host *\/$/;"	m	struct:NvmeCtrl
host_write_commands	femu/nvme.h	/^    uint64_t    host_write_commands[2];$/;"	m	struct:NvmeSmartLog
id	femu/bbssd/backup/ftl.h	/^    int id;  \/* line id, the same as corresponding block id *\/$/;"	m	struct:line
id	femu/bbssd/ftl.h	/^    int id;  \/* line id, the same as corresponding block id *\/$/;"	m	struct:line
id	femu/bbssd/hmb_types.h	/^	int16_t            id; $/;"	m	struct:HmbSeg
id	femu/bbssd/hmb_types.h	/^	int32_t  id;		 \/* 4bytes (acc: 4) *\/$/;"	m	struct:HmbSegEnt
id	femu/nvme.h	/^    uint32_t        id;$/;"	m	struct:NvmeNamespace
id	m25p80.c	/^    uint8_t id[SPI_NOR_MAX_ID_LEN];$/;"	m	struct:FlashPartInfo	file:
id	xen_blkif.h	/^    uint64_t        id;              \/* copied from request *\/$/;"	m	struct:blkif_x86_32_response
id	xen_blkif.h	/^    uint64_t       __attribute__((__aligned__(8))) id;$/;"	m	struct:blkif_x86_64_request
id	xen_blkif.h	/^    uint64_t       __attribute__((__aligned__(8))) id;$/;"	m	struct:blkif_x86_64_request_discard
id	xen_blkif.h	/^    uint64_t       __attribute__((__aligned__(8))) id;$/;"	m	struct:blkif_x86_64_response
id	xen_blkif.h	/^    uint64_t       id;               \/* private guest value, echoed in resp  *\/$/;"	m	struct:blkif_x86_32_request
id	xen_blkif.h	/^    uint64_t       id;               \/* private guest value, echoed in resp  *\/$/;"	m	struct:blkif_x86_32_request_discard
id_ctrl	femu/nvme.h	/^    NvmeIdCtrl      id_ctrl;$/;"	m	struct:FemuCtrl
id_ctrl	femu/ocssd/oc12.h	/^    Oc12IdCtrl  id_ctrl;$/;"	m	struct:Oc12Ctrl
id_ctrl	femu/ocssd/oc20.h	/^    Oc20NamespaceGeometry id_ctrl;$/;"	m	struct:Oc20Namespace
id_ctrl	nvme.h	/^    NvmeIdCtrl      id_ctrl;$/;"	m	struct:NvmeCtrl
id_len	m25p80.c	/^    uint8_t id_len;$/;"	m	struct:FlashPartInfo	file:
id_ns	femu/nvme.h	/^    NvmeIdNs        id_ns;$/;"	m	struct:NvmeNamespace
id_ns	nvme-ns.h	/^    NvmeIdNs     id_ns;$/;"	m	struct:NvmeNamespace
id_ns_zoned	femu/nvme.h	/^    NvmeIdNsZoned   *id_ns_zoned;$/;"	m	struct:FemuCtrl
ident0	pflash_cfi01.c	/^    uint16_t ident0;$/;"	m	struct:PFlashCFI01	file:
ident0	pflash_cfi02.c	/^    uint16_t ident0;$/;"	m	struct:PFlashCFI02	file:
ident1	pflash_cfi01.c	/^    uint16_t ident1;$/;"	m	struct:PFlashCFI01	file:
ident1	pflash_cfi02.c	/^    uint16_t ident1;$/;"	m	struct:PFlashCFI02	file:
ident2	pflash_cfi01.c	/^    uint16_t ident2;$/;"	m	struct:PFlashCFI01	file:
ident2	pflash_cfi02.c	/^    uint16_t ident2;$/;"	m	struct:PFlashCFI02	file:
ident3	pflash_cfi01.c	/^    uint16_t ident3;$/;"	m	struct:PFlashCFI01	file:
ident3	pflash_cfi02.c	/^    uint16_t ident3;$/;"	m	struct:PFlashCFI02	file:
ieee	femu/nvme.h	/^    uint8_t     ieee[3];$/;"	m	struct:NvmeIdCtrl
imp_open_zones	femu/nvme.h	/^    QTAILQ_HEAD(, NvmeZone) imp_open_zones;$/;"	m	struct:FemuCtrl
index	femu/nvme.h	/^    int             index;$/;"	m	struct:NvmePollerThreadArgument
init	femu/nvme.h	/^    void     (*init)(struct FemuCtrl *, Error **);$/;"	m	struct:FemuExtCtrlOps
init_dev	tc58128.c	/^static void init_dev(tc58128_dev * dev, const char *filename)$/;"	f	file:
init_dram_backend	femu/backend/dram.c	/^int init_dram_backend(SsdDramBackend **mbe, int64_t nbytes)$/;"	f
init_mlc_page_pairing	femu/nand/nand.c	/^static void init_mlc_page_pairing(FemuCtrl *n)$/;"	f	file:
init_nand_flash	femu/nand/nand.c	/^int init_nand_flash(void *opaque)$/;"	f
init_nand_flash_timing	femu/nand/nand.c	/^static void init_nand_flash_timing(FemuCtrl *n)$/;"	f	file:
init_qlc_page_pairing	femu/nand/nand.c	/^static void init_qlc_page_pairing(FemuCtrl *n)$/;"	f	file:
init_tlc_page_pairing	femu/nand/nand.c	/^static void init_tlc_page_pairing(FemuCtrl *n)$/;"	f	file:
inited	femu/bbssd/hmb_types.h	/^	bool inited;$/;"	m	struct:HmbSpaceMgmtCtrl
int_coalescing	femu/nvme.h	/^    uint32_t    int_coalescing;$/;"	m	struct:NvmeFeatureVal
int_meta_size	femu/ocssd/oc12.h	/^    uint8_t     int_meta_size;       \/\/ # of bytes for "internal" metadata$/;"	m	struct:Oc12Ctrl
int_vector_config	femu/nvme.h	/^    uint32_t    *int_vector_config;$/;"	m	struct:NvmeFeatureVal
intc	femu/nvme.h	/^    uint8_t     intc;$/;"	m	struct:FemuCtrl
intc	femu/nvme.h	/^    uint8_t  intc;$/;"	m	struct:NvmeParams
intc_thresh	femu/nvme.h	/^    uint8_t     intc_thresh;$/;"	m	struct:FemuCtrl
intc_thresh	femu/nvme.h	/^    uint8_t  intc_thresh;$/;"	m	struct:NvmeParams
intc_time	femu/nvme.h	/^    uint8_t     intc_time;$/;"	m	struct:FemuCtrl
intc_time	femu/nvme.h	/^    uint8_t  intc_time;$/;"	m	struct:NvmeParams
intmc	femu/nvme.h	/^    uint32_t    intmc;$/;"	m	struct:NvmeBar
intms	femu/nvme.h	/^    uint32_t    intms;$/;"	m	struct:NvmeBar
io	nand.c	/^    uint8_t io[MAX_PAGE + MAX_OOB + 0x400];$/;"	m	struct:NANDFlashState	file:
io_cmd	femu/nvme.h	/^    uint16_t (*io_cmd)(struct FemuCtrl *, NvmeNamespace *, NvmeCmd *, NvmeRequest *);$/;"	m	struct:FemuExtCtrlOps
io_req	femu/nvme.h	/^    NvmeRequest *io_req;$/;"	m	struct:NvmeSQueue
io_req	nvme.h	/^    NvmeRequest *io_req;$/;"	m	struct:NvmeSQueue
ioaddr	nand.c	/^    uint8_t *ioaddr;$/;"	m	struct:NANDFlashState	file:
ioaddr_vmstate	nand.c	/^    uint32_t ioaddr_vmstate;$/;"	m	struct:NANDFlashState	file:
iocs	femu/nvme.h	/^    const uint32_t  *iocs;$/;"	m	struct:FemuCtrl
iocs	femu/nvme.h	/^    uint32_t    iocs[256];$/;"	m	struct:NvmeEffectsLog
iolen	nand.c	/^    int iolen;$/;"	m	struct:NANDFlashState	file:
iomem	fdc.c	/^    MemoryRegion iomem;$/;"	m	struct:FDCtrl	file:
iomem	femu/nvme.h	/^    MemoryRegion    iomem;$/;"	m	struct:FemuCtrl
iomem	nvme.h	/^    MemoryRegion iomem;$/;"	m	struct:NvmeCtrl
iothread	dataplane/virtio-blk.c	/^    IOThread *iothread;$/;"	m	struct:VirtIOBlockDataPlane	file:
iothread	dataplane/xen-block.c	/^    IOThread *iothread;$/;"	m	struct:XenBlockDataPlane	file:
iov	femu/nvme.h	/^    QEMUIOVector            iov;$/;"	m	struct:NvmeRequest
iov	nvme.h	/^    QEMUIOVector            iov;$/;"	m	struct:NvmeRequest
ipc	femu/bbssd/backup/ftl.h	/^    int ipc; \/* invalid page count *\/$/;"	m	struct:nand_block
ipc	femu/bbssd/backup/ftl.h	/^    int ipc; \/* invalid page count in this line *\/$/;"	m	struct:line
ipc	femu/bbssd/ftl.h	/^    int ipc; \/* invalid page count *\/$/;"	m	struct:nand_block
ipc	femu/bbssd/ftl.h	/^    int ipc; \/* invalid page count in this line *\/$/;"	m	struct:line
irq	fdc.c	/^    qemu_irq irq;$/;"	m	struct:FDCtrl	file:
irq_enabled	femu/nvme.h	/^    uint16_t    irq_enabled;$/;"	m	struct:NvmeCQueue
irq_enabled	nvme.h	/^    uint16_t    irq_enabled;$/;"	m	struct:NvmeCQueue
irq_status	nvme.h	/^    uint32_t    irq_status;$/;"	m	struct:NvmeCtrl
irq_vector	femu/nvme.h	/^    uint16_t    irq_vector;$/;"	m	struct:NvmeCreateCq
is_active	femu/nvme.h	/^    bool        is_active;$/;"	m	struct:NvmeCQueue
is_active	femu/nvme.h	/^    bool        is_active;$/;"	m	struct:NvmeSQueue
is_oc12_admin_cmd	femu/ocssd/oc12.c	/^static inline bool is_oc12_admin_cmd(uint8_t opcode)$/;"	f	file:
is_oc20_admin_cmd	femu/ocssd/oc20.c	/^static inline bool is_oc20_admin_cmd(uint8_t opcode)$/;"	f	file:
is_write	femu/nvme.h	/^    uint16_t                is_write;$/;"	m	struct:NvmeRequest
isa_fdc_get_drive_max_chs	fdc.c	/^static void isa_fdc_get_drive_max_chs(FloppyDriveType type, uint8_t *maxc,$/;"	f	file:
isa_fdc_get_drive_type	fdc.c	/^FloppyDriveType isa_fdc_get_drive_type(ISADevice *fdc, int i)$/;"	f
isa_fdc_info	fdc.c	/^static const TypeInfo isa_fdc_info = {$/;"	v	file:
isa_fdc_init_drives	fdc.c	/^void isa_fdc_init_drives(ISADevice *fdc, DriveInfo **fds)$/;"	f
isa_fdc_properties	fdc.c	/^static Property isa_fdc_properties[] = {$/;"	v	file:
isabus_fdc_class_init	fdc.c	/^static void isabus_fdc_class_init(ObjectClass *klass, void *data)$/;"	f	file:
isabus_fdc_instance_init	fdc.c	/^static void isabus_fdc_instance_init(Object *obj)$/;"	f	file:
isabus_fdc_realize	fdc.c	/^static void isabus_fdc_realize(DeviceState *dev, Error **errp)$/;"	f	file:
iwmctrl_read	swim.c	/^static uint64_t iwmctrl_read(void *opaque, hwaddr reg, unsigned size)$/;"	f	file:
iwmctrl_write	swim.c	/^static void iwmctrl_write(void *opaque, hwaddr reg, uint64_t value,$/;"	f	file:
kas	femu/nvme.h	/^    uint16_t    kas;$/;"	m	struct:NvmeIdCtrl
known_devices	m25p80.c	/^static const FlashPartInfo known_devices[] = {$/;"	v	file:
last_sect	fdc.c	/^    uint8_t last_sect;        \/* Nb sector per track    *\/$/;"	m	struct:FDrive	file:
last_sect	fdc.c	/^    uint8_t last_sect;$/;"	m	struct:FDFormat	file:
lba	femu/nvme.h	/^    uint64_t    lba;$/;"	m	struct:NvmeErrorLog
lba	femu/ocssd/oc12.h	/^    uint64_t lba;$/;"	m	struct:oc12_tgt_meta
lba_index	femu/nvme.h	/^    uint8_t     lba_index;$/;"	m	struct:FemuCtrl
lba_range	femu/nvme.h	/^    NvmeRangeType   lba_range[64];$/;"	m	struct:NvmeNamespace
lba_to_msf	cdrom.c	/^static void lba_to_msf(uint8_t *buf, int lba)$/;"	f	file:
lbads	femu/nvme.h	/^    uint8_t     lbads;$/;"	m	struct:NvmeLBAF
lbaf	femu/nvme.h	/^    NvmeLBAF    lbaf[16];$/;"	m	struct:NvmeIdNs
lbaf	femu/ocssd/oc20.h	/^    Oc20AddrF  lbaf;$/;"	m	struct:Oc20Namespace
lbaf	femu/ocssd/oc20.h	/^    Oc20IdLBAF lbaf;$/;"	m	struct:Oc20NamespaceGeometry
lbafe	femu/zns/zns.h	/^    NvmeLBAFE   lbafe[16];$/;"	m	struct:NvmeIdNsZoned
lbal	femu/ocssd/oc20.h	/^    uint64_t    lbal;$/;"	m	struct:Oc20RwCmd
left	femu/lib/pqueue.c	33;"	d	file:
len	femu/nvme.h	/^    dma_addr_t len;$/;"	m	struct:DMAOff
len	femu/nvme.h	/^    uint32_t len;$/;"	m	struct:NvmeSglDescriptor
len	m25p80.c	/^    uint32_t len;$/;"	m	struct:Flash	file:
len	pflash_cfi02.c	/^    uint32_t len;$/;"	m	struct:__anon52	file:
likely	femu/inc/rte_branch_prediction.h	24;"	d
line	femu/bbssd/backup/ftl.h	/^typedef struct line {$/;"	s
line	femu/bbssd/backup/ftl.h	/^} line;$/;"	t	typeref:struct:line
line	femu/bbssd/ftl.h	/^typedef struct line {$/;"	s
line	femu/bbssd/ftl.h	/^} line;$/;"	t	typeref:struct:line
line_mgmt	femu/bbssd/backup/ftl.h	/^struct line_mgmt {$/;"	s
line_mgmt	femu/bbssd/ftl.h	/^struct line_mgmt {$/;"	s
lines	femu/bbssd/backup/ftl.h	/^    struct line *lines;$/;"	m	struct:line_mgmt	typeref:struct:line_mgmt::line
lines	femu/bbssd/ftl.h	/^    struct line *lines;$/;"	m	struct:line_mgmt	typeref:struct:line_mgmt::line
list	femu/bbssd/hmb_types.h	/^	struct HmbEntry **list;  \/* HMB entries **\/$/;"	m	struct:HmbCtrl	typeref:struct:HmbCtrl::HmbEntry
list_addr	femu/bbssd/hmb_types.h	/^	uint64_t list_addr;      \/* HMB: Full address of the list *\/$/;"	m	struct:HmbCtrl
list_addr_l	femu/bbssd/hmb_types.h	/^	uint32_t list_addr_l;    \/* HMB: Host Memory Descriptor List Lower Address (from dword 13) *\/$/;"	m	struct:HmbCtrl
list_addr_u	femu/bbssd/hmb_types.h	/^	uint32_t list_addr_u;    \/* HMB: Host Memory Descriptor List Upper Address (from dword 14) *\/$/;"	m	struct:HmbCtrl
list_cnt	femu/bbssd/hmb_types.h	/^	uint32_t list_cnt;       \/* HMB: Host Memory Descriptor List Entry Count (from dword 15)*\/$/;"	m	struct:HmbCtrl
ll__calc_max_allocable_size	femu/bbssd/hmb_types.h	/^	HmbTime ll__calc_max_allocable_size;$/;"	m	struct:HmbDebugTime
ll__ctrl_malloc	femu/bbssd/hmb_types.h	/^	HmbTime ll__ctrl_malloc;$/;"	m	struct:HmbDebugTime
ll__get_id	femu/bbssd/hmb_types.h	/^	HmbTime ll__get_id;$/;"	m	struct:HmbDebugTime
ll__get_new_id	femu/bbssd/hmb_types.h	/^	HmbTime ll__get_new_id;$/;"	m	struct:HmbDebugTime
ll__insert_entry	femu/bbssd/hmb_types.h	/^	HmbTime ll__insert_entry;$/;"	m	struct:HmbDebugTime
ll__map_pci	femu/bbssd/hmb_types.h	/^	HmbTime ll__map_pci;$/;"	m	struct:HmbDebugTime
ll__memset	femu/bbssd/hmb_types.h	/^	HmbTime ll__memset;$/;"	m	struct:HmbDebugTime
ll__search_empty_space	femu/bbssd/hmb_types.h	/^	HmbTime ll__search_empty_space;$/;"	m	struct:HmbDebugTime
ll__search_map_info	femu/bbssd/hmb_types.h	/^	HmbTime ll__search_map_info;$/;"	m	struct:HmbDebugTime
lm	femu/bbssd/backup/ftl.h	/^    struct line_mgmt lm;$/;"	m	struct:ssd	typeref:struct:ssd::line_mgmt
lm	femu/bbssd/ftl.h	/^    struct line_mgmt lm;$/;"	m	struct:ssd	typeref:struct:ssd::line_mgmt
lock	fdc.c	/^    uint8_t lock;$/;"	m	struct:FDCtrl	file:
lock	femu/bbssd/hmb_types.h	/^	int32_t  lock;                        \/* 4bytes (acc: 83) *\/$/;"	m	struct:HmbMeta
log_page	femu/nvme.h	/^    uint8_t log_page;$/;"	m	struct:NvmeAerResult
logical_space	femu/backend/dram.h	/^    void    *logical_space;$/;"	m	struct:SsdDramBackend
lpa	femu/nvme.h	/^    uint8_t     lpa;$/;"	m	struct:NvmeIdCtrl
lpg_rd_lat_ns	femu/nvme.h	/^    int64_t lpg_rd_lat_ns; \/* lower page in MLC\/TLC\/QLC *\/$/;"	m	struct:FemuCtrl
lpg_wr_lat_ns	femu/nvme.h	/^    int64_t lpg_wr_lat_ns;$/;"	m	struct:FemuCtrl
lpn	femu/bbssd/hmb_types.h	/^	uint64_t lpn    : 55;	\/* 8bytes (acc: 28) *\/$/;"	m	struct:HmbSharedEnt
lun	femu/bbssd/backup/ftl.h	/^            uint64_t lun : LUN_BITS;$/;"	m	struct:ppa::__anon30::__anon31
lun	femu/bbssd/backup/ftl.h	/^    int lun;$/;"	m	struct:write_pointer
lun	femu/bbssd/backup/ftl.h	/^    struct nand_lun *lun;$/;"	m	struct:ssd_channel	typeref:struct:ssd_channel::nand_lun
lun	femu/bbssd/ftl.h	/^            uint64_t lun : LUN_BITS;$/;"	m	struct:ppa::__anon24::__anon25
lun	femu/bbssd/ftl.h	/^    int lun;$/;"	m	struct:write_pointer
lun	femu/bbssd/ftl.h	/^    struct nand_lun *lun;$/;"	m	struct:ssd_channel	typeref:struct:ssd_channel::nand_lun
lun	femu/ocssd/oc12.h	/^    int  lun;$/;"	m	struct:AddrBucket
lun	femu/ocssd/oc20.h	/^    int  lun;$/;"	m	struct:Oc20AddrBucket
lun_len	femu/ocssd/oc12.h	/^    uint8_t     lun_len;$/;"	m	struct:Oc12IdAddrFormat
lun_len	femu/ocssd/oc20.h	/^    uint8_t lun_len;$/;"	m	struct:Oc20IdLBAF
lun_mask	femu/ocssd/oc12.h	/^	uint64_t	lun_mask;$/;"	m	struct:Oc12AddrF
lun_mask	femu/ocssd/oc20.h	/^    uint64_t lun_mask;$/;"	m	struct:Oc20AddrF
lun_offset	femu/ocssd/oc12.h	/^	uint8_t     lun_offset;$/;"	m	struct:Oc12AddrF
lun_offset	femu/ocssd/oc12.h	/^    uint8_t     lun_offset;$/;"	m	struct:Oc12IdAddrFormat
lun_offset	femu/ocssd/oc20.h	/^    uint8_t  lun_offset;$/;"	m	struct:Oc20AddrF
lun_units	femu/ocssd/oc12.h	/^    uint32_t    lun_units;$/;"	m	struct:Oc12Params
luns_per_ch	femu/bbssd/backup/ftl.h	/^    int luns_per_ch;  \/* # of LUNs per channel *\/$/;"	m	struct:ssdparams
luns_per_ch	femu/bbssd/ftl.h	/^    int luns_per_ch;  \/* # of LUNs per channel *\/$/;"	m	struct:ssdparams
lver	femu/nvme.h	/^    uint8_t         lver; \/* Coperd: OCSSD version, 0x1 -> OC1.2, 0x2 -> OC2.0 *\/$/;"	m	struct:FemuCtrl
m25p80_class_init	m25p80.c	/^static void m25p80_class_init(ObjectClass *klass, void *data)$/;"	f	file:
m25p80_cs	m25p80.c	/^static int m25p80_cs(SSISlave *ss, bool select)$/;"	f	file:
m25p80_data_read_loop_needed	m25p80.c	/^static bool m25p80_data_read_loop_needed(void *opaque)$/;"	f	file:
m25p80_info	m25p80.c	/^static const TypeInfo m25p80_info = {$/;"	v	file:
m25p80_pre_load	m25p80.c	/^static int m25p80_pre_load(void *opaque)$/;"	f	file:
m25p80_pre_save	m25p80.c	/^static int m25p80_pre_save(void *opaque)$/;"	f	file:
m25p80_properties	m25p80.c	/^static Property m25p80_properties[] = {$/;"	v	file:
m25p80_realize	m25p80.c	/^static void m25p80_realize(SSISlave *ss, Error **errp)$/;"	f	file:
m25p80_register_types	m25p80.c	/^static void m25p80_register_types(void)$/;"	f	file:
m25p80_reset	m25p80.c	/^static void m25p80_reset(DeviceState *d)$/;"	f	file:
m25p80_transfer8	m25p80.c	/^static uint32_t m25p80_transfer8(SSISlave *ss, uint32_t tx)$/;"	f	file:
magic	femu/ocssd/oc20.h	/^    uint32_t magic;$/;"	m	struct:Oc20Header
major	femu/ocssd/oc20.h	/^        uint8_t major;$/;"	m	struct:Oc20NamespaceGeometry::__anon18
manf_id	nand.c	/^    uint8_t manf_id, chip_id;$/;"	m	struct:NANDFlashState	file:
mapped_ppa	femu/bbssd/backup/ftl.c	/^static inline bool mapped_ppa(struct ppa *ppa)$/;"	f	file:
mapped_ppa	femu/bbssd/ftl.c	/^static inline bool mapped_ppa(struct ppa *ppa)$/;"	f	file:
mappings	femu/bbssd/hmb_types.h	/^	struct HmbMapInfo** mappings;$/;"	m	struct:HmbCtrl	typeref:struct:HmbCtrl::HmbMapInfo
mappings	pflash_cfi02.c	/^    uint8_t mappings;$/;"	m	struct:PFlashCFI02	file:
mappings_bits	femu/bbssd/hmb_types.h	/^	uint8_t             mappings_bits;$/;"	m	struct:HmbCtrl
mappings_hashed_max	femu/bbssd/hmb_types.h	/^	uint64_t            mappings_hashed_max;$/;"	m	struct:HmbCtrl
maptbl	femu/bbssd/backup/ftl.h	/^    struct ppa *maptbl; \/* page level mapping table *\/$/;"	m	struct:ssd	typeref:struct:ssd::ppa
maptbl	femu/bbssd/ftl.h	/^    struct ppa *maptbl; \/* page level mapping table *\/$/;"	m	struct:ssd	typeref:struct:ssd::ppa
mar	femu/zns/zns.h	/^    uint32_t    mar;$/;"	m	struct:NvmeIdNsZoned
mark_block_free	femu/bbssd/backup/ftl.c	/^static void mark_block_free(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_block_free	femu/bbssd/ftl.c	/^static void mark_block_free(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_line_free	femu/bbssd/backup/ftl.c	/^static void mark_line_free(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_line_free	femu/bbssd/ftl.c	/^static void mark_line_free(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_page_invalid	femu/bbssd/backup/ftl.c	/^static void mark_page_invalid(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_page_invalid	femu/bbssd/ftl.c	/^static void mark_page_invalid(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_page_valid	femu/bbssd/backup/ftl.c	/^static void mark_page_valid(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mark_page_valid	femu/bbssd/ftl.c	/^static void mark_page_valid(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
mask	fdc.c	/^    uint8_t mask;$/;"	m	struct:FDCtrlCommand	file:
mask	femu/inc/rte_ring.h	/^	uint32_t mask;           \/**< Mask (size-1) of ring. *\/$/;"	m	struct:rte_ring
max_active_zones	femu/nvme.h	/^    uint32_t        max_active_zones;$/;"	m	struct:FemuCtrl
max_active_zones	femu/zns/zns.h	/^    uint32_t max_active_zones;$/;"	m	struct:NvmeNamespaceParams
max_cqes	femu/nvme.h	/^    uint8_t     max_cqes;$/;"	m	struct:FemuCtrl
max_cqes	femu/nvme.h	/^    uint8_t  max_cqes;$/;"	m	struct:NvmeParams
max_device_width	pflash_cfi01.c	/^    uint8_t max_device_width;  \/* max device width in bytes *\/$/;"	m	struct:PFlashCFI01	file:
max_head	fdc.c	/^    uint8_t max_head;$/;"	m	struct:FDFormat	file:
max_ioqpairs	nvme.h	/^    uint32_t max_ioqpairs;$/;"	m	struct:NvmeParams
max_open_chks	femu/ocssd/oc20.h	/^    uint32_t max_open_chks;$/;"	m	struct:Oc20IdWrt
max_open_punits	femu/ocssd/oc20.h	/^    uint32_t max_open_punits;$/;"	m	struct:Oc20IdWrt
max_open_zones	femu/nvme.h	/^    uint32_t        max_open_zones;$/;"	m	struct:FemuCtrl
max_open_zones	femu/zns/zns.h	/^    uint32_t max_open_zones;$/;"	m	struct:NvmeNamespaceParams
max_prp_ents	femu/nvme.h	/^    uint16_t    max_prp_ents;$/;"	m	struct:FemuCtrl
max_prp_ents	nvme.h	/^    uint16_t    max_prp_ents;$/;"	m	struct:NvmeCtrl
max_q_ents	femu/nvme.h	/^    uint32_t    max_q_ents;$/;"	m	struct:FemuCtrl
max_q_ents	femu/nvme.h	/^    uint32_t max_q_ents;$/;"	m	struct:NvmeParams
max_q_ents	nvme.h	/^    uint32_t    max_q_ents;$/;"	m	struct:NvmeCtrl
max_requests	dataplane/xen-block.c	/^    unsigned int max_requests;$/;"	m	struct:XenBlockDataPlane	file:
max_sec_per_rq	femu/nvme.h	/^    uint8_t  max_sec_per_rq;$/;"	m	struct:OcCtrlParams
max_sec_per_rq	femu/ocssd/oc12.h	/^    uint8_t     max_sec_per_rq;$/;"	m	struct:Oc12Params
max_sqes	femu/nvme.h	/^    uint8_t     max_sqes;$/;"	m	struct:FemuCtrl
max_sqes	femu/nvme.h	/^    uint8_t  max_sqes;$/;"	m	struct:NvmeParams
max_track	fdc.c	/^    uint8_t max_track;        \/* Nb of tracks           *\/$/;"	m	struct:FDrive	file:
max_track	fdc.c	/^    uint8_t max_track;$/;"	m	struct:FDFormat	file:
maxchild	femu/lib/pqueue.c	/^static size_t maxchild(pqueue_t *q, size_t i)$/;"	f	file:
maxcmd	femu/nvme.h	/^    uint16_t    maxcmd;$/;"	m	struct:NvmeIdCtrl
mbe	femu/nvme.h	/^    SsdDramBackend  *mbe;$/;"	m	struct:FemuCtrl
mc	femu/nvme.h	/^    uint8_t     mc;$/;"	m	struct:FemuCtrl
mc	femu/nvme.h	/^    uint8_t     mc;$/;"	m	struct:NvmeIdNs
mc	femu/nvme.h	/^    uint8_t  mc;$/;"	m	struct:NvmeParams
mccap	femu/nvme.h	/^    uint32_t mccap;$/;"	m	struct:Oc20Params
mccap	femu/ocssd/oc12.h	/^    uint32_t    mccap;$/;"	m	struct:Oc12IdGroup
mccap	femu/ocssd/oc20.h	/^    uint32_t   mccap;$/;"	m	struct:Oc20NamespaceGeometry
md_size	femu/ocssd/oc20.h	/^    uint32_t md_size;$/;"	m	struct:Oc20Header
mdts	femu/nvme.h	/^    uint8_t     mdts;$/;"	m	struct:FemuCtrl
mdts	femu/nvme.h	/^    uint8_t     mdts;$/;"	m	struct:NvmeIdCtrl
mdts	femu/nvme.h	/^    uint8_t  mdts;$/;"	m	struct:NvmeParams
mdts	nvme.h	/^    uint8_t  mdts;$/;"	m	struct:NvmeParams
media_changed	fdc.c	/^    uint8_t media_changed;    \/* Is media changed       *\/$/;"	m	struct:FDrive	file:
media_errors	femu/nvme.h	/^    uint64_t    media_errors[2];$/;"	m	struct:NvmeSmartLog
media_rate	fdc.c	/^    uint8_t media_rate;       \/* Data rate of medium    *\/$/;"	m	struct:FDrive	file:
media_validated	fdc.c	/^    bool media_validated;     \/* Have we validated the media? *\/$/;"	m	struct:FDrive	file:
mem	pflash_cfi01.c	/^    MemoryRegion mem;$/;"	m	struct:PFlashCFI01	file:
mem	pflash_cfi02.c	/^    MemoryRegion mem;$/;"	m	struct:PFlashCFI02	file:
mem_and	nand.c	/^static void mem_and(uint8_t *dest, const uint8_t *src, size_t n)$/;"	f	file:
mem_mappings	pflash_cfi02.c	/^    MemoryRegion *mem_mappings;    \/* array; one per mapping *\/$/;"	m	struct:PFlashCFI02	file:
mem_oob	nand.c	/^    int mem_oob;$/;"	m	struct:NANDFlashState	file:
mem_ret	femu/bbssd/hmb_types.h	/^	bool     mem_ret;        \/* HMB: Memory Return (from dword 11) *\/$/;"	m	struct:HmbCtrl
memsz	femu/nvme.h	/^    uint32_t        memsz;$/;"	m	struct:FemuCtrl
meta	femu/nvme.h	/^        uint64_t meta;$/;"	m	struct:NvmeNamespace::__anon39
meta	femu/nvme.h	/^    uint8_t     meta;$/;"	m	struct:FemuCtrl
meta_auto_gen	femu/ocssd/oc12.h	/^    uint8_t     meta_auto_gen;$/;"	m	struct:Oc12Ctrl
meta_buf	femu/nvme.h	/^    void                    *meta_buf;$/;"	m	struct:NvmeRequest
meta_buf	femu/ocssd/oc12.h	/^    uint8_t     *meta_buf;$/;"	m	struct:Oc12Ctrl
meta_host	femu/bbssd/hmb_types.h	/^	HmbHostAddr   meta_host;$/;"	m	struct:HmbCtrl
meta_len	femu/ocssd/oc12.h	/^    int         meta_len;$/;"	m	struct:Oc12Ctrl
meta_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr meta_mapped;$/;"	m	struct:HmbCtrl
meta_mapped_size	femu/bbssd/hmb_types.h	/^	uint64_t      meta_mapped_size;$/;"	m	struct:HmbCtrl
meta_size	femu/nvme.h	/^    uint64_t                meta_size;$/;"	m	struct:NvmeRequest
meta_start_offset	femu/nvme.h	/^    uint64_t        meta_start_offset;$/;"	m	struct:NvmeNamespace
meta_tbytes	femu/ocssd/oc12.h	/^    int         meta_tbytes;$/;"	m	struct:Oc12Ctrl
metadata	femu/ocssd/oc12.h	/^    uint64_t    metadata; \/* OOB *\/$/;"	m	struct:Oc12RwCmd
metadata	femu/ocssd/oc20.h	/^    uint64_t    metadata;$/;"	m	struct:Oc20RwCmd
minor	femu/ocssd/oc20.h	/^        uint8_t minor;$/;"	m	struct:Oc20NamespaceGeometry::__anon18
mlc_tbl	femu/nand/nand.h	/^static int mlc_tbl[MAX_SUPPORTED_PAGES_PER_BLOCK];$/;"	v
mn	femu/nvme.h	/^    uint8_t     mn[40];$/;"	m	struct:NvmeIdCtrl
mntmt	femu/nvme.h	/^    uint16_t    mntmt;$/;"	m	struct:NvmeIdCtrl
mor	femu/zns/zns.h	/^    uint32_t    mor;$/;"	m	struct:NvmeIdNsZoned
more_work	dataplane/xen-block.c	/^    int more_work;$/;"	m	struct:XenBlockDataPlane	file:
mp	femu/nvme.h	/^    uint16_t    mp;$/;"	m	struct:NvmePSD
mpos	femu/ocssd/oc12.h	/^    uint32_t    mpos;$/;"	m	struct:Oc12IdGroup
mpsmax	femu/nvme.h	/^    uint8_t     mpsmax;$/;"	m	struct:FemuCtrl
mpsmax	femu/nvme.h	/^    uint8_t  mpsmax;$/;"	m	struct:NvmeParams
mpsmin	femu/nvme.h	/^    uint8_t     mpsmin;$/;"	m	struct:FemuCtrl
mpsmin	femu/nvme.h	/^    uint8_t  mpsmin;$/;"	m	struct:NvmeParams
mptr	femu/nvme.h	/^    uint64_t                mptr;$/;"	m	struct:NvmeRequest
mptr	femu/nvme.h	/^    uint64_t    mptr;$/;"	m	struct:NvmeCmd
mptr	femu/nvme.h	/^    uint64_t    mptr;$/;"	m	struct:NvmeRwCmd
ms	femu/nvme.h	/^    uint16_t    ms;$/;"	m	struct:NvmeLBAF
ms	femu/nvme.h	/^    uint8_t     ms;$/;"	m	struct:FemuCtrl
ms	femu/nvme.h	/^    uint8_t  ms;$/;"	m	struct:NvmeParams
ms_max	femu/nvme.h	/^    uint8_t     ms_max;$/;"	m	struct:FemuCtrl
ms_max	femu/nvme.h	/^    uint8_t  ms_max;$/;"	m	struct:NvmeParams
msix_qsize	nvme.h	/^    uint16_t msix_qsize;$/;"	m	struct:NvmeParams
msr	fdc.c	/^    uint8_t msr;$/;"	m	struct:FDCtrl	file:
mtfa	femu/nvme.h	/^    uint16_t    mtfa;$/;"	m	struct:NvmeIdCtrl
mtype	femu/ocssd/oc12.h	/^    uint8_t     mtype;$/;"	m	struct:Oc12IdGroup
mtype	femu/ocssd/oc12.h	/^    uint8_t     mtype;$/;"	m	struct:Oc12Params
multipoller_enabled	femu/nvme.h	/^    uint8_t         multipoller_enabled;$/;"	m	struct:FemuCtrl
multireq_compare	virtio-blk.c	/^static int multireq_compare(const void *a, const void *b)$/;"	f	file:
mw_cunits	femu/nvme.h	/^    uint32_t mw_cunits;$/;"	m	struct:Oc20Params
mw_cunits	femu/ocssd/oc20.h	/^    uint32_t mw_cunits;$/;"	m	struct:Oc20IdWrt
mxtmt	femu/nvme.h	/^    uint16_t    mxtmt;$/;"	m	struct:NvmeIdCtrl
n	femu/nvme.h	/^        } n;$/;"	m	union:NvmeCqe::__anon36	typeref:struct:NvmeCqe::__anon36::__anon37
n	femu/nvme.h	/^    FemuCtrl        *n;$/;"	m	struct:NvmePollerThreadArgument
n_sectors	m25p80.c	/^    uint32_t n_sectors;$/;"	m	struct:FlashPartInfo	file:
nabo	femu/nvme.h	/^    uint16_t    nabo;$/;"	m	struct:NvmeIdNs
nabsn	femu/nvme.h	/^    uint16_t    nabsn;$/;"	m	struct:NvmeIdNs
nabspf	femu/nvme.h	/^    uint16_t    nabspf;$/;"	m	struct:NvmeIdNs
nacwu	femu/nvme.h	/^    uint16_t    nacwu;$/;"	m	struct:NvmeIdNs
name	fdc.c	/^    const char* name;$/;"	m	struct:FDCtrlCommand	file:
name	femu/inc/rte_ring.h	/^	char name[RTE_NAMESIZE];$/;"	m	struct:rte_ring
name	pflash_cfi01.c	/^    char *name;$/;"	m	struct:PFlashCFI01	file:
name	pflash_cfi02.c	/^    char *name;$/;"	m	struct:PFlashCFI02	file:
namespaces	femu/nvme.h	/^    NvmeNamespace   *namespaces;$/;"	m	struct:FemuCtrl
namespaces	nvme.h	/^    NvmeNamespace   *namespaces[NVME_MAX_NAMESPACES];$/;"	m	struct:NvmeCtrl
nand_block	femu/bbssd/backup/ftl.h	/^struct nand_block {$/;"	s
nand_block	femu/bbssd/ftl.h	/^struct nand_block {$/;"	s
nand_class_init	nand.c	/^static void nand_class_init(ObjectClass *klass, void *data)$/;"	f	file:
nand_cmd	femu/bbssd/backup/ftl.h	/^struct nand_cmd {$/;"	s
nand_cmd	femu/bbssd/ftl.h	/^struct nand_cmd {$/;"	s
nand_command	nand.c	/^static void nand_command(NANDFlashState *s)$/;"	f	file:
nand_ecc_precalc_table	ecc.c	/^static const uint8_t nand_ecc_precalc_table[] = {$/;"	v	file:
nand_flash_ids	nand.c	/^} nand_flash_ids[0x100] = {$/;"	v	typeref:struct:__anon45	file:
nand_flash_timing	femu/nand/nand.h	/^static struct NandFlashTiming nand_flash_timing;$/;"	v	typeref:struct:NandFlashTiming
nand_getbuswidth	nand.c	/^uint32_t nand_getbuswidth(DeviceState *dev)$/;"	f
nand_getio	nand.c	/^uint32_t nand_getio(DeviceState *dev)$/;"	f
nand_getpins	nand.c	/^void nand_getpins(DeviceState *dev, int *rb)$/;"	f
nand_info	nand.c	/^static const TypeInfo nand_info = {$/;"	v	file:
nand_init	nand.c	/^DeviceState *nand_init(BlockBackend *blk, int manf_id, int chip_id)$/;"	f
nand_lun	femu/bbssd/backup/ftl.h	/^struct nand_lun {$/;"	s
nand_lun	femu/bbssd/ftl.h	/^struct nand_lun {$/;"	s
nand_page	femu/bbssd/backup/ftl.h	/^struct nand_page {$/;"	s
nand_page	femu/bbssd/ftl.h	/^struct nand_page {$/;"	s
nand_plane	femu/bbssd/backup/ftl.h	/^struct nand_plane {$/;"	s
nand_plane	femu/bbssd/ftl.h	/^struct nand_plane {$/;"	s
nand_post_load	nand.c	/^static int nand_post_load(void *opaque, int version_id)$/;"	f	file:
nand_pre_save	nand.c	/^static int nand_pre_save(void *opaque)$/;"	f	file:
nand_properties	nand.c	/^static Property nand_properties[] = {$/;"	v	file:
nand_pushio_byte	nand.c	/^static inline void nand_pushio_byte(NANDFlashState *s, uint8_t value)$/;"	f	file:
nand_realize	nand.c	/^static void nand_realize(DeviceState *dev, Error **errp)$/;"	f	file:
nand_register_types	nand.c	/^static void nand_register_types(void)$/;"	f	file:
nand_reset	nand.c	/^static void nand_reset(DeviceState *dev)$/;"	f	file:
nand_sec_status_t	femu/bbssd/backup/ftl.h	/^typedef int nand_sec_status_t;$/;"	t
nand_sec_status_t	femu/bbssd/ftl.h	/^typedef int nand_sec_status_t;$/;"	t
nand_setio	nand.c	/^void nand_setio(DeviceState *dev, uint32_t value)$/;"	f
nand_setpins	nand.c	/^void nand_setpins(DeviceState *dev, uint8_t cle, uint8_t ale,$/;"	f
native	xen_blkif.h	/^    blkif_back_ring_t        native;$/;"	m	union:blkif_back_rings
nawun	femu/nvme.h	/^    uint16_t    nawun;$/;"	m	struct:NvmeIdNs
nawupf	femu/nvme.h	/^    uint16_t    nawupf;$/;"	m	struct:NvmeIdNs
nb_blocs	pflash_cfi01.c	/^    uint32_t nb_blocs;$/;"	m	struct:PFlashCFI01	file:
nb_blocs	pflash_cfi02.c	/^    uint32_t nb_blocs[PFLASH_MAX_ERASE_REGIONS];$/;"	m	struct:PFlashCFI02	file:
nblks	femu/bbssd/backup/ftl.h	/^    int nblks;$/;"	m	struct:nand_plane
nblks	femu/bbssd/ftl.h	/^    int nblks;$/;"	m	struct:nand_plane
ncap	femu/nvme.h	/^    uint64_t    ncap;$/;"	m	struct:NvmeIdNs
nchs	femu/bbssd/backup/ftl.h	/^    int nchs;         \/* # of channels in the SSD *\/$/;"	m	struct:ssdparams
nchs	femu/bbssd/ftl.h	/^    int nchs;         \/* # of channels in the SSD *\/$/;"	m	struct:ssdparams
ndx	femu/nvme.h	/^    int ndx;$/;"	m	struct:DMAOff
needed_bytes	m25p80.c	/^    uint8_t needed_bytes;$/;"	m	struct:Flash	file:
next	femu/bbssd/hmb_types.h	/^	struct HmbMapInfo* next;$/;"	m	struct:HmbMapInfo	typeref:struct:HmbMapInfo::HmbMapInfo
next	femu/bbssd/hmb_types.h	/^	struct HmbSegEmpty *prev, *next;$/;"	m	struct:HmbSegEmpty	typeref:struct:HmbSegEmpty::
next_ch_avail_time	femu/bbssd/backup/ftl.h	/^    uint64_t next_ch_avail_time;$/;"	m	struct:ssd_channel
next_ch_avail_time	femu/bbssd/ftl.h	/^    uint64_t next_ch_avail_time;$/;"	m	struct:ssd_channel
next_lun_avail_time	femu/bbssd/backup/ftl.h	/^    uint64_t next_lun_avail_time;$/;"	m	struct:nand_lun
next_lun_avail_time	femu/bbssd/ftl.h	/^    uint64_t next_lun_avail_time;$/;"	m	struct:nand_lun
nguid	femu/nvme.h	/^    uint8_t     nguid[16];$/;"	m	struct:NvmeIdNs
nidl	femu/nvme.h	/^    uint8_t nidl;$/;"	m	struct:NvmeIdNsDescr
nidt	femu/nvme.h	/^    uint8_t nidt;$/;"	m	struct:NvmeIdNsDescr
nlb	femu/nvme.h	/^    uint16_t                nlb;$/;"	m	struct:NvmeRequest
nlb	femu/nvme.h	/^    uint16_t    nlb;$/;"	m	struct:NvmeRwCmd
nlb	femu/nvme.h	/^    uint32_t    nlb;$/;"	m	struct:NvmeDsmRange
nlb	femu/nvme.h	/^    uint64_t    nlb;$/;"	m	struct:NvmeRangeType
nlb	femu/ocssd/oc12.h	/^    uint16_t    nlb;$/;"	m	struct:Oc12BbtSet
nlb	femu/ocssd/oc12.h	/^    uint16_t    nlb;$/;"	m	struct:Oc12RwCmd
nlb	femu/ocssd/oc12.h	/^    uint32_t    nlb;$/;"	m	struct:Oc12DmCmd
nlb	femu/ocssd/oc12.h	/^    uint32_t    nlb;$/;"	m	struct:Oc12GetL2PTbl
nlb	femu/ocssd/oc20.h	/^    uint16_t    nlb;$/;"	m	struct:Oc20RwCmd
nlb	femu/ocssd/oc20.h	/^    uint32_t nlb;$/;"	m	struct:Oc20DmCmd
nlbaf	femu/nvme.h	/^    uint8_t     nlbaf;$/;"	m	struct:FemuCtrl
nlbaf	femu/nvme.h	/^    uint8_t     nlbaf;$/;"	m	struct:NvmeIdNs
nluns	femu/bbssd/backup/ftl.h	/^    int nluns;$/;"	m	struct:ssd_channel
nluns	femu/bbssd/ftl.h	/^    int nluns;$/;"	m	struct:ssd_channel
nmic	femu/nvme.h	/^    uint8_t     nmic;$/;"	m	struct:NvmeIdNs
nn	femu/nvme.h	/^    uint32_t    nn;$/;"	m	struct:NvmeIdCtrl
noiob	femu/nvme.h	/^    uint16_t    noiob;$/;"	m	struct:NvmeIdNs
nonvolatile_cfg	m25p80.c	/^    uint32_t nonvolatile_cfg;$/;"	m	struct:Flash	file:
nop_init	femu/nossd/nop.c	/^static void nop_init(FemuCtrl *n, Error **errp)$/;"	f	file:
nop_io_cmd	femu/nossd/nop.c	/^static uint16_t nop_io_cmd(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
notify_guest_bh	dataplane/virtio-blk.c	/^static void notify_guest_bh(void *opaque)$/;"	f	file:
nows	femu/nvme.h	/^    uint16_t    nows;$/;"	m	struct:NvmeIdNs
npda	femu/nvme.h	/^    uint16_t    npda;$/;"	m	struct:NvmeIdNs
npdg	femu/nvme.h	/^    uint16_t    npdg;$/;"	m	struct:NvmeIdNs
npgs	femu/bbssd/backup/ftl.h	/^    int npgs;$/;"	m	struct:nand_block
npgs	femu/bbssd/ftl.h	/^    int npgs;$/;"	m	struct:nand_block
npls	femu/bbssd/backup/ftl.h	/^    int npls;$/;"	m	struct:nand_lun
npls	femu/bbssd/ftl.h	/^    int npls;$/;"	m	struct:nand_lun
npss	femu/nvme.h	/^    uint8_t     npss;$/;"	m	struct:NvmeIdCtrl
npwa	femu/nvme.h	/^    uint16_t    npwa;$/;"	m	struct:NvmeIdNs
npwg	femu/nvme.h	/^    uint16_t    npwg;$/;"	m	struct:NvmeIdNs
nr	femu/nvme.h	/^    uint32_t    nr;$/;"	m	struct:NvmeDsmCmd
nr_active_zones	femu/nvme.h	/^    int32_t         nr_active_zones;$/;"	m	struct:FemuCtrl
nr_open_zones	femu/nvme.h	/^    int32_t         nr_open_zones;$/;"	m	struct:FemuCtrl
nr_ring_ref	dataplane/xen-block.c	/^    unsigned int nr_ring_ref;$/;"	m	struct:XenBlockDataPlane	file:
nr_sectors	xen_blkif.h	/^    uint64_t       nr_sectors;       \/* # of contiguous sectors to discard   *\/$/;"	m	struct:blkif_x86_32_request_discard
nr_sectors	xen_blkif.h	/^    uint64_t       nr_sectors;       \/* # of contiguous sectors to discard   *\/$/;"	m	struct:blkif_x86_64_request_discard
nr_sects	hd-geometry.c	/^        uint32_t nr_sects;          \/* nr of sectors in partition *\/$/;"	m	struct:partition	file:
nr_segments	xen_blkif.h	/^    uint8_t        nr_segments;      \/* number of segments                   *\/$/;"	m	struct:blkif_x86_32_request
nr_segments	xen_blkif.h	/^    uint8_t        nr_segments;      \/* number of segments                   *\/$/;"	m	struct:blkif_x86_64_request
nr_tt_ios	femu/nvme.h	/^    int64_t         nr_tt_ios;$/;"	m	struct:FemuCtrl
nr_tt_late_ios	femu/nvme.h	/^    int64_t         nr_tt_late_ios;$/;"	m	struct:FemuCtrl
nr_zones	femu/zns/zns.h	/^    uint64_t    nr_zones;$/;"	m	struct:NvmeZoneReportHeader
ns	femu/nvme.h	/^    struct NvmeNamespace    *ns;$/;"	m	struct:NvmeRequest	typeref:struct:NvmeRequest::NvmeNamespace
ns	nvme.h	/^    struct NvmeNamespace    *ns;$/;"	m	struct:NvmeRequest	typeref:struct:NvmeRequest::NvmeNamespace
ns_blks	femu/nvme.h	/^    uint64_t        ns_blks;$/;"	m	struct:NvmeNamespace
ns_blks	femu/nvme.h	/^inline uint64_t ns_blks(NvmeNamespace *ns, uint8_t lba_idx)$/;"	f
ns_size	femu/nvme.h	/^    uint64_t    ns_size;$/;"	m	struct:FemuCtrl
ns_size	femu/ocssd/oc20.h	/^    uint64_t ns_size;$/;"	m	struct:Oc20Header
nsecs	femu/bbssd/backup/ftl.h	/^    int nsecs;$/;"	m	struct:nand_page
nsecs	femu/bbssd/ftl.h	/^    int nsecs;$/;"	m	struct:nand_page
nsfeat	femu/nvme.h	/^    uint8_t     nsfeat;$/;"	m	struct:NvmeIdNs
nsid	femu/nvme.h	/^    uint32_t    nsid;$/;"	m	struct:NvmeCmd
nsid	femu/nvme.h	/^    uint32_t    nsid;$/;"	m	struct:NvmeDsmCmd
nsid	femu/nvme.h	/^    uint32_t    nsid;$/;"	m	struct:NvmeErrorLog
nsid	femu/nvme.h	/^    uint32_t    nsid;$/;"	m	struct:NvmeIdentity
nsid	femu/nvme.h	/^    uint32_t    nsid;$/;"	m	struct:NvmeRwCmd
nsid	femu/ocssd/oc12.h	/^    uint32_t    nsid;$/;"	m	struct:Oc12BbtGet
nsid	femu/ocssd/oc12.h	/^    uint32_t    nsid;$/;"	m	struct:Oc12BbtSet
nsid	femu/ocssd/oc12.h	/^    uint32_t    nsid;$/;"	m	struct:Oc12DmCmd
nsid	femu/ocssd/oc12.h	/^    uint32_t    nsid;$/;"	m	struct:Oc12GetL2PTbl
nsid	femu/ocssd/oc12.h	/^    uint32_t    nsid;$/;"	m	struct:Oc12RwCmd
nsid	femu/ocssd/oc20.h	/^    uint32_t    nsid;$/;"	m	struct:Oc20RwCmd
nsid	femu/ocssd/oc20.h	/^    uint32_t nsid;$/;"	m	struct:Oc20DmCmd
nsid	femu/zns/zns.h	/^    uint32_t nsid;$/;"	m	struct:NvmeNamespaceParams
nsid	nvme-ns.h	/^    uint32_t nsid;$/;"	m	struct:NvmeNamespaceParams
nssrc	femu/nvme.h	/^    uint32_t    nssrc;$/;"	m	struct:NvmeBar
nsze	femu/nvme.h	/^    uint64_t    nsze;$/;"	m	struct:NvmeIdNs
num	pflash_cfi02.c	/^    uint32_t num;$/;"	m	struct:__anon52	file:
num_blk	femu/ocssd/oc12.h	/^    uint16_t    num_blk;$/;"	m	struct:Oc12IdGroup
num_ch	femu/nvme.h	/^    uint8_t  num_ch;$/;"	m	struct:OcCtrlParams
num_ch	femu/ocssd/oc12.h	/^    uint8_t     num_ch;$/;"	m	struct:Oc12IdGroup
num_ch	femu/ocssd/oc12.h	/^    uint8_t     num_ch;$/;"	m	struct:Oc12Params
num_chk	femu/ocssd/oc20.h	/^    uint32_t num_chk;$/;"	m	struct:Oc20IdGeo
num_errors	femu/nvme.h	/^    uint8_t     num_errors;$/;"	m	struct:FemuCtrl
num_floppies	fdc.c	/^    uint8_t num_floppies;$/;"	m	struct:FDCtrl	file:
num_grp	femu/ocssd/oc20.h	/^    uint16_t num_grp;$/;"	m	struct:Oc20IdGeo
num_io_queues	femu/nvme.h	/^    uint32_t    num_io_queues;$/;"	m	struct:FemuCtrl
num_io_queues	femu/nvme.h	/^    uint32_t    num_io_queues;$/;"	m	struct:NvmeFeatureVal
num_lun	femu/nvme.h	/^    uint8_t  num_lun;$/;"	m	struct:OcCtrlParams
num_lun	femu/ocssd/oc12.h	/^    uint8_t     num_lun;$/;"	m	struct:Oc12IdGroup
num_lun	femu/ocssd/oc12.h	/^    uint8_t     num_lun;$/;"	m	struct:Oc12Params
num_lun	femu/ocssd/oc20.h	/^    uint16_t num_lun;$/;"	m	struct:Oc20IdGeo
num_namespaces	femu/nvme.h	/^    uint32_t    num_namespaces;$/;"	m	struct:FemuCtrl
num_namespaces	femu/nvme.h	/^    uint32_t num_namespaces;$/;"	m	struct:NvmeParams
num_namespaces	femu/ocssd/oc20.h	/^    uint32_t num_namespaces;$/;"	m	struct:Oc20Header
num_namespaces	nvme.h	/^    uint32_t    num_namespaces;$/;"	m	struct:NvmeCtrl
num_pg	femu/ocssd/oc12.h	/^    uint16_t    num_pg;$/;"	m	struct:Oc12IdGroup
num_pln	femu/nvme.h	/^    uint8_t  num_pln;$/;"	m	struct:OcCtrlParams
num_pln	femu/ocssd/oc12.h	/^    uint8_t     num_pln;$/;"	m	struct:Oc12IdGroup
num_pln	femu/ocssd/oc12.h	/^    uint8_t     num_pln;$/;"	m	struct:Oc12Params
num_poller	femu/nvme.h	/^    uint32_t        num_poller;$/;"	m	struct:FemuCtrl
num_queues	femu/nvme.h	/^    uint32_t num_queues;$/;"	m	struct:NvmeParams
num_queues	nvme.h	/^    uint32_t num_queues; \/* deprecated since 5.1 *\/$/;"	m	struct:NvmeParams
num_zones	femu/nvme.h	/^    uint32_t        num_zones;$/;"	m	struct:FemuCtrl
number_of_error_log_entries	femu/nvme.h	/^    uint64_t    number_of_error_log_entries[2];$/;"	m	struct:NvmeSmartLog
nuse	femu/nvme.h	/^    uint64_t    nuse;$/;"	m	struct:NvmeIdNs
nvmcap	femu/nvme.h	/^    uint8_t     nvmcap[16];$/;"	m	struct:NvmeIdNs
nvme_abort	nvme.c	/^static uint16_t nvme_abort(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_abort_req	femu/nvme-admin.c	/^static uint16_t nvme_abort_req(FemuCtrl *n, NvmeCmd *cmd, uint32_t *result)$/;"	f	file:
nvme_add_kvm_msi_virq	femu/intr.c	/^static int nvme_add_kvm_msi_virq(FemuCtrl *n, NvmeCQueue *cq)$/;"	f	file:
nvme_addr_is_cmb	nvme.c	/^static bool nvme_addr_is_cmb(NvmeCtrl *n, hwaddr addr)$/;"	f	file:
nvme_addr_read	femu/dma.c	/^void nvme_addr_read(FemuCtrl *n, hwaddr addr, void *buf, int size)$/;"	f
nvme_addr_read	nvme.c	/^static int nvme_addr_read(NvmeCtrl *n, hwaddr addr, void *buf, int size)$/;"	f	file:
nvme_addr_to_cmb	nvme.c	/^static inline void *nvme_addr_to_cmb(NvmeCtrl *n, hwaddr addr)$/;"	f	file:
nvme_addr_write	femu/dma.c	/^void nvme_addr_write(FemuCtrl *n, hwaddr addr, void *buf, int size)$/;"	f
nvme_adm_opc_str	nvme.h	/^static inline const char *nvme_adm_opc_str(uint8_t opc)$/;"	f
nvme_admin_cmd	femu/nvme-admin.c	/^static uint16_t nvme_admin_cmd(FemuCtrl *n, NvmeCmd *cmd, NvmeCqe *cqe)$/;"	f	file:
nvme_admin_cmd	nvme.c	/^static uint16_t nvme_admin_cmd(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_aer	nvme.c	/^static uint16_t nvme_aer(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_bus_info	nvme.c	/^static const TypeInfo nvme_bus_info = {$/;"	v	file:
nvme_check_bounds	nvme.c	/^static inline uint16_t nvme_check_bounds(NvmeCtrl *n, NvmeNamespace *ns,$/;"	f	file:
nvme_check_constraints	femu/femu.c	/^static int nvme_check_constraints(FemuCtrl *n)$/;"	f	file:
nvme_check_constraints	nvme.c	/^static void nvme_check_constraints(NvmeCtrl *n, Error **errp)$/;"	f	file:
nvme_check_cqid	femu/nvme-util.c	/^int nvme_check_cqid(FemuCtrl *n, uint16_t cqid)$/;"	f
nvme_check_cqid	nvme.c	/^static int nvme_check_cqid(NvmeCtrl *n, uint16_t cqid)$/;"	f	file:
nvme_check_mdts	femu/nvme.h	/^inline uint16_t nvme_check_mdts(FemuCtrl *n, size_t len)$/;"	f
nvme_check_mdts	nvme.c	/^static inline uint16_t nvme_check_mdts(NvmeCtrl *n, size_t len)$/;"	f	file:
nvme_check_size	femu/nvme.h	/^static inline void nvme_check_size(void)$/;"	f
nvme_check_sqid	femu/nvme-util.c	/^int nvme_check_sqid(FemuCtrl *n, uint16_t sqid)$/;"	f
nvme_check_sqid	nvme.c	/^static int nvme_check_sqid(NvmeCtrl *n, uint16_t sqid)$/;"	f	file:
nvme_cid	nvme.c	/^static uint16_t nvme_cid(NvmeRequest *req)$/;"	f	file:
nvme_class_init	nvme.c	/^static void nvme_class_init(ObjectClass *oc, void *data)$/;"	f	file:
nvme_clear_ctrl	femu/femu.c	/^static void nvme_clear_ctrl(FemuCtrl *n, bool shutdown)$/;"	f	file:
nvme_clear_ctrl	nvme.c	/^static void nvme_clear_ctrl(NvmeCtrl *n)$/;"	f	file:
nvme_clear_events	nvme.c	/^static void nvme_clear_events(NvmeCtrl *n, uint8_t event_type)$/;"	f	file:
nvme_clear_guest_notifier	femu/intr.c	/^static void nvme_clear_guest_notifier(FemuCtrl *n)$/;"	f	file:
nvme_clear_virq	femu/intr.c	/^int nvme_clear_virq(FemuCtrl *n)$/;"	f
nvme_cmb_ops	femu/femu.c	/^static const MemoryRegionOps nvme_cmb_ops = {$/;"	v	file:
nvme_cmb_ops	nvme.c	/^static const MemoryRegionOps nvme_cmb_ops = {$/;"	v	file:
nvme_cmb_read	femu/femu.c	/^static uint64_t nvme_cmb_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
nvme_cmb_read	nvme.c	/^static uint64_t nvme_cmb_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
nvme_cmb_write	femu/femu.c	/^static void nvme_cmb_write(void *opaque, hwaddr addr, uint64_t data, unsigned size)$/;"	f	file:
nvme_cmb_write	nvme.c	/^static void nvme_cmb_write(void *opaque, hwaddr addr, uint64_t data,$/;"	f	file:
nvme_cmd_effects	femu/nvme-admin.c	/^static uint16_t nvme_cmd_effects(FemuCtrl *n, NvmeCmd *cmd, uint8_t csi,$/;"	f	file:
nvme_compare	femu/nvme-io.c	/^static uint16_t nvme_compare(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
nvme_copy_cmd	femu/nvme-io.c	/^static inline void nvme_copy_cmd(NvmeCmd *dst, NvmeCmd *src)$/;"	f	file:
nvme_cq	nvme.h	/^static inline NvmeCQueue *nvme_cq(NvmeRequest *req)$/;"	f
nvme_cq_full	femu/nvme-util.c	/^uint8_t nvme_cq_full(NvmeCQueue *cq)$/;"	f
nvme_cq_full	nvme.c	/^static uint8_t nvme_cq_full(NvmeCQueue *cq)$/;"	f	file:
nvme_create_cq	femu/nvme-admin.c	/^static uint16_t nvme_create_cq(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_create_cq	nvme.c	/^static uint16_t nvme_create_cq(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_create_poller	femu/nvme-io.c	/^void nvme_create_poller(FemuCtrl *n)$/;"	f
nvme_create_sq	femu/nvme-admin.c	/^static uint16_t nvme_create_sq(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_create_sq	nvme.c	/^static uint16_t nvme_create_sq(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_cse_acs	femu/nvme-admin.c	/^static const uint32_t nvme_cse_acs[256] = {$/;"	v	file:
nvme_cse_iocs_nvm	femu/nvme-admin.c	/^static const uint32_t nvme_cse_iocs_nvm[256] = {$/;"	v	file:
nvme_cse_iocs_zoned	femu/nvme-admin.c	/^static const uint32_t nvme_cse_iocs_zoned[256] = {$/;"	v	file:
nvme_csi_has_nvm_support	femu/nvme-admin.c	/^static inline bool nvme_csi_has_nvm_support(NvmeNamespace *ns)$/;"	f	file:
nvme_csi_has_nvm_support	femu/zns/zns.c	/^static inline bool nvme_csi_has_nvm_support(NvmeNamespace *ns)$/;"	f	file:
nvme_ctrl	nvme.h	/^static inline NvmeCtrl *nvme_ctrl(NvmeRequest *req)$/;"	f
nvme_del_cq	femu/nvme-admin.c	/^static uint16_t nvme_del_cq(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_del_cq	nvme.c	/^static uint16_t nvme_del_cq(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_del_sq	femu/nvme-admin.c	/^static uint16_t nvme_del_sq(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_del_sq	nvme.c	/^static uint16_t nvme_del_sq(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_destroy_poller	femu/femu.c	/^static void nvme_destroy_poller(FemuCtrl *n)$/;"	f	file:
nvme_discontig	femu/nvme.h	/^inline hwaddr nvme_discontig(uint64_t *dma_addr, uint16_t page_size,$/;"	f
nvme_dma	nvme.c	/^static uint16_t nvme_dma(NvmeCtrl *n, uint8_t *ptr, uint32_t len,$/;"	f	file:
nvme_dsm	femu/nvme-io.c	/^static uint16_t nvme_dsm(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
nvme_enqueue_event	nvme.c	/^static void nvme_enqueue_event(NvmeCtrl *n, uint8_t event_type,$/;"	f	file:
nvme_enqueue_req_completion	nvme.c	/^static void nvme_enqueue_req_completion(NvmeCQueue *cq, NvmeRequest *req)$/;"	f	file:
nvme_error_info	nvme.c	/^static uint16_t nvme_error_info(NvmeCtrl *n, uint8_t rae, uint32_t buf_len,$/;"	f	file:
nvme_error_log_info	femu/nvme-admin.c	/^static uint16_t nvme_error_log_info(FemuCtrl *n, NvmeCmd *cmd, uint32_t buf_len)$/;"	f	file:
nvme_exit	nvme.c	/^static void nvme_exit(PCIDevice *pci_dev)$/;"	f	file:
nvme_feature_cap	nvme.c	/^static const uint32_t nvme_feature_cap[NVME_FID_MAX] = {$/;"	v	file:
nvme_feature_support	nvme.c	/^static const bool nvme_feature_support[NVME_FID_MAX] = {$/;"	v	file:
nvme_flush	femu/nvme-io.c	/^static uint16_t nvme_flush(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
nvme_flush	nvme.c	/^static uint16_t nvme_flush(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_flush_from_hmb	femu/bbssd/hmb_spaceMgmt.c	/^bool nvme_flush_from_hmb(void *nvmeReq)$/;"	f
nvme_format	femu/nvme-admin.c	/^static uint16_t nvme_format(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_format_namespace	femu/nvme-admin.c	/^static uint16_t nvme_format_namespace(NvmeNamespace *ns, uint8_t lba_idx,$/;"	f	file:
nvme_free_cq	femu/nvme-util.c	/^void nvme_free_cq(NvmeCQueue *cq, FemuCtrl *n)$/;"	f
nvme_free_cq	nvme.c	/^static void nvme_free_cq(NvmeCQueue *cq, NvmeCtrl *n)$/;"	f	file:
nvme_free_sq	femu/nvme-util.c	/^void nvme_free_sq(NvmeSQueue *sq, FemuCtrl *n)$/;"	f
nvme_free_sq	nvme.c	/^static void nvme_free_sq(NvmeSQueue *sq, NvmeCtrl *n)$/;"	f	file:
nvme_fw_log_info	femu/nvme-admin.c	/^static uint16_t nvme_fw_log_info(FemuCtrl *n, NvmeCmd *cmd, uint32_t buf_len)$/;"	f	file:
nvme_fw_log_info	nvme.c	/^static uint16_t nvme_fw_log_info(NvmeCtrl *n, uint32_t buf_len, uint64_t off,$/;"	f	file:
nvme_get_feature	femu/nvme-admin.c	/^static uint16_t nvme_get_feature(FemuCtrl *n, NvmeCmd *cmd, NvmeCqe *cqe)$/;"	f	file:
nvme_get_feature	nvme.c	/^static uint16_t nvme_get_feature(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_get_feature_timestamp	nvme.c	/^static uint16_t nvme_get_feature_timestamp(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_get_log	femu/nvme-admin.c	/^static uint16_t nvme_get_log(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_get_log	nvme.c	/^static uint16_t nvme_get_log(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_get_timestamp	nvme.c	/^static inline uint64_t nvme_get_timestamp(const NvmeCtrl *n)$/;"	f	file:
nvme_identify	femu/nvme-admin.c	/^static uint16_t nvme_identify(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify	nvme.c	/^static uint16_t nvme_identify(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_identify_cmd_set	femu/nvme-admin.c	/^static uint16_t nvme_identify_cmd_set(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_ctrl	femu/nvme-admin.c	/^static uint16_t nvme_identify_ctrl(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_ctrl	nvme.c	/^static uint16_t nvme_identify_ctrl(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_identify_ctrl_csi	femu/nvme-admin.c	/^static uint16_t nvme_identify_ctrl_csi(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_ns	femu/nvme-admin.c	/^static uint16_t nvme_identify_ns(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_ns	nvme.c	/^static uint16_t nvme_identify_ns(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_identify_ns_csi	femu/nvme-admin.c	/^static uint16_t nvme_identify_ns_csi(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_ns_descr_list	femu/nvme-admin.c	/^static uint16_t nvme_identify_ns_descr_list(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_ns_descr_list	nvme.c	/^static uint16_t nvme_identify_ns_descr_list(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_identify_nslist	femu/nvme-admin.c	/^static uint16_t nvme_identify_nslist(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_identify_nslist	nvme.c	/^static uint16_t nvme_identify_nslist(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_identify_nslist_csi	femu/nvme-admin.c	/^static uint16_t nvme_identify_nslist_csi(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_inc_cq_tail	femu/nvme-util.c	/^void nvme_inc_cq_tail(NvmeCQueue *cq)$/;"	f
nvme_inc_cq_tail	nvme.c	/^static void nvme_inc_cq_tail(NvmeCQueue *cq)$/;"	f	file:
nvme_inc_sq_head	femu/nvme-util.c	/^void nvme_inc_sq_head(NvmeSQueue *sq)$/;"	f
nvme_inc_sq_head	nvme.c	/^static void nvme_inc_sq_head(NvmeSQueue *sq)$/;"	f	file:
nvme_info	nvme.c	/^static const TypeInfo nvme_info = {$/;"	v	file:
nvme_init_cmb	femu/femu.c	/^static void nvme_init_cmb(FemuCtrl *n)$/;"	f	file:
nvme_init_cmb	nvme.c	/^static void nvme_init_cmb(NvmeCtrl *n, PCIDevice *pci_dev)$/;"	f	file:
nvme_init_cq	femu/nvme-util.c	/^uint16_t nvme_init_cq(NvmeCQueue *cq, FemuCtrl *n, uint64_t dma_addr, uint16_t$/;"	f
nvme_init_cq	nvme.c	/^static void nvme_init_cq(NvmeCQueue *cq, NvmeCtrl *n, uint64_t dma_addr,$/;"	f	file:
nvme_init_ctrl	femu/femu.c	/^static void nvme_init_ctrl(FemuCtrl *n)$/;"	f	file:
nvme_init_ctrl	nvme.c	/^static void nvme_init_ctrl(NvmeCtrl *n, PCIDevice *pci_dev)$/;"	f	file:
nvme_init_namespace	femu/femu.c	/^static int nvme_init_namespace(FemuCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f	file:
nvme_init_namespaces	femu/femu.c	/^static int nvme_init_namespaces(FemuCtrl *n, Error **errp)$/;"	f	file:
nvme_init_pci	femu/femu.c	/^static void nvme_init_pci(FemuCtrl *n)$/;"	f	file:
nvme_init_pci	nvme.c	/^static void nvme_init_pci(NvmeCtrl *n, PCIDevice *pci_dev, Error **errp)$/;"	f	file:
nvme_init_pmr	nvme.c	/^static void nvme_init_pmr(NvmeCtrl *n, PCIDevice *pci_dev)$/;"	f	file:
nvme_init_sq	femu/nvme-util.c	/^uint16_t nvme_init_sq(NvmeSQueue *sq, FemuCtrl *n, uint64_t dma_addr, uint16_t$/;"	f
nvme_init_sq	nvme.c	/^static void nvme_init_sq(NvmeSQueue *sq, NvmeCtrl *n, uint64_t dma_addr,$/;"	f	file:
nvme_init_state	nvme.c	/^static void nvme_init_state(NvmeCtrl *n)$/;"	f	file:
nvme_instance_init	nvme.c	/^static void nvme_instance_init(Object *obj)$/;"	f	file:
nvme_io_cmd	femu/nvme-io.c	/^static uint16_t nvme_io_cmd(FemuCtrl *n, NvmeCmd *cmd, NvmeRequest *req)$/;"	f	file:
nvme_io_cmd	nvme.c	/^static uint16_t nvme_io_cmd(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_io_opc_str	nvme.h	/^static inline const char *nvme_io_opc_str(uint8_t opc)$/;"	f
nvme_irq_assert	nvme.c	/^static void nvme_irq_assert(NvmeCtrl *n, NvmeCQueue *cq)$/;"	f	file:
nvme_irq_check	nvme.c	/^static void nvme_irq_check(NvmeCtrl *n)$/;"	f	file:
nvme_irq_deassert	nvme.c	/^static void nvme_irq_deassert(NvmeCtrl *n, NvmeCQueue *cq)$/;"	f	file:
nvme_isr_notify_admin	femu/intr.c	/^void nvme_isr_notify_admin(void *opaque)$/;"	f
nvme_isr_notify_io	femu/intr.c	/^void nvme_isr_notify_io(void *opaque)$/;"	f
nvme_isr_notify_legacy	femu/intr.c	/^static void nvme_isr_notify_legacy(void *opaque)$/;"	f	file:
nvme_l2b	nvme-ns.h	/^static inline size_t nvme_l2b(NvmeNamespace *ns, uint64_t lba)$/;"	f
nvme_lba_to_sector_index	femu/ocssd/oc20.h	/^static inline uint64_t nvme_lba_to_sector_index(FemuCtrl *n, NvmeNamespace *ns,$/;"	f
nvme_map_addr	nvme.c	/^static uint16_t nvme_map_addr(NvmeCtrl *n, QEMUSGList *qsg, QEMUIOVector *iov,$/;"	f	file:
nvme_map_addr_cmb	nvme.c	/^static uint16_t nvme_map_addr_cmb(NvmeCtrl *n, QEMUIOVector *iov, hwaddr addr,$/;"	f	file:
nvme_map_dptr	nvme.c	/^static uint16_t nvme_map_dptr(NvmeCtrl *n, size_t len, NvmeRequest *req)$/;"	f	file:
nvme_map_prp	femu/dma.c	/^uint16_t nvme_map_prp(QEMUSGList *qsg, QEMUIOVector *iov, uint64_t prp1,$/;"	f
nvme_map_prp	nvme.c	/^static uint16_t nvme_map_prp(NvmeCtrl *n, uint64_t prp1, uint64_t prp2,$/;"	f	file:
nvme_map_sgl	nvme.c	/^static uint16_t nvme_map_sgl(NvmeCtrl *n, QEMUSGList *qsg, QEMUIOVector *iov,$/;"	f	file:
nvme_map_sgl_data	nvme.c	/^static uint16_t nvme_map_sgl_data(NvmeCtrl *n, QEMUSGList *qsg,$/;"	f	file:
nvme_mmio_ops	femu/femu.c	/^static const MemoryRegionOps nvme_mmio_ops = {$/;"	v	file:
nvme_mmio_ops	nvme.c	/^static const MemoryRegionOps nvme_mmio_ops = {$/;"	v	file:
nvme_mmio_read	femu/femu.c	/^static uint64_t nvme_mmio_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
nvme_mmio_read	nvme.c	/^static uint64_t nvme_mmio_read(void *opaque, hwaddr addr, unsigned size)$/;"	f	file:
nvme_mmio_write	femu/femu.c	/^static void nvme_mmio_write(void *opaque, hwaddr addr, uint64_t data, unsigned size)$/;"	f	file:
nvme_mmio_write	nvme.c	/^static void nvme_mmio_write(void *opaque, hwaddr addr, uint64_t data,$/;"	f	file:
nvme_ns	femu/nvme-admin.c	/^static inline NvmeNamespace *nvme_ns(FemuCtrl *n, uint32_t nsid)$/;"	f	file:
nvme_ns	nvme.h	/^static inline NvmeNamespace *nvme_ns(NvmeCtrl *n, uint32_t nsid)$/;"	f
nvme_ns_calc_blks	femu/ocssd/oc20.c	/^static uint64_t nvme_ns_calc_blks(FemuCtrl *n, NvmeNamespace *ns)$/;"	f	file:
nvme_ns_check_constraints	nvme-ns.c	/^static int nvme_ns_check_constraints(NvmeNamespace *ns, Error **errp)$/;"	f	file:
nvme_ns_class_init	nvme-ns.c	/^static void nvme_ns_class_init(ObjectClass *oc, void *data)$/;"	f	file:
nvme_ns_drain	nvme-ns.c	/^void nvme_ns_drain(NvmeNamespace *ns)$/;"	f
nvme_ns_flush	nvme-ns.c	/^void nvme_ns_flush(NvmeNamespace *ns)$/;"	f
nvme_ns_info	nvme-ns.c	/^static const TypeInfo nvme_ns_info = {$/;"	v	file:
nvme_ns_init	nvme-ns.c	/^static void nvme_ns_init(NvmeNamespace *ns)$/;"	f	file:
nvme_ns_init_blk	nvme-ns.c	/^static int nvme_ns_init_blk(NvmeCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f	file:
nvme_ns_init_identify	femu/femu.c	/^static void nvme_ns_init_identify(FemuCtrl *n, NvmeIdNs *id_ns)$/;"	f	file:
nvme_ns_init_predef	femu/ocssd/oc20.c	/^static void nvme_ns_init_predef(FemuCtrl *n, NvmeNamespace *ns)$/;"	f	file:
nvme_ns_instance_init	nvme-ns.c	/^static void nvme_ns_instance_init(Object *obj)$/;"	f	file:
nvme_ns_lbads	nvme-ns.h	/^static inline uint8_t nvme_ns_lbads(NvmeNamespace *ns)$/;"	f
nvme_ns_lbaf	nvme-ns.h	/^static inline NvmeLBAF *nvme_ns_lbaf(NvmeNamespace *ns)$/;"	f
nvme_ns_nlbas	nvme-ns.h	/^static inline uint64_t nvme_ns_nlbas(NvmeNamespace *ns)$/;"	f
nvme_ns_props	nvme-ns.c	/^static Property nvme_ns_props[] = {$/;"	v	file:
nvme_ns_realize	nvme-ns.c	/^static void nvme_ns_realize(DeviceState *dev, Error **errp)$/;"	f	file:
nvme_ns_register_types	nvme-ns.c	/^static void nvme_ns_register_types(void)$/;"	f	file:
nvme_ns_setup	nvme-ns.c	/^int nvme_ns_setup(NvmeCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f
nvme_nsid	nvme-ns.h	/^static inline uint32_t nvme_nsid(NvmeNamespace *ns)$/;"	f
nvme_nsid_valid	femu/nvme-admin.c	/^static bool nvme_nsid_valid(FemuCtrl *n, uint32_t nsid)$/;"	f	file:
nvme_nsid_valid	nvme.c	/^static bool nvme_nsid_valid(NvmeCtrl *n, uint32_t nsid)$/;"	f	file:
nvme_poller	femu/nvme-io.c	/^static void *nvme_poller(void *arg)$/;"	f	file:
nvme_post_cqe	femu/nvme-io.c	/^static void nvme_post_cqe(NvmeCQueue *cq, NvmeRequest *req)$/;"	f	file:
nvme_post_cqes	nvme.c	/^static void nvme_post_cqes(void *opaque)$/;"	f	file:
nvme_post_cqes_io	femu/nvme-io.c	/^void nvme_post_cqes_io(void *opaque)$/;"	f
nvme_process_aers	nvme.c	/^static void nvme_process_aers(void *opaque)$/;"	f	file:
nvme_process_cq_cpl	femu/nvme-io.c	/^static void nvme_process_cq_cpl(void *arg, int index_poller)$/;"	f	file:
nvme_process_db	nvme.c	/^static void nvme_process_db(NvmeCtrl *n, hwaddr addr, int val)$/;"	f	file:
nvme_process_db_admin	femu/femu.c	/^static void nvme_process_db_admin(FemuCtrl *n, hwaddr addr, int val)$/;"	f	file:
nvme_process_db_io	femu/femu.c	/^static void nvme_process_db_io(FemuCtrl *n, hwaddr addr, int val)$/;"	f	file:
nvme_process_sq	nvme.c	/^static void nvme_process_sq(void *opaque)$/;"	f	file:
nvme_process_sq_admin	femu/nvme-admin.c	/^void nvme_process_sq_admin(void *opaque)$/;"	f
nvme_process_sq_io	femu/nvme-io.c	/^static void nvme_process_sq_io(void *opaque, int index_poller)$/;"	f	file:
nvme_props	nvme.c	/^static Property nvme_props[] = {$/;"	v	file:
nvme_realize	nvme.c	/^static void nvme_realize(PCIDevice *pci_dev, Error **errp)$/;"	f	file:
nvme_register_bbssd	femu/bbssd/backup/bb.c	/^int nvme_register_bbssd(FemuCtrl *n)$/;"	f
nvme_register_bbssd	femu/bbssd/bb.c	/^int nvme_register_bbssd(FemuCtrl *n)$/;"	f
nvme_register_extensions	femu/femu.c	/^static int nvme_register_extensions(FemuCtrl *n)$/;"	f	file:
nvme_register_namespace	nvme.c	/^int nvme_register_namespace(NvmeCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f
nvme_register_nossd	femu/nossd/nop.c	/^int nvme_register_nossd(FemuCtrl *n)$/;"	f
nvme_register_ocssd12	femu/ocssd/oc12.c	/^int nvme_register_ocssd12(FemuCtrl *n)$/;"	f
nvme_register_ocssd20	femu/ocssd/oc20.c	/^int nvme_register_ocssd20(FemuCtrl *n)$/;"	f
nvme_register_types	nvme.c	/^static void nvme_register_types(void)$/;"	f	file:
nvme_register_znssd	femu/zns/zns.c	/^int nvme_register_znssd(FemuCtrl *n)$/;"	f
nvme_remove_kvm_msi_virq	femu/intr.c	/^static void nvme_remove_kvm_msi_virq(NvmeCQueue *cq)$/;"	f	file:
nvme_req_clear	nvme.c	/^static void nvme_req_clear(NvmeRequest *req)$/;"	f	file:
nvme_req_exit	nvme.c	/^static void nvme_req_exit(NvmeRequest *req)$/;"	f	file:
nvme_rpt_empty_id_struct	femu/nvme-admin.c	/^static uint16_t nvme_rpt_empty_id_struct(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
nvme_rw	femu/nvme-io.c	/^uint16_t nvme_rw(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd, NvmeRequest *req)$/;"	f
nvme_rw	nvme.c	/^static uint16_t nvme_rw(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_rw_cb	nvme.c	/^static void nvme_rw_cb(void *opaque, int ret)$/;"	f	file:
nvme_rw_is_write	femu/ocssd/oc20.h	/^static inline int nvme_rw_is_write(NvmeRequest *req)$/;"	f
nvme_set_blk_stats	nvme.c	/^static void nvme_set_blk_stats(NvmeNamespace *ns, struct nvme_stats *stats)$/;"	f	file:
nvme_set_ctrl_name	femu/nvme-util.c	/^void nvme_set_ctrl_name(FemuCtrl *n, const char *mn, const char *sn, int *dev_id)$/;"	f
nvme_set_db_memory	femu/nvme-admin.c	/^static uint16_t nvme_set_db_memory(FemuCtrl *n, const NvmeCmd *cmd)$/;"	f	file:
nvme_set_error_page	femu/nvme-util.c	/^void nvme_set_error_page(FemuCtrl *n, uint16_t sqid, uint16_t cid, uint16_t$/;"	f
nvme_set_feature	femu/nvme-admin.c	/^static uint16_t nvme_set_feature(FemuCtrl *n, NvmeCmd *cmd, NvmeCqe *cqe)$/;"	f	file:
nvme_set_feature	nvme.c	/^static uint16_t nvme_set_feature(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_set_feature_timestamp	nvme.c	/^static uint16_t nvme_set_feature_timestamp(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_set_guest_notifier	femu/intr.c	/^static int nvme_set_guest_notifier(FemuCtrl *n, EventNotifier *notifier,$/;"	f	file:
nvme_set_timestamp	nvme.c	/^static inline void nvme_set_timestamp(NvmeCtrl *n, uint64_t ts)$/;"	f	file:
nvme_setup_discontig	femu/nvme-util.c	/^uint64_t *nvme_setup_discontig(FemuCtrl *n, uint64_t prp_addr, uint16_t$/;"	f
nvme_setup_virq	femu/intr.c	/^int nvme_setup_virq(FemuCtrl *n, NvmeCQueue *cq)$/;"	f
nvme_smart_info	femu/nvme-admin.c	/^static uint16_t nvme_smart_info(FemuCtrl *n, NvmeCmd *cmd, uint32_t buf_len)$/;"	f	file:
nvme_smart_info	nvme.c	/^static uint16_t nvme_smart_info(NvmeCtrl *n, uint8_t rae, uint32_t buf_len,$/;"	f	file:
nvme_sq_empty	femu/nvme-util.c	/^uint8_t nvme_sq_empty(NvmeSQueue *sq)$/;"	f
nvme_sq_empty	nvme.c	/^static uint8_t nvme_sq_empty(NvmeSQueue *sq)$/;"	f	file:
nvme_sqid	nvme.c	/^static uint16_t nvme_sqid(NvmeRequest *req)$/;"	f	file:
nvme_start_ctrl	femu/femu.c	/^static int nvme_start_ctrl(FemuCtrl *n)$/;"	f	file:
nvme_start_ctrl	nvme.c	/^static int nvme_start_ctrl(NvmeCtrl *n)$/;"	f	file:
nvme_stats	nvme.c	/^struct nvme_stats {$/;"	s	file:
nvme_update_cq_head	femu/nvme-util.c	/^void nvme_update_cq_head(NvmeCQueue *cq)$/;"	f
nvme_update_sq_eventidx	femu/nvme-io.c	/^static void nvme_update_sq_eventidx(const NvmeSQueue *sq)$/;"	f	file:
nvme_update_sq_tail	femu/nvme-util.c	/^void nvme_update_sq_tail(NvmeSQueue *sq)$/;"	f
nvme_vector_mask	femu/intr.c	/^static void nvme_vector_mask(PCIDevice *dev, unsigned vector)$/;"	f	file:
nvme_vector_poll	femu/intr.c	/^static void nvme_vector_poll(PCIDevice *dev, unsigned int vector_start, unsigned$/;"	f	file:
nvme_vector_unmask	femu/intr.c	/^static int nvme_vector_unmask(PCIDevice *dev, unsigned vector, MSIMessage msg)$/;"	f	file:
nvme_vmstate	nvme.c	/^static const VMStateDescription nvme_vmstate = {$/;"	v	file:
nvme_write_bar	femu/femu.c	/^static void nvme_write_bar(FemuCtrl *n, hwaddr offset, uint64_t data, unsigned size)$/;"	f	file:
nvme_write_bar	nvme.c	/^static void nvme_write_bar(NvmeCtrl *n, hwaddr offset, uint64_t data,$/;"	f	file:
nvme_write_uncor	femu/nvme-io.c	/^static uint16_t nvme_write_uncor(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
nvme_write_zeroes	nvme.c	/^static uint16_t nvme_write_zeroes(NvmeCtrl *n, NvmeRequest *req)$/;"	f	file:
nvme_write_zeros	femu/nvme-io.c	/^static uint16_t nvme_write_zeros(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
nvmsetid	femu/nvme.h	/^    uint16_t    nvmsetid;$/;"	m	struct:NvmeIdentity
nvscc	femu/nvme.h	/^    uint8_t     nvscc;$/;"	m	struct:NvmeIdCtrl
oacs	femu/nvme.h	/^    uint16_t    oacs;$/;"	m	struct:FemuCtrl
oacs	femu/nvme.h	/^    uint16_t    oacs;$/;"	m	struct:NvmeIdCtrl
oacs	femu/nvme.h	/^    uint16_t oacs;$/;"	m	struct:NvmeParams
oaes	femu/nvme.h	/^    uint32_t    oaes;$/;"	m	struct:NvmeIdCtrl
oc12_admin_cmd	femu/ocssd/oc12.c	/^static uint16_t oc12_admin_cmd(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc12_advance_status	femu/ocssd/oc12.c	/^static int oc12_advance_status(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_bbt_get	femu/ocssd/oc12.c	/^static uint16_t oc12_bbt_get(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc12_bbt_set	femu/ocssd/oc12.c	/^static uint16_t oc12_bbt_set(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc12_check_size	femu/ocssd/oc12.h	/^static inline void oc12_check_size(void)$/;"	f
oc12_ctrl	femu/nvme.h	/^    Oc12Ctrl  *oc12_ctrl;$/;"	m	struct:FemuCtrl
oc12_erase_async	femu/ocssd/oc12.c	/^static uint16_t oc12_erase_async(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_exit	femu/ocssd/oc12.c	/^static void oc12_exit(FemuCtrl *n)$/;"	f	file:
oc12_get_l2p_tbl	femu/ocssd/oc12.c	/^static uint16_t oc12_get_l2p_tbl(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc12_identity	femu/ocssd/oc12.c	/^static uint16_t oc12_identity(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc12_init	femu/ocssd/oc12.c	/^static void oc12_init(FemuCtrl *n, Error **errp)$/;"	f	file:
oc12_init_bbtbl	femu/ocssd/oc12.c	/^static int oc12_init_bbtbl(FemuCtrl *n, NvmeNamespace *ns)$/;"	f	file:
oc12_init_id_ctrl	femu/ocssd/oc12.c	/^static void oc12_init_id_ctrl(Oc12Ctrl *ln)$/;"	f	file:
oc12_init_meta	femu/ocssd/oc12.c	/^static int oc12_init_meta(Oc12Ctrl *ln)$/;"	f	file:
oc12_init_misc	femu/ocssd/oc12.c	/^static int oc12_init_misc(FemuCtrl *n)$/;"	f	file:
oc12_init_more	femu/ocssd/oc12.c	/^static int oc12_init_more(FemuCtrl *n)$/;"	f	file:
oc12_init_params	femu/ocssd/oc12.c	/^static int oc12_init_params(FemuCtrl *n)$/;"	f	file:
oc12_io_cmd	femu/ocssd/oc12.c	/^static uint16_t oc12_io_cmd(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_meta_blk_set_erased	femu/ocssd/oc12.c	/^static int oc12_meta_blk_set_erased(NvmeNamespace *ns, Oc12Ctrl *ln,$/;"	f	file:
oc12_meta_index	femu/ocssd/oc12.c	/^static void *oc12_meta_index(Oc12Ctrl *ln, void *meta, uint32_t index)$/;"	f	file:
oc12_meta_state_get	femu/ocssd/oc12.c	/^static int oc12_meta_state_get(Oc12Ctrl *ln, uint64_t ppa, uint32_t *state)$/;"	f	file:
oc12_meta_state_set_written	femu/ocssd/oc12.c	/^static int oc12_meta_state_set_written(Oc12Ctrl *ln, uint64_t ppa)$/;"	f	file:
oc12_metadata_format	femu/ocssd/oc12.h	/^struct oc12_metadata_format {$/;"	s
oc12_nvme_rw	femu/ocssd/oc12.c	/^static uint16_t oc12_nvme_rw(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_ppa_list	femu/nvme.h	/^    uint64_t                *oc12_ppa_list;$/;"	m	struct:NvmeRequest
oc12_read	femu/ocssd/oc12.c	/^static uint16_t oc12_read(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_read_oob_meta	femu/ocssd/oc12.c	/^static int oc12_read_oob_meta(Oc12Ctrl *ln, uint64_t ppa, void *meta)$/;"	f	file:
oc12_read_ppa_list	femu/ocssd/oc12.c	/^static void oc12_read_ppa_list(FemuCtrl *n, Oc12RwCmd *cmd, uint64_t *ppa_list)$/;"	f	file:
oc12_read_tbls	femu/ocssd/oc12.c	/^static int oc12_read_tbls(FemuCtrl *n)$/;"	f	file:
oc12_release_locks	femu/ocssd/oc12.c	/^static void oc12_release_locks(FemuCtrl *n)$/;"	f	file:
oc12_rw_check_req	femu/ocssd/oc12.c	/^static uint16_t oc12_rw_check_req(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_set_ctrl_str	femu/ocssd/oc12.c	/^static void oc12_set_ctrl_str(FemuCtrl *n)$/;"	f	file:
oc12_slba	femu/nvme.h	/^    uint64_t                oc12_slba;$/;"	m	struct:NvmeRequest
oc12_tbl_initialize	femu/ocssd/oc12.c	/^static void oc12_tbl_initialize(NvmeNamespace *ns)$/;"	f	file:
oc12_tbl_size	femu/ocssd/oc12.c	/^static uint32_t oc12_tbl_size(NvmeNamespace *ns)$/;"	f	file:
oc12_tgt_meta	femu/ocssd/oc12.h	/^struct oc12_tgt_meta {$/;"	s
oc12_write	femu/ocssd/oc12.c	/^static uint16_t oc12_write(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc12_write_oob_meta	femu/ocssd/oc12.c	/^static int oc12_write_oob_meta(Oc12Ctrl *ln, uint64_t ppa, void *meta)$/;"	f	file:
oc20	femu/nvme.h	/^    Oc20Params oc20;$/;"	m	struct:NvmeParams
oc20_admin_cmd	femu/ocssd/oc20.c	/^static uint16_t oc20_admin_cmd(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc20_advance_status	femu/ocssd/oc20.c	/^static int oc20_advance_status(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc20_advance_wp	femu/ocssd/oc20.c	/^static uint16_t oc20_advance_wp(FemuCtrl *n, NvmeNamespace *ns, uint64_t lba,$/;"	f	file:
oc20_chunk_get_state	femu/ocssd/oc20.c	/^static Oc20CS *oc20_chunk_get_state(FemuCtrl *n, NvmeNamespace *ns, uint64_t lba)$/;"	f	file:
oc20_chunk_info	femu/ocssd/oc20.c	/^static uint16_t oc20_chunk_info(FemuCtrl *n, NvmeCmd *cmd, uint32_t buf_len,$/;"	f	file:
oc20_chunk_set_free	femu/ocssd/oc20.c	/^static uint16_t oc20_chunk_set_free(FemuCtrl *n, NvmeNamespace *ns,$/;"	f	file:
oc20_dma_read	femu/ocssd/oc20.c	/^static uint16_t oc20_dma_read(FemuCtrl *n, uint8_t *ptr, uint32_t len,$/;"	f	file:
oc20_dma_write	femu/ocssd/oc20.c	/^static uint16_t oc20_dma_write(FemuCtrl *n, uint8_t *ptr, uint32_t len,$/;"	f	file:
oc20_erase	femu/ocssd/oc20.c	/^static uint16_t oc20_erase(FemuCtrl *n, NvmeCmd *cmd, NvmeRequest *req)$/;"	f	file:
oc20_exit	femu/ocssd/oc20.c	/^static void oc20_exit(FemuCtrl *n)$/;"	f	file:
oc20_free_namespace	femu/ocssd/oc20.c	/^static void oc20_free_namespace(FemuCtrl *n, NvmeNamespace *ns)$/;"	f	file:
oc20_get_log	femu/ocssd/oc20.c	/^static uint16_t oc20_get_log(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc20_identify	femu/ocssd/oc20.c	/^static uint16_t oc20_identify(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc20_init	femu/ocssd/oc20.c	/^static void oc20_init(FemuCtrl *n, Error **errp)$/;"	f	file:
oc20_init_chunk_info	femu/ocssd/oc20.c	/^static uint16_t oc20_init_chunk_info(Oc20Namespace *lns)$/;"	f	file:
oc20_init_misc	femu/ocssd/oc20.c	/^static int oc20_init_misc(FemuCtrl *n)$/;"	f	file:
oc20_init_namespace	femu/ocssd/oc20.c	/^static int oc20_init_namespace(FemuCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f	file:
oc20_init_namespaces	femu/ocssd/oc20.c	/^static int oc20_init_namespaces(FemuCtrl *n, Error **errp)$/;"	f	file:
oc20_io_cmd	femu/ocssd/oc20.c	/^static uint16_t oc20_io_cmd(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc20_lba_str	femu/ocssd/oc20.c	/^static int oc20_lba_str(char *buf, FemuCtrl *n, NvmeNamespace *ns, uint64_t lba)$/;"	f	file:
oc20_lba_to_chunk_index	femu/ocssd/oc20.h	/^static inline uint64_t oc20_lba_to_chunk_index(FemuCtrl *n, NvmeNamespace *ns,$/;"	f
oc20_lba_to_sector_index	femu/ocssd/oc20.h	/^static inline uint64_t oc20_lba_to_sector_index(FemuCtrl *n, NvmeNamespace *ns,$/;"	f
oc20_lba_valid	femu/ocssd/oc20.h	/^static inline int oc20_lba_valid(FemuCtrl *n, NvmeNamespace *ns, uint64_t lba)$/;"	f
oc20_nvme_ns_init_identify	femu/ocssd/oc20.c	/^static void oc20_nvme_ns_init_identify(FemuCtrl *n, NvmeIdNs *id_ns)$/;"	f	file:
oc20_nvme_rw	femu/ocssd/oc20.c	/^static uint16_t oc20_nvme_rw(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc20_parse_lba_list	femu/ocssd/oc20.c	/^static void oc20_parse_lba_list(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
oc20_release_locks	femu/ocssd/oc20.c	/^static void oc20_release_locks(FemuCtrl *n)$/;"	f	file:
oc20_resetfail_load	femu/ocssd/oc20.c	/^static int oc20_resetfail_load(FemuCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f	file:
oc20_rw	femu/ocssd/oc20.c	/^static uint16_t oc20_rw(FemuCtrl *n, NvmeCmd *cmd, NvmeRequest *req)$/;"	f	file:
oc20_rw_check_chunk_read	femu/ocssd/oc20.c	/^static uint16_t oc20_rw_check_chunk_read(FemuCtrl *n, NvmeCmd *cmd,$/;"	f	file:
oc20_rw_check_chunk_write	femu/ocssd/oc20.c	/^static uint16_t oc20_rw_check_chunk_write(FemuCtrl *n, NvmeCmd *cmd,$/;"	f	file:
oc20_rw_check_read_req	femu/ocssd/oc20.c	/^static uint16_t oc20_rw_check_read_req(FemuCtrl *n, NvmeCmd *cmd,$/;"	f	file:
oc20_rw_check_req	femu/ocssd/oc20.c	/^static uint16_t oc20_rw_check_req(FemuCtrl *n, NvmeCmd *cmd, NvmeRequest *req)$/;"	f	file:
oc20_rw_check_vector_req	femu/ocssd/oc20.c	/^static uint16_t oc20_rw_check_vector_req(FemuCtrl *n, NvmeCmd *cmd,$/;"	f	file:
oc20_rw_check_write_req	femu/ocssd/oc20.c	/^static uint16_t oc20_rw_check_write_req(FemuCtrl *n, NvmeCmd *cmd,$/;"	f	file:
oc20_rw_is_write	femu/ocssd/oc20.h	/^static inline int oc20_rw_is_write(NvmeRequest *req)$/;"	f
oc20_set_ctrl_str	femu/ocssd/oc20.c	/^static void oc20_set_ctrl_str(FemuCtrl *n)$/;"	f	file:
oc20_set_log	femu/ocssd/oc20.c	/^static uint16_t oc20_set_log(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
oc20_writefail_load	femu/ocssd/oc20.c	/^static int oc20_writefail_load(FemuCtrl *n, NvmeNamespace *ns, Error **errp)$/;"	f	file:
oc_params	femu/nvme.h	/^    OcCtrlParams    oc_params;$/;"	m	struct:FemuCtrl
of_femu	femu/bbssd/hmb_types.h	/^	HmbTime of_femu;$/;"	m	struct:HmbDebugTimePerRequest
of_femu__get_empty_block	femu/bbssd/hmb_types.h	/^	HmbTime of_femu__get_empty_block;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__RC_caching	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__RC_caching;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__bm_op	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__bm_op;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__delete	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__delete;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__flush	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__flush;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__insert	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__insert;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__memcpy	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__memcpy;$/;"	m	struct:HmbDebugTimePerRequest
of_hmb__table_get_by_lpn	femu/bbssd/hmb_types.h	/^	HmbTime of_hmb__table_get_by_lpn;$/;"	m	struct:HmbDebugTimePerRequest
of_qemu__iov	femu/bbssd/hmb_types.h	/^	HmbTime of_qemu__iov;$/;"	m	struct:HmbDebugTimePerRequest
of_qemu__memcpy	femu/bbssd/hmb_types.h	/^	HmbTime of_qemu__memcpy;$/;"	m	struct:HmbDebugTimePerRequest
of_qemu__sglist	femu/bbssd/hmb_types.h	/^	HmbTime of_qemu__sglist;$/;"	m	struct:HmbDebugTimePerRequest
offset	femu/bbssd/hmb_types.h	/^	uint32_t offset;		\/* 4bytes (acc: 8) *\/$/;"	m	struct:HmbSharedEnt
offset	femu/bbssd/hmb_types.h	/^	uint32_t offset;     \/* 4bytes (acc: 10) *\/$/;"	m	struct:HmbSegEnt
offset	femu/bbssd/hmb_types.h	/^	uint32_t offset;$/;"	m	struct:HmbSplitTable
offset	nand.c	/^    int offset;$/;"	m	struct:NANDFlashState	file:
offset_from	femu/bbssd/hmb_types.h	/^	uint32_t           offset_from;$/;"	m	struct:HmbSegEmpty
offset_to	femu/bbssd/hmb_types.h	/^	uint32_t           offset_to;$/;"	m	struct:HmbSegEmpty
old_multiple_chip_handling	pflash_cfi01.c	/^    bool old_multiple_chip_handling;$/;"	m	struct:PFlashCFI01	file:
oncs	femu/nvme.h	/^    uint16_t    oncs;$/;"	m	struct:FemuCtrl
oncs	femu/nvme.h	/^    uint16_t    oncs;$/;"	m	struct:NvmeIdCtrl
oncs	femu/nvme.h	/^    uint16_t oncs;$/;"	m	struct:NvmeParams
onenand_class_init	onenand.c	/^static void onenand_class_init(ObjectClass *klass, void *data)$/;"	f	file:
onenand_command	onenand.c	/^static void onenand_command(OneNANDState *s)$/;"	f	file:
onenand_erase	onenand.c	/^static inline int onenand_erase(OneNANDState *s, int sec, int num)$/;"	f	file:
onenand_info	onenand.c	/^static const TypeInfo onenand_info = {$/;"	v	file:
onenand_intr_update	onenand.c	/^static void onenand_intr_update(OneNANDState *s)$/;"	f	file:
onenand_load_main	onenand.c	/^static inline int onenand_load_main(OneNANDState *s, int sec, int secn,$/;"	f	file:
onenand_load_spare	onenand.c	/^static inline int onenand_load_spare(OneNANDState *s, int sec, int secn,$/;"	f	file:
onenand_mem_setup	onenand.c	/^static void onenand_mem_setup(OneNANDState *s)$/;"	f	file:
onenand_ops	onenand.c	/^static const MemoryRegionOps onenand_ops = {$/;"	v	file:
onenand_post_load	onenand.c	/^static int onenand_post_load(void *opaque, int version_id)$/;"	f	file:
onenand_pre_save	onenand.c	/^static int onenand_pre_save(void *opaque)$/;"	f	file:
onenand_prog_main	onenand.c	/^static inline int onenand_prog_main(OneNANDState *s, int sec, int secn,$/;"	f	file:
onenand_prog_spare	onenand.c	/^static inline int onenand_prog_spare(OneNANDState *s, int sec, int secn,$/;"	f	file:
onenand_properties	onenand.c	/^static Property onenand_properties[] = {$/;"	v	file:
onenand_raw_otp	onenand.c	/^void *onenand_raw_otp(DeviceState *onenand_device)$/;"	f
onenand_read	onenand.c	/^static uint64_t onenand_read(void *opaque, hwaddr addr,$/;"	f	file:
onenand_realize	onenand.c	/^static void onenand_realize(DeviceState *dev, Error **errp)$/;"	f	file:
onenand_register_types	onenand.c	/^static void onenand_register_types(void)$/;"	f	file:
onenand_reset	onenand.c	/^static void onenand_reset(OneNANDState *s, int cold)$/;"	f	file:
onenand_system_reset	onenand.c	/^static void onenand_system_reset(DeviceState *dev)$/;"	f	file:
onenand_write	onenand.c	/^static void onenand_write(void *opaque, hwaddr addr,$/;"	f	file:
oob_shift	nand.c	/^    int page_shift, oob_shift, erase_shift, addr_shift;$/;"	m	struct:NANDFlashState	file:
op_handler_t	femu/zns/zns.c	/^typedef uint16_t (*op_handler_t)(NvmeNamespace *, NvmeZone *, NvmeZoneState,$/;"	t	file:
opaque	femu/nvme.h	/^    void                    *opaque;$/;"	m	struct:NvmeRequest
opcode	femu/nvme.h	/^    uint16_t    opcode : 8;$/;"	m	struct:NvmeCmd
opcode	femu/nvme.h	/^    uint8_t     opcode;$/;"	m	struct:NvmeCreateCq
opcode	femu/nvme.h	/^    uint8_t     opcode;$/;"	m	struct:NvmeCreateSq
opcode	femu/nvme.h	/^    uint8_t     opcode;$/;"	m	struct:NvmeDeleteQ
opcode	femu/nvme.h	/^    uint8_t     opcode;$/;"	m	struct:NvmeDsmCmd
opcode	femu/nvme.h	/^    uint8_t     opcode;$/;"	m	struct:NvmeIdentity
opcode	femu/nvme.h	/^    uint8_t     opcode;$/;"	m	struct:NvmeRwCmd
opcode	femu/ocssd/oc12.h	/^    uint8_t     opcode;$/;"	m	struct:Oc12BbtGet
opcode	femu/ocssd/oc12.h	/^    uint8_t     opcode;$/;"	m	struct:Oc12BbtSet
opcode	femu/ocssd/oc12.h	/^    uint8_t     opcode;$/;"	m	struct:Oc12DmCmd
opcode	femu/ocssd/oc12.h	/^    uint8_t     opcode;$/;"	m	struct:Oc12GetL2PTbl
opcode	femu/ocssd/oc12.h	/^    uint8_t     opcode;$/;"	m	struct:Oc12RwCmd
opcode	femu/ocssd/oc20.h	/^    uint16_t    opcode :  8;$/;"	m	struct:Oc20RwCmd
opcode	femu/ocssd/oc20.h	/^    uint8_t  opcode;$/;"	m	struct:Oc20DmCmd
operation	xen_blkif.h	/^    uint8_t         operation;       \/* copied from request *\/$/;"	m	struct:blkif_x86_32_response
operation	xen_blkif.h	/^    uint8_t         operation;       \/* copied from request *\/$/;"	m	struct:blkif_x86_64_response
operation	xen_blkif.h	/^    uint8_t        operation;        \/* BLKIF_OP_???                         *\/$/;"	m	struct:blkif_x86_32_request
operation	xen_blkif.h	/^    uint8_t        operation;        \/* BLKIF_OP_???                         *\/$/;"	m	struct:blkif_x86_64_request
operation	xen_blkif.h	/^    uint8_t        operation;        \/* BLKIF_OP_DISCARD                     *\/$/;"	m	struct:blkif_x86_32_request_discard
operation	xen_blkif.h	/^    uint8_t        operation;        \/* BLKIF_OP_DISCARD                     *\/$/;"	m	struct:blkif_x86_64_request_discard
options	nand.c	/^    uint32_t options;$/;"	m	struct:__anon45	file:
orig_mem	pflash_cfi02.c	/^    MemoryRegion orig_mem;$/;"	m	struct:PFlashCFI02	file:
out_req_list	femu/nvme.h	/^    QTAILQ_HEAD(out_req_list, NvmeRequest) out_req_list;$/;"	m	struct:NvmeSQueue
out_req_list	nvme.h	/^    QTAILQ_HEAD(, NvmeRequest) out_req_list;$/;"	m	struct:NvmeSQueue
outstanding_aers	femu/nvme.h	/^    uint8_t     outstanding_aers;$/;"	m	struct:FemuCtrl
outstanding_aers	nvme.h	/^    uint8_t     outstanding_aers;$/;"	m	struct:NvmeCtrl
ozcs	femu/zns/zns.h	/^    uint16_t    ozcs;$/;"	m	struct:NvmeIdNsZoned
page_bits	femu/nvme.h	/^    uint16_t    page_bits;$/;"	m	struct:FemuCtrl
page_bits	nvme.h	/^    uint16_t    page_bits;$/;"	m	struct:NvmeCtrl
page_rd_lat	femu/nand/nand.h	/^    int64_t page_rd_lat[MAX_FLASH_TYPE];$/;"	m	struct:NandFlash
page_shift	nand.c	/^    int page_shift, oob_shift, erase_shift, addr_shift;$/;"	m	struct:NANDFlashState	file:
page_shift	nand.c	/^    int page_shift;$/;"	m	struct:__anon45	file:
page_size	femu/bbssd/hmb_types.h	/^	uint32_t page_size;$/;"	m	struct:HmbCtrl
page_size	femu/nvme.h	/^    uint16_t    page_size;$/;"	m	struct:FemuCtrl
page_size	m25p80.c	/^    int page_size;$/;"	m	struct:Flash	file:
page_size	m25p80.c	/^    uint32_t page_size;$/;"	m	struct:FlashPartInfo	file:
page_size	nvme.h	/^    uint32_t    page_size;$/;"	m	struct:NvmeCtrl
page_type	femu/ocssd/oc12.h	/^    uint8_t  page_type;$/;"	m	struct:AddrBucket
page_type	femu/ocssd/oc20.h	/^    uint8_t page_type;$/;"	m	struct:Oc20AddrBucket
page_wr_lat	femu/nand/nand.h	/^    int64_t page_wr_lat[MAX_FLASH_TYPE];$/;"	m	struct:NandFlash
pages	nand.c	/^    int size, pages;$/;"	m	struct:NANDFlashState	file:
param_error_location	femu/nvme.h	/^    uint16_t    param_error_location;$/;"	m	struct:NvmeErrorLog
parameters	fdc.c	/^    int parameters;$/;"	m	struct:FDCtrlCommand	file:
params	femu/nvme.h	/^    NvmeParams  params;$/;"	m	struct:FemuCtrl
params	femu/ocssd/oc12.h	/^    Oc12Params  params;$/;"	m	struct:Oc12Ctrl
params	nvme-ns.h	/^    NvmeNamespaceParams params;$/;"	m	struct:NvmeNamespace
params	nvme.h	/^    NvmeParams   params;$/;"	m	struct:NvmeCtrl
parent	femu/bbssd/hmb_types.h	/^	void    *parent;		 \/* for NvmeCtrl **\/$/;"	m	struct:HmbCtrl
parent	femu/lib/pqueue.c	35;"	d	file:
parent_bus	nvme.h	/^    BusState parent_bus;$/;"	m	struct:NvmeBus
parent_class	m25p80.c	/^    SSISlaveClass parent_class;$/;"	m	struct:M25P80Class	file:
parent_ns	femu/bbssd/hmb_types.h	/^	void    *parent_ns;		 \/* for NvmeNamespace **\/$/;"	m	struct:HmbCtrl
parent_obj	femu/nvme.h	/^    PCIDevice       parent_obj;$/;"	m	struct:FemuCtrl
parent_obj	m25p80.c	/^    SSISlave parent_obj;$/;"	m	struct:Flash	file:
parent_obj	nand.c	/^    DeviceState parent_obj;$/;"	m	struct:NANDFlashState	file:
parent_obj	nvme-ns.h	/^    DeviceState  parent_obj;$/;"	m	struct:NvmeNamespace
parent_obj	nvme.h	/^    PCIDevice    parent_obj;$/;"	m	struct:NvmeCtrl
parent_obj	pflash_cfi01.c	/^    SysBusDevice parent_obj;$/;"	m	struct:PFlashCFI01	file:
parent_obj	pflash_cfi02.c	/^    SysBusDevice parent_obj;$/;"	m	struct:PFlashCFI02	file:
parse_ppa_list	femu/ocssd/oc12.c	/^static void parse_ppa_list(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
part_name	m25p80.c	/^    const char *part_name;$/;"	m	struct:FlashPartInfo	file:
partition	hd-geometry.c	/^struct partition {$/;"	s	file:
percentage_used	femu/nvme.h	/^    uint8_t     percentage_used;$/;"	m	struct:NvmeSmartLog
percolate_down	femu/lib/pqueue.c	/^static void percolate_down(pqueue_t *q, size_t i)$/;"	f	file:
perf	femu/ocssd/oc20.h	/^    Oc20IdPerf perf;$/;"	m	struct:Oc20NamespaceGeometry
perpendicular	fdc.c	/^    uint8_t perpendicular;    \/* 2.88 MB access mode    *\/$/;"	m	struct:FDrive	file:
pflash_cfi01_class_init	pflash_cfi01.c	/^static void pflash_cfi01_class_init(ObjectClass *klass, void *data)$/;"	f	file:
pflash_cfi01_get_blk	pflash_cfi01.c	/^BlockBackend *pflash_cfi01_get_blk(PFlashCFI01 *fl)$/;"	f
pflash_cfi01_get_memory	pflash_cfi01.c	/^MemoryRegion *pflash_cfi01_get_memory(PFlashCFI01 *fl)$/;"	f
pflash_cfi01_info	pflash_cfi01.c	/^static const TypeInfo pflash_cfi01_info = {$/;"	v	file:
pflash_cfi01_legacy_drive	pflash_cfi01.c	/^void pflash_cfi01_legacy_drive(PFlashCFI01 *fl, DriveInfo *dinfo)$/;"	f
pflash_cfi01_ops	pflash_cfi01.c	/^static const MemoryRegionOps pflash_cfi01_ops = {$/;"	v	file:
pflash_cfi01_properties	pflash_cfi01.c	/^static Property pflash_cfi01_properties[] = {$/;"	v	file:
pflash_cfi01_realize	pflash_cfi01.c	/^static void pflash_cfi01_realize(DeviceState *dev, Error **errp)$/;"	f	file:
pflash_cfi01_register_types	pflash_cfi01.c	/^static void pflash_cfi01_register_types(void)$/;"	f	file:
pflash_cfi01_system_reset	pflash_cfi01.c	/^static void pflash_cfi01_system_reset(DeviceState *dev)$/;"	f	file:
pflash_cfi02_class_init	pflash_cfi02.c	/^static void pflash_cfi02_class_init(ObjectClass *klass, void *data)$/;"	f	file:
pflash_cfi02_info	pflash_cfi02.c	/^static const TypeInfo pflash_cfi02_info = {$/;"	v	file:
pflash_cfi02_ops	pflash_cfi02.c	/^static const MemoryRegionOps pflash_cfi02_ops = {$/;"	v	file:
pflash_cfi02_properties	pflash_cfi02.c	/^static Property pflash_cfi02_properties[] = {$/;"	v	file:
pflash_cfi02_realize	pflash_cfi02.c	/^static void pflash_cfi02_realize(DeviceState *dev, Error **errp)$/;"	f	file:
pflash_cfi02_register_types	pflash_cfi02.c	/^static void pflash_cfi02_register_types(void)$/;"	f	file:
pflash_cfi02_unrealize	pflash_cfi02.c	/^static void pflash_cfi02_unrealize(DeviceState *dev)$/;"	f	file:
pflash_cfi_query	pflash_cfi01.c	/^static uint32_t pflash_cfi_query(PFlashCFI01 *pfl, hwaddr offset)$/;"	f	file:
pflash_data_read	pflash_cfi01.c	/^static uint32_t pflash_data_read(PFlashCFI01 *pfl, hwaddr offset,$/;"	f	file:
pflash_data_read	pflash_cfi02.c	/^static uint64_t pflash_data_read(PFlashCFI02 *pfl, hwaddr offset,$/;"	f	file:
pflash_data_write	pflash_cfi01.c	/^static inline void pflash_data_write(PFlashCFI01 *pfl, hwaddr offset,$/;"	f	file:
pflash_devid_query	pflash_cfi01.c	/^static uint32_t pflash_devid_query(PFlashCFI01 *pfl, hwaddr offset)$/;"	f	file:
pflash_erase_suspend_mode	pflash_cfi02.c	/^static inline bool pflash_erase_suspend_mode(PFlashCFI02 *pfl)$/;"	f	file:
pflash_erase_time	pflash_cfi02.c	/^static uint64_t pflash_erase_time(PFlashCFI02 *pfl)$/;"	f	file:
pflash_mem_read_with_attrs	pflash_cfi01.c	/^static MemTxResult pflash_mem_read_with_attrs(void *opaque, hwaddr addr, uint64_t *value,$/;"	f	file:
pflash_mem_write_with_attrs	pflash_cfi01.c	/^static MemTxResult pflash_mem_write_with_attrs(void *opaque, hwaddr addr, uint64_t value,$/;"	f	file:
pflash_post_load	pflash_cfi01.c	/^static int pflash_post_load(void *opaque, int version_id)$/;"	f	file:
pflash_read	pflash_cfi01.c	/^static uint32_t pflash_read(PFlashCFI01 *pfl, hwaddr offset,$/;"	f	file:
pflash_read	pflash_cfi02.c	/^static uint64_t pflash_read(void *opaque, hwaddr offset, unsigned int width)$/;"	f	file:
pflash_regions_count	pflash_cfi02.c	/^static size_t pflash_regions_count(PFlashCFI02 *pfl)$/;"	f	file:
pflash_register_memory	pflash_cfi02.c	/^static void pflash_register_memory(PFlashCFI02 *pfl, int rom_mode)$/;"	f	file:
pflash_sector_erase	pflash_cfi02.c	/^static void pflash_sector_erase(PFlashCFI02 *pfl, hwaddr offset)$/;"	f	file:
pflash_sector_info	pflash_cfi02.c	/^static SectorInfo pflash_sector_info(PFlashCFI02 *pfl, hwaddr offset)$/;"	f	file:
pflash_sector_is_erasing	pflash_cfi02.c	/^static bool pflash_sector_is_erasing(PFlashCFI02 *pfl, hwaddr offset)$/;"	f	file:
pflash_setup_mappings	pflash_cfi02.c	/^static void pflash_setup_mappings(PFlashCFI02 *pfl)$/;"	f	file:
pflash_timer	pflash_cfi02.c	/^static void pflash_timer(void *opaque)$/;"	f	file:
pflash_update	pflash_cfi01.c	/^static void pflash_update(PFlashCFI01 *pfl, int offset,$/;"	f	file:
pflash_update	pflash_cfi02.c	/^static void pflash_update(PFlashCFI02 *pfl, int offset, int size)$/;"	f	file:
pflash_write	pflash_cfi01.c	/^static void pflash_write(PFlashCFI01 *pfl, hwaddr offset,$/;"	f	file:
pflash_write	pflash_cfi02.c	/^static void pflash_write(void *opaque, hwaddr offset, uint64_t value,$/;"	f	file:
pg	femu/bbssd/backup/ftl.h	/^            uint64_t pg  : PG_BITS;$/;"	m	struct:ppa::__anon30::__anon31
pg	femu/bbssd/backup/ftl.h	/^    int pg;$/;"	m	struct:write_pointer
pg	femu/bbssd/backup/ftl.h	/^    struct nand_page *pg;$/;"	m	struct:nand_block	typeref:struct:nand_block::nand_page
pg	femu/bbssd/ftl.h	/^            uint64_t pg  : PG_BITS;$/;"	m	struct:ppa::__anon24::__anon25
pg	femu/bbssd/ftl.h	/^    int pg;$/;"	m	struct:write_pointer
pg	femu/bbssd/ftl.h	/^    struct nand_page *pg;$/;"	m	struct:nand_block	typeref:struct:nand_block::nand_page
pg	femu/ocssd/oc12.h	/^    int  pg;$/;"	m	struct:AddrBucket
pg	femu/ocssd/oc20.h	/^    int  pg;$/;"	m	struct:Oc20AddrBucket
pg_len	femu/ocssd/oc12.h	/^    uint8_t     pg_len;$/;"	m	struct:Oc12IdAddrFormat
pg_mask	femu/ocssd/oc12.h	/^	uint64_t	pg_mask;$/;"	m	struct:Oc12AddrF
pg_offset	femu/ocssd/oc12.h	/^	uint8_t	    pg_offset;$/;"	m	struct:Oc12AddrF
pg_offset	femu/ocssd/oc12.h	/^    uint8_t     pg_offset;$/;"	m	struct:Oc12IdAddrFormat
pg_rd_lat	femu/bbssd/backup/ftl.h	/^    int pg_rd_lat;    \/* NAND page read latency in nanoseconds *\/$/;"	m	struct:ssdparams
pg_rd_lat	femu/bbssd/ftl.h	/^    int pg_rd_lat;    \/* NAND page read latency in nanoseconds *\/$/;"	m	struct:ssdparams
pg_rd_lat	femu/nand/nand.h	/^    int64_t pg_rd_lat[MAX_FLASH_TYPE][MAX_FLASH_TYPE];$/;"	m	struct:NandFlashTiming
pg_units	femu/ocssd/oc12.h	/^    uint32_t    pg_units;$/;"	m	struct:Oc12Params
pg_wr_lat	femu/bbssd/backup/ftl.h	/^    int pg_wr_lat;    \/* NAND page program latency in nanoseconds *\/$/;"	m	struct:ssdparams
pg_wr_lat	femu/bbssd/ftl.h	/^    int pg_wr_lat;    \/* NAND page program latency in nanoseconds *\/$/;"	m	struct:ssdparams
pg_wr_lat	femu/nand/nand.h	/^    int64_t pg_wr_lat[MAX_FLASH_TYPE][MAX_FLASH_TYPE];$/;"	m	struct:NandFlashTiming
pgs_per_blk	femu/bbssd/backup/ftl.h	/^    int pgs_per_blk;  \/* # of NAND pages per block *\/$/;"	m	struct:ssdparams
pgs_per_blk	femu/bbssd/ftl.h	/^    int pgs_per_blk;  \/* # of NAND pages per block *\/$/;"	m	struct:ssdparams
pgs_per_blk	femu/nvme.h	/^    uint16_t pgs_per_blk;$/;"	m	struct:OcCtrlParams
pgs_per_blk	femu/ocssd/oc12.h	/^    uint16_t    pgs_per_blk;$/;"	m	struct:Oc12Params
pgs_per_ch	femu/bbssd/backup/ftl.h	/^    int pgs_per_ch;   \/* # of pages per channel *\/$/;"	m	struct:ssdparams
pgs_per_ch	femu/bbssd/ftl.h	/^    int pgs_per_ch;   \/* # of pages per channel *\/$/;"	m	struct:ssdparams
pgs_per_line	femu/bbssd/backup/ftl.h	/^    int pgs_per_line;$/;"	m	struct:ssdparams
pgs_per_line	femu/bbssd/ftl.h	/^    int pgs_per_line;$/;"	m	struct:ssdparams
pgs_per_lun	femu/bbssd/backup/ftl.h	/^    int pgs_per_lun;  \/* # of pages per LUN (Die) *\/$/;"	m	struct:ssdparams
pgs_per_lun	femu/bbssd/ftl.h	/^    int pgs_per_lun;  \/* # of pages per LUN (Die) *\/$/;"	m	struct:ssdparams
pgs_per_pl	femu/bbssd/backup/ftl.h	/^    int pgs_per_pl;   \/* # of pages per plane *\/$/;"	m	struct:ssdparams
pgs_per_pl	femu/bbssd/ftl.h	/^    int pgs_per_pl;   \/* # of pages per plane *\/$/;"	m	struct:ssdparams
phase	fdc.c	/^    uint8_t phase;$/;"	m	struct:FDCtrl	file:
phase	femu/nvme.h	/^    uint8_t     phase;$/;"	m	struct:NvmeCQueue
phase	nvme.h	/^    uint8_t     phase;$/;"	m	struct:NvmeCQueue
phys_contig	femu/nvme.h	/^    uint8_t     phys_contig;$/;"	m	struct:NvmeCQueue
phys_contig	femu/nvme.h	/^    uint8_t     phys_contig;$/;"	m	struct:NvmeSQueue
pi	m25p80.c	/^    FlashPartInfo *pi;$/;"	m	struct:M25P80Class	file:
pi	m25p80.c	/^    const FlashPartInfo *pi;$/;"	m	struct:Flash	file:
pick_drive_type	fdc.c	/^static void pick_drive_type(FDrive *drv)$/;"	f	file:
pick_geometry	fdc.c	/^static int pick_geometry(FDrive *drv)$/;"	f	file:
pl	femu/bbssd/backup/ftl.h	/^            uint64_t pl  : PL_BITS;$/;"	m	struct:ppa::__anon30::__anon31
pl	femu/bbssd/backup/ftl.h	/^    int pl;$/;"	m	struct:write_pointer
pl	femu/bbssd/backup/ftl.h	/^    struct nand_plane *pl;$/;"	m	struct:nand_lun	typeref:struct:nand_lun::nand_plane
pl	femu/bbssd/ftl.h	/^            uint64_t pl  : PL_BITS;$/;"	m	struct:ppa::__anon24::__anon25
pl	femu/bbssd/ftl.h	/^    int pl;$/;"	m	struct:write_pointer
pl	femu/bbssd/ftl.h	/^    struct nand_plane *pl;$/;"	m	struct:nand_lun	typeref:struct:nand_lun::nand_plane
pl_units	femu/ocssd/oc12.h	/^    uint32_t    pl_units;$/;"	m	struct:Oc12Params
pln_len	femu/ocssd/oc12.h	/^    uint8_t     pln_len;$/;"	m	struct:Oc12IdAddrFormat
pln_mask	femu/ocssd/oc12.h	/^	uint64_t	pln_mask;$/;"	m	struct:Oc12AddrF
pln_offset	femu/ocssd/oc12.h	/^	uint8_t     pln_offset;$/;"	m	struct:Oc12AddrF
pln_offset	femu/ocssd/oc12.h	/^    uint8_t     pln_offset;$/;"	m	struct:Oc12IdAddrFormat
pls_per_ch	femu/bbssd/backup/ftl.h	/^    int pls_per_ch;   \/* # of planes per channel *\/$/;"	m	struct:ssdparams
pls_per_ch	femu/bbssd/ftl.h	/^    int pls_per_ch;   \/* # of planes per channel *\/$/;"	m	struct:ssdparams
pls_per_lun	femu/bbssd/backup/ftl.h	/^    int pls_per_lun;  \/* # of planes per LUN (Die) *\/$/;"	m	struct:ssdparams
pls_per_lun	femu/bbssd/ftl.h	/^    int pls_per_lun;  \/* # of planes per LUN (Die) *\/$/;"	m	struct:ssdparams
pmrdev	nvme.h	/^    HostMemoryBackend *pmrdev;$/;"	m	struct:NvmeCtrl
poller	femu/nvme.h	/^    QemuThread  *poller;$/;"	m	struct:FemuCtrl
poller_on	femu/nvme.h	/^    bool            poller_on;$/;"	m	struct:FemuCtrl
portio_list	fdc.c	/^    PortioList portio_list;$/;"	m	struct:FDCtrl	file:
pos	femu/bbssd/backup/ftl.h	/^    size_t                  pos;$/;"	m	struct:line
pos	femu/bbssd/ftl.h	/^    size_t                  pos;$/;"	m	struct:line
pos	femu/nvme.h	/^    size_t                  pos;$/;"	m	struct:NvmeRequest
pos	m25p80.c	/^    uint32_t pos;$/;"	m	struct:Flash	file:
postload_update_cb	pflash_cfi01.c	/^static void postload_update_cb(void *opaque, int running, RunState state)$/;"	f	file:
power_cycles	femu/nvme.h	/^    uint64_t    power_cycles[2];$/;"	m	struct:NvmeSmartLog
power_mgmt	femu/nvme.h	/^    uint32_t    power_mgmt;$/;"	m	struct:NvmeFeatureVal
power_on_hours	femu/nvme.h	/^    uint64_t    power_on_hours[2];$/;"	m	struct:NvmeSmartLog
ppa	femu/bbssd/backup/ftl.h	/^        uint64_t ppa;$/;"	m	union:ppa::__anon30
ppa	femu/bbssd/backup/ftl.h	/^struct ppa {$/;"	s
ppa	femu/bbssd/ftl.h	/^        uint64_t ppa;$/;"	m	union:ppa::__anon24
ppa	femu/bbssd/ftl.h	/^struct ppa {$/;"	s
ppa2pgidx	femu/bbssd/backup/ftl.c	/^static uint64_t ppa2pgidx(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
ppa2pgidx	femu/bbssd/ftl.c	/^static uint64_t ppa2pgidx(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
ppa2secidx	femu/ocssd/oc12.c	/^static uint64_t ppa2secidx(Oc12Ctrl *ln, uint64_t ppa)$/;"	f	file:
ppaf	femu/ocssd/oc12.h	/^    Oc12AddrF   ppaf;$/;"	m	struct:Oc12Ctrl
ppaf	femu/ocssd/oc12.h	/^    struct Oc12IdAddrFormat ppaf;$/;"	m	struct:Oc12IdCtrl	typeref:struct:Oc12IdCtrl::Oc12IdAddrFormat
pq	femu/nvme.h	/^    pqueue_t        **pq;$/;"	m	struct:FemuCtrl
pqueue_change_priority	femu/lib/pqueue.c	/^void pqueue_change_priority(pqueue_t *q, pqueue_pri_t new_pri, void *d)$/;"	f
pqueue_cmp_pri_f	femu/inc/pqueue.h	/^typedef int (*pqueue_cmp_pri_f)(pqueue_pri_t next, pqueue_pri_t curr);$/;"	t
pqueue_dump	femu/lib/pqueue.c	/^void pqueue_dump(pqueue_t *q, FILE *out, pqueue_print_entry_f print)$/;"	f
pqueue_free	femu/lib/pqueue.c	/^void pqueue_free(pqueue_t *q)$/;"	f
pqueue_get_pos_f	femu/inc/pqueue.h	/^typedef size_t (*pqueue_get_pos_f)(void *a);$/;"	t
pqueue_get_pri_f	femu/inc/pqueue.h	/^typedef pqueue_pri_t (*pqueue_get_pri_f)(void *a);$/;"	t
pqueue_init	femu/lib/pqueue.c	/^pqueue_t *pqueue_init(size_t n, pqueue_cmp_pri_f cmppri, pqueue_get_pri_f getpri,$/;"	f
pqueue_insert	femu/lib/pqueue.c	/^int pqueue_insert(pqueue_t *q, void *d)$/;"	f
pqueue_is_valid	femu/lib/pqueue.c	/^int pqueue_is_valid(pqueue_t *q)$/;"	f
pqueue_peek	femu/lib/pqueue.c	/^void *pqueue_peek(pqueue_t *q)$/;"	f
pqueue_pop	femu/lib/pqueue.c	/^void *pqueue_pop(pqueue_t *q)$/;"	f
pqueue_pri_t	femu/inc/pqueue.h	/^typedef unsigned long long pqueue_pri_t;$/;"	t
pqueue_print	femu/lib/pqueue.c	/^void pqueue_print(pqueue_t *q, FILE *out, pqueue_print_entry_f print)$/;"	f
pqueue_print_entry_f	femu/inc/pqueue.h	/^typedef void (*pqueue_print_entry_f)(FILE *out, void *a);$/;"	t
pqueue_remove	femu/lib/pqueue.c	/^int pqueue_remove(pqueue_t *q, void *d)$/;"	f
pqueue_set_pos_f	femu/inc/pqueue.h	/^typedef void (*pqueue_set_pos_f)(void *a, size_t pos);$/;"	t
pqueue_set_pri_f	femu/inc/pqueue.h	/^typedef void (*pqueue_set_pri_f)(void *a, pqueue_pri_t pri);$/;"	t
pqueue_size	femu/lib/pqueue.c	/^size_t pqueue_size(pqueue_t *q)$/;"	f
pqueue_t	femu/inc/pqueue.h	/^typedef struct pqueue_t$/;"	s
pqueue_t	femu/inc/pqueue.h	/^} pqueue_t;$/;"	t	typeref:struct:pqueue_t
pr_lba	femu/ocssd/oc20.c	/^static void pr_lba(Oc20Namespace *lns, uint64_t lba)$/;"	f	file:
pr_ppa	femu/ocssd/oc12.c	/^static void pr_ppa(Oc12Ctrl *ln, uint64_t ppa)$/;"	f	file:
precomp_trk	fdc.c	/^    uint8_t precomp_trk;$/;"	m	struct:FDCtrl	file:
predef	femu/nvme.h	/^        uint64_t predef;$/;"	m	struct:NvmeNamespace::__anon39
predef	femu/nvme.h	/^    uint64_t predef;$/;"	m	struct:NvmeRequest
presync	dataplane/xen-block.c	/^    int presync;$/;"	m	struct:XenBlockRequest	file:
prev	femu/bbssd/hmb_types.h	/^	struct HmbMapInfo* prev;$/;"	m	struct:HmbMapInfo	typeref:struct:HmbMapInfo::HmbMapInfo
prev	femu/bbssd/hmb_types.h	/^	struct HmbSegEmpty *prev, *next;$/;"	m	struct:HmbSegEmpty	typeref:struct:HmbSegEmpty::HmbSegEmpty
print_log	femu/nvme.h	/^    bool            print_log;$/;"	m	struct:FemuCtrl
prod	femu/inc/rte_ring.h	/^	struct rte_ring_headtail prod;$/;"	m	struct:rte_ring	typeref:struct:rte_ring::rte_ring_headtail
protocol	dataplane/xen-block.c	/^    int protocol;$/;"	m	struct:XenBlockDataPlane	file:
prp1	femu/nvme.h	/^        uint64_t    prp1;$/;"	m	struct:NvmeCmdDptr::__anon33
prp1	femu/nvme.h	/^    uint64_t    prp1;$/;"	m	struct:NvmeCreateCq
prp1	femu/nvme.h	/^    uint64_t    prp1;$/;"	m	struct:NvmeCreateSq
prp1	femu/nvme.h	/^    uint64_t    prp1;$/;"	m	struct:NvmeDsmCmd
prp1	femu/nvme.h	/^    uint64_t    prp1;$/;"	m	struct:NvmeIdentity
prp1	femu/nvme.h	/^    uint64_t    prp1;$/;"	m	struct:NvmeRwCmd
prp1	femu/ocssd/oc12.h	/^    uint64_t    prp1;$/;"	m	struct:Oc12BbtGet
prp1	femu/ocssd/oc12.h	/^    uint64_t    prp1;$/;"	m	struct:Oc12BbtSet
prp1	femu/ocssd/oc12.h	/^    uint64_t    prp1;$/;"	m	struct:Oc12GetL2PTbl
prp1	femu/ocssd/oc12.h	/^    uint64_t    prp1;$/;"	m	struct:Oc12RwCmd
prp2	femu/nvme.h	/^        uint64_t    prp2;$/;"	m	struct:NvmeCmdDptr::__anon33
prp2	femu/nvme.h	/^    uint64_t    prp2;$/;"	m	struct:NvmeDsmCmd
prp2	femu/nvme.h	/^    uint64_t    prp2;$/;"	m	struct:NvmeIdentity
prp2	femu/nvme.h	/^    uint64_t    prp2;$/;"	m	struct:NvmeRwCmd
prp2	femu/ocssd/oc12.h	/^    uint64_t    prp2;$/;"	m	struct:Oc12BbtGet
prp2	femu/ocssd/oc12.h	/^    uint64_t    prp2;$/;"	m	struct:Oc12BbtSet
prp2	femu/ocssd/oc12.h	/^    uint64_t    prp2;$/;"	m	struct:Oc12GetL2PTbl
prp2	femu/ocssd/oc12.h	/^    uint64_t    prp2;$/;"	m	struct:Oc12RwCmd
prp_list	femu/nvme.h	/^    uint64_t    *prp_list;$/;"	m	struct:NvmeCQueue
prp_list	femu/nvme.h	/^    uint64_t    *prp_list;$/;"	m	struct:NvmeSQueue
psd	femu/nvme.h	/^    NvmePSD     psd[32];$/;"	m	struct:NvmeIdCtrl
psdt	femu/nvme.h	/^    uint16_t    psdt   : 2;$/;"	m	struct:NvmeCmd
psdt	femu/ocssd/oc20.h	/^    uint16_t    psdt   :  2;$/;"	m	struct:Oc20RwCmd
ptr	femu/nvme.h	/^    dma_addr_t ptr;$/;"	m	struct:DMAOff
pwrd	fdc.c	/^    uint8_t pwrd;$/;"	m	struct:FDCtrl	file:
qdev_for_drives	fdc.c	/^    } qdev_for_drives[MAX_FD];$/;"	m	struct:FDCtrl	typeref:struct:FDCtrl::__anon17	file:
qemu_fls	femu/ocssd/oc12.c	/^static inline int qemu_fls(int i)$/;"	f	file:
qid	femu/nvme.h	/^    uint16_t    qid;$/;"	m	struct:NvmeDeleteQ
qlc_tbl	femu/nand/nand.h	/^static int qlc_tbl[MAX_SUPPORTED_PAGES_PER_BLOCK];$/;"	v
qs_created	nvme.h	/^    bool        qs_created;$/;"	m	struct:NvmeCtrl
qsg	femu/nvme.h	/^    QEMUSGList              qsg;$/;"	m	struct:NvmeRequest
qsg	femu/nvme.h	/^    QEMUSGList *qsg;$/;"	m	struct:DMAOff
qsg	nvme.h	/^    QEMUSGList              qsg;$/;"	m	struct:NvmeRequest
qsize	femu/nvme.h	/^    uint16_t    qsize;$/;"	m	struct:NvmeCreateCq
qsize	femu/nvme.h	/^    uint16_t    qsize;$/;"	m	struct:NvmeCreateSq
quad_enable	m25p80.c	/^    bool quad_enable;$/;"	m	struct:Flash	file:
r	femu/bbssd/hmb_types.h	/^	void *r;$/;"	m	struct:HmbMappedAddr
r_e_next	femu/bbssd/hmb_types.h	/^	uint32_t r_e_next;$/;"	m	struct:HmbSortedEnt
r_e_prev	femu/bbssd/hmb_types.h	/^	uint32_t r_e_prev;$/;"	m	struct:HmbSortedEnt
rab	femu/nvme.h	/^    uint8_t     rab;$/;"	m	struct:NvmeIdCtrl
rate	fdc.c	/^    FDriveRate rate;$/;"	m	struct:FDFormat	file:
read_commands	nvme.c	/^    uint64_t read_commands;$/;"	m	struct:nvme_stats	file:
read_counter	pflash_cfi02.c	/^    int read_counter; \/* used for lazy switch-back to rom mode *\/$/;"	m	struct:PFlashCFI02	file:
read_l2p_tbl	femu/ocssd/oc12.h	/^    uint8_t     read_l2p_tbl;$/;"	m	struct:Oc12Ctrl
reconstruct_phase	fdc.c	/^static int reconstruct_phase(FDCtrl *fdctrl)$/;"	f	file:
ref_tag	femu/nvme.h	/^    uint32_t ref_tag;$/;"	m	struct:NvmeDifTuple
reftag	femu/nvme.h	/^    uint32_t    reftag;$/;"	m	struct:NvmeRwCmd
reg_size	femu/nvme.h	/^    uint32_t    reg_size;$/;"	m	struct:FemuCtrl
reg_size	nvme.h	/^    uint32_t    reg_size;$/;"	m	struct:NvmeCtrl
req	dataplane/xen-block.c	/^    blkif_request_t req;$/;"	m	struct:XenBlockRequest	file:
req	femu/zns/zns.c	/^    NvmeRequest *req;$/;"	m	struct:zns_zone_reset_ctx	file:
req	virtio-blk.c	/^    VirtIOBlockReq *req;$/;"	m	struct:__anon55	file:
req_list	femu/nvme.h	/^    QTAILQ_HEAD(cq_req_list, NvmeRequest) req_list;$/;"	m	struct:NvmeCQueue
req_list	femu/nvme.h	/^    QTAILQ_HEAD(sq_req_list, NvmeRequest) req_list;$/;"	m	struct:NvmeSQueue
req_list	nvme.h	/^    QTAILQ_HEAD(, NvmeRequest) req_list;$/;"	m	struct:NvmeCQueue
req_list	nvme.h	/^    QTAILQ_HEAD(, NvmeRequest) req_list;$/;"	m	struct:NvmeSQueue
reqlat	femu/nvme.h	/^    int64_t                 reqlat;$/;"	m	struct:NvmeRequest
requests_inflight	dataplane/xen-block.c	/^    int requests_inflight;$/;"	m	struct:XenBlockDataPlane	file:
requests_total	dataplane/xen-block.c	/^    int requests_total;$/;"	m	struct:XenBlockDataPlane	file:
res	femu/ocssd/oc12.h	/^    uint8_t     res;$/;"	m	struct:Oc12IdCtrl
res	femu/ocssd/oc12.h	/^    uint8_t     res[4];$/;"	m	struct:Oc12IdAddrFormat
res	femu/ocssd/oc12.h	/^    uint8_t     res[906];$/;"	m	struct:Oc12IdGroup
res1	femu/nvme.h	/^    uint16_t    res1   : 4;$/;"	m	struct:NvmeCmd
res16	femu/ocssd/oc12.h	/^    uint16_t    res16;$/;"	m	struct:Oc12IdGroup
res2	femu/nvme.h	/^    uint64_t    res2;$/;"	m	struct:NvmeCmd
res64	femu/nvme.h	/^        uint64_t res64;$/;"	m	union:NvmeCqe::__anon36
rescap	femu/nvme.h	/^    uint8_t     rescap;$/;"	m	struct:NvmeIdNs
reserved	femu/nvme.h	/^    uint16_t    reserved;$/;"	m	struct:NvmePSD
reserved1	femu/nvme.h	/^    uint8_t     reserved1[26];$/;"	m	struct:NvmeSmartLog
reserved1	femu/nvme.h	/^    uint8_t     reserved1[7];$/;"	m	struct:NvmeFwSlotInfoLog
reserved2	femu/nvme.h	/^    uint8_t     reserved2[320];$/;"	m	struct:NvmeSmartLog
reserved2	femu/nvme.h	/^    uint8_t     reserved2[448];$/;"	m	struct:NvmeFwSlotInfoLog
reset_dq3	pflash_cfi02.c	/^static inline void reset_dq3(PFlashCFI02 *pfl)$/;"	f	file:
reset_enable	m25p80.c	/^    bool reset_enable;$/;"	m	struct:Flash	file:
reset_memory	m25p80.c	/^static void reset_memory(Flash *s)$/;"	f	file:
reset_request	dataplane/xen-block.c	/^static void reset_request(XenBlockRequest *request)$/;"	f	file:
reset_sensei	fdc.c	/^    int reset_sensei;$/;"	m	struct:FDCtrl	file:
resetfail	femu/ocssd/oc20.h	/^    uint8_t *resetfail;$/;"	m	struct:Oc20Namespace
resetfail_fname	femu/nvme.h	/^    char *resetfail_fname;$/;"	m	struct:Oc20Params
result	femu/nvme.h	/^            uint32_t    result;$/;"	m	struct:NvmeCqe::__anon36::__anon37
result	femu/nvme.h	/^    NvmeAerResult result;$/;"	m	struct:NvmeAsyncEvent
result	nvme.h	/^    NvmeAerResult result;$/;"	m	struct:NvmeAsyncEvent
result_timer	fdc.c	/^    QEMUTimer *result_timer;$/;"	m	struct:FDCtrl	file:
resv	femu/nvme.h	/^    uint8_t     resv[16];$/;"	m	struct:NvmePSD
resv	femu/nvme.h	/^    uint8_t     resv[2048];$/;"	m	struct:NvmeEffectsLog
resv	femu/nvme.h	/^    uint8_t     resv[35];$/;"	m	struct:NvmeErrorLog
resv	femu/nvme.h	/^    uint8_t resv;$/;"	m	struct:NvmeAerResult
resv	femu/ocssd/oc12.h	/^    uint8_t     resv[228];$/;"	m	struct:Oc12IdCtrl
revid	femu/ocssd/oc12.h	/^    uint16_t    revid;$/;"	m	struct:Oc12Bbt
right	femu/lib/pqueue.c	34;"	d	file:
ring_ref	dataplane/xen-block.c	/^    unsigned int *ring_ref;$/;"	m	struct:XenBlockDataPlane	file:
rings	dataplane/xen-block.c	/^    blkif_back_rings_t rings;$/;"	m	struct:XenBlockDataPlane	file:
rmap	femu/bbssd/backup/ftl.h	/^    uint64_t *rmap;     \/* reverse mapptbl, assume it's stored in OOB *\/$/;"	m	struct:ssd
rmap	femu/bbssd/ftl.h	/^    uint64_t *rmap;     \/* reverse mapptbl, assume it's stored in OOB *\/$/;"	m	struct:ssd
ro	fdc.c	/^    uint8_t ro;               \/* Is read-only           *\/$/;"	m	struct:FDrive	file:
ro	pflash_cfi01.c	/^    int ro;$/;"	m	struct:PFlashCFI01	file:
ro	pflash_cfi02.c	/^    int ro;$/;"	m	struct:PFlashCFI02	file:
rom_mode	pflash_cfi02.c	/^    int rom_mode;$/;"	m	struct:PFlashCFI02	file:
rp	femu/nvme.h	/^    uint8_t     rp;$/;"	m	struct:NvmeLBAF
rpmbs	femu/nvme.h	/^    uint32_t    rpmbs;$/;"	m	struct:NvmeIdCtrl
rrl	femu/nvme.h	/^    uint8_t     rrl;$/;"	m	struct:NvmePSD
rrl	femu/zns/zns.h	/^    uint32_t    rrl;$/;"	m	struct:NvmeIdNsZoned
rrt	femu/nvme.h	/^    uint8_t     rrt;$/;"	m	struct:NvmePSD
rsv	femu/bbssd/backup/ftl.h	/^            uint64_t rsv : 1;$/;"	m	struct:ppa::__anon30::__anon31
rsv	femu/bbssd/ftl.h	/^            uint64_t rsv : 1;$/;"	m	struct:ppa::__anon24::__anon25
rsv	femu/ocssd/oc12.h	/^    uint64_t rsv[2];$/;"	m	struct:oc12_metadata_format
rsvd	femu/bbssd/hmb_types.h	/^	uint32_t    rsvd; \/* 4bytes (acc: 16) *\/$/;"	m	struct:HmbEntry
rsvd	femu/bbssd/hmb_types.h	/^	uint64_t rsvd   :  4;  $/;"	m	struct:HmbSharedEnt
rsvd	femu/bbssd/hmb_types.h	/^	uint8_t  rsvd[5];                     \/* 5bytes (acc: 128) *\/$/;"	m	struct:HmbMeta
rsvd	femu/nvme.h	/^            uint32_t    rsvd;$/;"	m	struct:NvmeCqe::__anon36::__anon37
rsvd	femu/nvme.h	/^    uint8_t  rsvd[3];$/;"	m	struct:NvmeSglDescriptor
rsvd	femu/ocssd/oc12.h	/^    uint64_t rsvd;$/;"	m	struct:oc12_tgt_meta
rsvd	femu/ocssd/oc20.h	/^    uint32_t rsvd;$/;"	m	struct:Oc20Header
rsvd	femu/ocssd/oc20.h	/^    uint8_t  rsvd[40];$/;"	m	struct:Oc20IdPerf
rsvd	femu/ocssd/oc20.h	/^    uint8_t  rsvd[44];$/;"	m	struct:Oc20IdWrt
rsvd	femu/ocssd/oc20.h	/^    uint8_t  rsvd[52];$/;"	m	struct:Oc20IdGeo
rsvd	femu/ocssd/oc20.h	/^    uint8_t rsvd[4];$/;"	m	struct:Oc20IdLBAF
rsvd	femu/ocssd/oc20.h	/^    uint8_t rsvd[5];$/;"	m	struct:Oc20ChunkState
rsvd	femu/zns/zns.h	/^    uint8_t     rsvd[56];$/;"	m	struct:NvmeZoneReportHeader
rsvd1	femu/nvme.h	/^    uint32_t    rsvd1;$/;"	m	struct:NvmeBar
rsvd1	femu/nvme.h	/^    uint32_t    rsvd1[5];$/;"	m	struct:NvmeCreateCq
rsvd1	femu/nvme.h	/^    uint32_t    rsvd1[5];$/;"	m	struct:NvmeCreateSq
rsvd1	femu/nvme.h	/^    uint32_t    rsvd1[9];$/;"	m	struct:NvmeDeleteQ
rsvd1	femu/ocssd/oc12.h	/^    uint32_t    rsvd1;$/;"	m	struct:Oc12Bbt
rsvd1	femu/ocssd/oc12.h	/^    uint32_t    rsvd1[4];$/;"	m	struct:Oc12GetL2PTbl
rsvd1	femu/ocssd/oc12.h	/^    uint32_t    rsvd1[8];$/;"	m	struct:Oc12DmCmd
rsvd1	femu/ocssd/oc12.h	/^    uint64_t    rsvd1[2];$/;"	m	struct:Oc12BbtGet
rsvd1	femu/ocssd/oc12.h	/^    uint64_t    rsvd1[2];$/;"	m	struct:Oc12BbtSet
rsvd1	femu/ocssd/oc12.h	/^    uint8_t     rsvd1;$/;"	m	struct:Oc12IdGroup
rsvd1	femu/ocssd/oc20.h	/^    uint16_t    rsvd1  :  4;$/;"	m	struct:Oc20RwCmd
rsvd1	femu/ocssd/oc20.h	/^    uint32_t rsvd1[8];$/;"	m	struct:Oc20DmCmd
rsvd1	femu/ocssd/oc20.h	/^    uint8_t    rsvd1[6];$/;"	m	struct:Oc20NamespaceGeometry
rsvd1	femu/zns/zns.h	/^    uint8_t     rsvd1[4095];$/;"	m	struct:NvmeIdCtrlZoned
rsvd10	femu/nvme.h	/^    uint16_t    rsvd10;$/;"	m	struct:NvmeDeleteQ
rsvd100	femu/nvme.h	/^    uint8_t     rsvd100[12];$/;"	m	struct:NvmeIdCtrl
rsvd1024	femu/nvme.h	/^    uint8_t     rsvd1024[1024];$/;"	m	struct:NvmeIdCtrl
rsvd11	femu/nvme.h	/^    uint32_t    rsvd11[5];$/;"	m	struct:NvmeDeleteQ
rsvd11	femu/nvme.h	/^    uint8_t     rsvd11;$/;"	m	struct:NvmeIdentity
rsvd12	femu/nvme.h	/^    uint32_t    rsvd12[4];$/;"	m	struct:NvmeCreateCq
rsvd12	femu/nvme.h	/^    uint32_t    rsvd12[4];$/;"	m	struct:NvmeCreateSq
rsvd12	femu/nvme.h	/^    uint32_t    rsvd12[4];$/;"	m	struct:NvmeDsmCmd
rsvd12	femu/nvme.h	/^    uint32_t    rsvd12[4];$/;"	m	struct:NvmeIdentity
rsvd128	femu/nvme.h	/^    uint8_t     rsvd128[128];$/;"	m	struct:NvmeIdCtrl
rsvd192	femu/nvme.h	/^    uint8_t     rsvd192[192];$/;"	m	struct:NvmeIdNs
rsvd2	femu/nvme.h	/^    uint64_t    rsvd2;$/;"	m	struct:NvmeRwCmd
rsvd2	femu/nvme.h	/^    uint64_t    rsvd2[2];$/;"	m	struct:NvmeDsmCmd
rsvd2	femu/nvme.h	/^    uint64_t    rsvd2[2];$/;"	m	struct:NvmeIdentity
rsvd2	femu/nvme.h	/^    uint8_t     rsvd2[14];$/;"	m	struct:NvmeRangeType
rsvd2	femu/nvme.h	/^    uint8_t rsvd2[2];$/;"	m	struct:NvmeIdNsDescr
rsvd2	femu/ocssd/oc12.h	/^    uint16_t    rsvd2;$/;"	m	struct:Oc12IdGroup
rsvd2	femu/ocssd/oc12.h	/^    uint16_t    rsvd2[6];$/;"	m	struct:Oc12GetL2PTbl
rsvd2	femu/ocssd/oc12.h	/^    uint32_t    rsvd2[3];$/;"	m	struct:Oc12DmCmd
rsvd2	femu/ocssd/oc12.h	/^    uint32_t    rsvd2[8];$/;"	m	struct:Oc12Bbt
rsvd2	femu/ocssd/oc12.h	/^    uint64_t    rsvd2;$/;"	m	struct:Oc12RwCmd
rsvd2	femu/ocssd/oc20.h	/^    uint32_t rsvd2[3];$/;"	m	struct:Oc20DmCmd
rsvd2	femu/ocssd/oc20.h	/^    uint64_t    rsvd2;$/;"	m	struct:Oc20RwCmd
rsvd2	femu/ocssd/oc20.h	/^    uint8_t    rsvd2[12];$/;"	m	struct:Oc20NamespaceGeometry
rsvd20	femu/zns/zns.h	/^    uint8_t     rsvd20[2796];$/;"	m	struct:NvmeIdNsZoned
rsvd3	femu/ocssd/oc12.h	/^    uint8_t     rsvd3;$/;"	m	struct:Oc12BbtSet
rsvd3	femu/ocssd/oc20.h	/^    uint32_t    rsvd3;$/;"	m	struct:Oc20RwCmd
rsvd3	femu/ocssd/oc20.h	/^    uint8_t    rsvd3[31];$/;"	m	struct:Oc20NamespaceGeometry
rsvd3	femu/zns/zns.h	/^    uint8_t     rsvd3[5];$/;"	m	struct:NvmeZoneDescr
rsvd3072	femu/zns/zns.h	/^    uint8_t     rsvd3072[768];$/;"	m	struct:NvmeIdNsZoned
rsvd32	femu/zns/zns.h	/^    uint8_t     rsvd32[32];$/;"	m	struct:NvmeZoneDescr
rsvd332	femu/nvme.h	/^    uint8_t     rsvd332[180];$/;"	m	struct:NvmeIdCtrl
rsvd4	femu/ocssd/oc12.h	/^    uint32_t    rsvd4[3];$/;"	m	struct:Oc12BbtSet
rsvd4	femu/ocssd/oc12.h	/^    uint32_t    rsvd4[4]; \/\/ DW15, 14, 13, 12$/;"	m	struct:Oc12BbtGet
rsvd4	femu/ocssd/oc20.h	/^    uint64_t    rsvd4;$/;"	m	struct:Oc20RwCmd
rsvd4	femu/ocssd/oc20.h	/^    uint8_t    rsvd4[3840];$/;"	m	struct:Oc20NamespaceGeometry
rsvd48	femu/nvme.h	/^    uint8_t     rsvd48[16];$/;"	m	struct:NvmeRangeType
rsvd531	femu/nvme.h	/^    uint8_t     rsvd531;$/;"	m	struct:NvmeIdCtrl
rsvd534	femu/nvme.h	/^    uint8_t     rsvd534[2];$/;"	m	struct:NvmeIdCtrl
rsvd540	femu/nvme.h	/^    uint8_t     rsvd540[228];$/;"	m	struct:NvmeIdCtrl
rsvd74	femu/nvme.h	/^    uint8_t     rsvd74[30];$/;"	m	struct:NvmeIdNs
rsvd8	femu/nvme.h	/^    uint64_t    rsvd8;$/;"	m	struct:NvmeCreateCq
rsvd8	femu/nvme.h	/^    uint64_t    rsvd8;$/;"	m	struct:NvmeCreateSq
rsvd9	femu/zns/zns.h	/^    uint8_t     rsvd9[7];$/;"	m	struct:NvmeLBAFE
rtd3e	femu/nvme.h	/^    uint32_t    rtd3e;$/;"	m	struct:NvmeIdCtrl
rtd3r	femu/nvme.h	/^    uint32_t    rtd3r;$/;"	m	struct:NvmeIdCtrl
rte_align32pow2	femu/inc/rte_ring.h	/^rte_align32pow2(uint32_t x)$/;"	f
rte_atomic32_cmpset	femu/inc/rte_atomic_x86.h	/^rte_atomic32_cmpset(volatile uint32_t *dst, uint32_t exp, uint32_t src)$/;"	f
rte_compiler_barrier	femu/inc/rte_atomic_x86.h	10;"	d
rte_ring	femu/inc/rte_ring.h	/^struct rte_ring {$/;"	s
rte_ring_count	femu/inc/rte_ring.h	/^rte_ring_count(const struct rte_ring *r)$/;"	f
rte_ring_create	femu/lib/rte_ring.c	/^struct rte_ring *rte_ring_create(const char *name, unsigned count,$/;"	f
rte_ring_dequeue	femu/inc/rte_ring.h	/^rte_ring_dequeue(struct rte_ring *r, void **obj_p)$/;"	f
rte_ring_dequeue_bulk	femu/inc/rte_ring.h	/^rte_ring_dequeue_bulk(struct rte_ring *r, void **obj_table, unsigned int n,$/;"	f
rte_ring_dequeue_burst	femu/inc/rte_ring.h	/^rte_ring_dequeue_burst(struct rte_ring *r, void **obj_table,$/;"	f
rte_ring_dump	femu/lib/rte_ring.c	/^void rte_ring_dump(FILE *f, const struct rte_ring *r)$/;"	f
rte_ring_empty	femu/inc/rte_ring.h	/^rte_ring_empty(const struct rte_ring *r)$/;"	f
rte_ring_enqueue	femu/inc/rte_ring.h	/^rte_ring_enqueue(struct rte_ring *r, void *obj)$/;"	f
rte_ring_enqueue_bulk	femu/inc/rte_ring.h	/^rte_ring_enqueue_bulk(struct rte_ring *r, void * const *obj_table,$/;"	f
rte_ring_enqueue_burst	femu/inc/rte_ring.h	/^rte_ring_enqueue_burst(struct rte_ring *r, void * const *obj_table,$/;"	f
rte_ring_free	femu/lib/rte_ring.c	/^void rte_ring_free(struct rte_ring *r)$/;"	f
rte_ring_free_count	femu/inc/rte_ring.h	/^rte_ring_free_count(const struct rte_ring *r)$/;"	f
rte_ring_full	femu/inc/rte_ring.h	/^rte_ring_full(const struct rte_ring *r)$/;"	f
rte_ring_get_capacity	femu/inc/rte_ring.h	/^rte_ring_get_capacity(const struct rte_ring *r)$/;"	f
rte_ring_get_memsize	femu/lib/rte_ring.c	/^ssize_t rte_ring_get_memsize(unsigned count)$/;"	f
rte_ring_get_size	femu/inc/rte_ring.h	/^rte_ring_get_size(const struct rte_ring *r)$/;"	f
rte_ring_headtail	femu/inc/rte_ring.h	/^struct rte_ring_headtail {$/;"	s
rte_ring_init	femu/lib/rte_ring.c	/^int rte_ring_init(struct rte_ring *r, const char *name, unsigned count,$/;"	f
rte_ring_mc_dequeue	femu/inc/rte_ring.h	/^rte_ring_mc_dequeue(struct rte_ring *r, void **obj_p)$/;"	f
rte_ring_mc_dequeue_bulk	femu/inc/rte_ring.h	/^rte_ring_mc_dequeue_bulk(struct rte_ring *r, void **obj_table,$/;"	f
rte_ring_mc_dequeue_burst	femu/inc/rte_ring.h	/^rte_ring_mc_dequeue_burst(struct rte_ring *r, void **obj_table,$/;"	f
rte_ring_mp_enqueue	femu/inc/rte_ring.h	/^rte_ring_mp_enqueue(struct rte_ring *r, void *obj)$/;"	f
rte_ring_mp_enqueue_bulk	femu/inc/rte_ring.h	/^rte_ring_mp_enqueue_bulk(struct rte_ring *r, void * const *obj_table,$/;"	f
rte_ring_mp_enqueue_burst	femu/inc/rte_ring.h	/^rte_ring_mp_enqueue_burst(struct rte_ring *r, void * const *obj_table,$/;"	f
rte_ring_queue_behavior	femu/inc/rte_ring.h	/^enum rte_ring_queue_behavior {$/;"	g
rte_ring_sc_dequeue	femu/inc/rte_ring.h	/^rte_ring_sc_dequeue(struct rte_ring *r, void **obj_p)$/;"	f
rte_ring_sc_dequeue_bulk	femu/inc/rte_ring.h	/^rte_ring_sc_dequeue_bulk(struct rte_ring *r, void **obj_table,$/;"	f
rte_ring_sc_dequeue_burst	femu/inc/rte_ring.h	/^rte_ring_sc_dequeue_burst(struct rte_ring *r, void **obj_table,$/;"	f
rte_ring_sp_enqueue	femu/inc/rte_ring.h	/^rte_ring_sp_enqueue(struct rte_ring *r, void *obj)$/;"	f
rte_ring_sp_enqueue_bulk	femu/inc/rte_ring.h	/^rte_ring_sp_enqueue_bulk(struct rte_ring *r, void * const *obj_table,$/;"	f
rte_ring_sp_enqueue_burst	femu/inc/rte_ring.h	/^rte_ring_sp_enqueue_burst(struct rte_ring *r, void * const *obj_table,$/;"	f
rte_smp_rmb	femu/inc/rte_atomic_x86.h	36;"	d
rte_smp_wmb	femu/inc/rte_atomic_x86.h	34;"	d
rw_check_req	femu/nvme.h	/^    uint16_t (*rw_check_req)(struct FemuCtrl *, NvmeCmd *, NvmeRequest *);$/;"	m	struct:FemuExtCtrlOps
rwl	femu/nvme.h	/^    uint8_t     rwl;$/;"	m	struct:NvmePSD
rwt	femu/nvme.h	/^    uint8_t     rwt;$/;"	m	struct:NvmePSD
sanicap	femu/nvme.h	/^    uint32_t    sanicap;$/;"	m	struct:NvmeIdCtrl
sec	femu/bbssd/backup/ftl.h	/^            uint64_t sec : SEC_BITS;$/;"	m	struct:ppa::__anon30::__anon31
sec	femu/bbssd/backup/ftl.h	/^    nand_sec_status_t *sec;$/;"	m	struct:nand_page
sec	femu/bbssd/ftl.h	/^            uint64_t sec : SEC_BITS;$/;"	m	struct:ppa::__anon24::__anon25
sec	femu/bbssd/ftl.h	/^    nand_sec_status_t *sec;$/;"	m	struct:nand_page
sec_len	femu/ocssd/oc20.h	/^    uint8_t sec_len;$/;"	m	struct:Oc20IdLBAF
sec_mask	femu/ocssd/oc12.h	/^	uint64_t	sec_mask;$/;"	m	struct:Oc12AddrF
sec_mask	femu/ocssd/oc20.h	/^    uint64_t sec_mask;$/;"	m	struct:Oc20AddrF
sec_offset	femu/ocssd/oc12.h	/^	uint8_t	    sec_offset;$/;"	m	struct:Oc12AddrF
sec_offset	femu/ocssd/oc20.h	/^    uint8_t  sec_offset;$/;"	m	struct:Oc20AddrF
sec_per_blk	femu/ocssd/oc12.h	/^    uint32_t    sec_per_blk;$/;"	m	struct:Oc12Params
sec_per_ch	femu/ocssd/oc12.h	/^    uint32_t    sec_per_ch;$/;"	m	struct:Oc12Params
sec_per_lun	femu/ocssd/oc12.h	/^    uint32_t    sec_per_lun;$/;"	m	struct:Oc12Params
sec_per_pg	femu/ocssd/oc12.h	/^    uint8_t     sec_per_pg;$/;"	m	struct:Oc12Params
sec_per_pl	femu/ocssd/oc12.h	/^    uint32_t    sec_per_pl;$/;"	m	struct:Oc12Params
sec_size	femu/nvme.h	/^    uint16_t sec_size;$/;"	m	struct:OcCtrlParams
sec_size	femu/ocssd/oc12.h	/^    uint16_t    sec_size;$/;"	m	struct:Oc12Params
secs_per_blk	femu/bbssd/backup/ftl.h	/^    int secs_per_blk; \/* # of sectors per block *\/$/;"	m	struct:ssdparams
secs_per_blk	femu/bbssd/ftl.h	/^    int secs_per_blk; \/* # of sectors per block *\/$/;"	m	struct:ssdparams
secs_per_ch	femu/bbssd/backup/ftl.h	/^    int secs_per_ch;  \/* # of sectors per channel *\/$/;"	m	struct:ssdparams
secs_per_ch	femu/bbssd/ftl.h	/^    int secs_per_ch;  \/* # of sectors per channel *\/$/;"	m	struct:ssdparams
secs_per_chk	femu/ocssd/oc20.h	/^    uint32_t secs_per_chk;$/;"	m	struct:Oc20Namespace
secs_per_grp	femu/ocssd/oc20.h	/^    uint32_t secs_per_grp;$/;"	m	struct:Oc20Namespace
secs_per_line	femu/bbssd/backup/ftl.h	/^    int secs_per_line;$/;"	m	struct:ssdparams
secs_per_line	femu/bbssd/ftl.h	/^    int secs_per_line;$/;"	m	struct:ssdparams
secs_per_lun	femu/bbssd/backup/ftl.h	/^    int secs_per_lun; \/* # of sectors per LUN *\/$/;"	m	struct:ssdparams
secs_per_lun	femu/bbssd/ftl.h	/^    int secs_per_lun; \/* # of sectors per LUN *\/$/;"	m	struct:ssdparams
secs_per_lun	femu/ocssd/oc20.h	/^    uint32_t secs_per_lun;$/;"	m	struct:Oc20Namespace
secs_per_pg	femu/bbssd/backup/ftl.h	/^    int secs_per_pg;  \/* # of sectors per page *\/$/;"	m	struct:ssdparams
secs_per_pg	femu/bbssd/ftl.h	/^    int secs_per_pg;  \/* # of sectors per page *\/$/;"	m	struct:ssdparams
secs_per_pg	femu/nvme.h	/^    uint8_t  secs_per_pg;$/;"	m	struct:OcCtrlParams
secs_per_pl	femu/bbssd/backup/ftl.h	/^    int secs_per_pl;  \/* # of sectors per plane *\/$/;"	m	struct:ssdparams
secs_per_pl	femu/bbssd/ftl.h	/^    int secs_per_pl;  \/* # of sectors per plane *\/$/;"	m	struct:ssdparams
secs_total	femu/ocssd/oc20.h	/^    uint32_t secs_total;$/;"	m	struct:Oc20Namespace
secsz	femu/bbssd/backup/ftl.h	/^    int secsz;        \/* sector size in bytes *\/$/;"	m	struct:ssdparams
secsz	femu/bbssd/ftl.h	/^    int secsz;        \/* sector size in bytes *\/$/;"	m	struct:ssdparams
sect	fdc.c	/^    uint8_t sect;$/;"	m	struct:FDrive	file:
sect_len	femu/ocssd/oc12.h	/^    uint8_t     sect_len;$/;"	m	struct:Oc12IdAddrFormat
sect_offset	femu/ocssd/oc12.h	/^    uint8_t     sect_offset;$/;"	m	struct:Oc12IdAddrFormat
sector	hd-geometry.c	/^        uint8_t sector;             \/* starting sector *\/$/;"	m	struct:partition	file:
sector_erase_map	pflash_cfi02.c	/^    unsigned long *sector_erase_map;$/;"	m	struct:PFlashCFI02	file:
sector_len	pflash_cfi01.c	/^    uint64_t sector_len;$/;"	m	struct:PFlashCFI01	file:
sector_len	pflash_cfi02.c	/^    uint32_t sector_len[PFLASH_MAX_ERASE_REGIONS];$/;"	m	struct:PFlashCFI02	file:
sector_number	xen_blkif.h	/^    blkif_sector_t sector_number;    \/* start sector idx on disk (r\/w only)  *\/$/;"	m	struct:blkif_x86_32_request
sector_number	xen_blkif.h	/^    blkif_sector_t sector_number;    \/* start sector idx on disk (r\/w only)  *\/$/;"	m	struct:blkif_x86_32_request_discard
sector_number	xen_blkif.h	/^    blkif_sector_t sector_number;    \/* start sector idx on disk (r\/w only)  *\/$/;"	m	struct:blkif_x86_64_request
sector_number	xen_blkif.h	/^    blkif_sector_t sector_number;    \/* start sector idx on disk (r\/w only)  *\/$/;"	m	struct:blkif_x86_64_request_discard
sector_size	dataplane/xen-block.c	/^    unsigned int sector_size;$/;"	m	struct:XenBlockDataPlane	file:
sector_size	femu/ocssd/oc20.h	/^    uint64_t sector_size;$/;"	m	struct:Oc20Header
sector_size	m25p80.c	/^    uint32_t sector_size;$/;"	m	struct:FlashPartInfo	file:
sector_size_bits	femu/bbssd/hmb_types.h	/^	uint8_t sector_size_bits;$/;"	m	struct:HmbSpaceMgmtCtrl
sectors_to_erase	pflash_cfi02.c	/^    int sectors_to_erase;$/;"	m	struct:PFlashCFI02	file:
seg	xen_blkif.h	/^    struct blkif_request_segment seg[BLKIF_MAX_SEGMENTS_PER_REQUEST];$/;"	m	struct:blkif_x86_32_request	typeref:struct:blkif_x86_32_request::blkif_request_segment
seg	xen_blkif.h	/^    struct blkif_request_segment seg[BLKIF_MAX_SEGMENTS_PER_REQUEST];$/;"	m	struct:blkif_x86_64_request	typeref:struct:blkif_x86_64_request::blkif_request_segment
seg_id	femu/bbssd/hmb_types.h	/^	int16_t  seg_id;$/;"	m	struct:HmbSplitTable
segent_ST_host	femu/bbssd/hmb_types.h	/^	HmbHostAddr   segent_ST_host;$/;"	m	struct:HmbCtrl
segent_ST_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr segent_ST_mapped;$/;"	m	struct:HmbCtrl
segent_ST_size	femu/bbssd/hmb_types.h	/^	uint64_t      segent_ST_size;$/;"	m	struct:HmbCtrl
segent_bm	femu/bbssd/hmb_types.h	/^	HmbBitmap32*    segent_bm;$/;"	m	struct:HmbCtrl
segent_bm_empty	femu/bbssd/hmb_types.h	/^	int32_t       segent_bm_empty;$/;"	m	struct:HmbCtrl
segent_bm_parts_num	femu/bbssd/hmb_types.h	/^	uint32_t      segent_bm_parts_num;$/;"	m	struct:HmbCtrl
segent_bm_table	femu/bbssd/hmb_types.h	/^	HmbDLL*       segent_bm_table;$/;"	m	struct:HmbCtrl
segent_cnt	femu/bbssd/hmb_types.h	/^	uint32_t segent_cnt;$/;"	m	struct:HmbCtrl
segent_cnt_max	femu/bbssd/hmb_types.h	/^	uint32_t segent_cnt_max;$/;"	m	struct:HmbCtrl
segent_mapped_size	femu/bbssd/hmb_types.h	/^	uint64_t      segent_mapped_size;$/;"	m	struct:HmbCtrl
segent_split_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *segent_split_mapped;$/;"	m	struct:HmbCtrl
segent_split_num	femu/bbssd/hmb_types.h	/^	uint16_t      segent_split_num;$/;"	m	struct:HmbCtrl
segent_split_unit	femu/bbssd/hmb_types.h	/^	uint32_t      segent_split_unit;$/;"	m	struct:HmbCtrl
segment	femu/bbssd/hmb_types.h	/^	uint32_t segment;		\/* 4bytes (acc: 4) *\/$/;"	m	struct:HmbSharedEnt
segment_id	femu/bbssd/hmb_types.h	/^	int16_t            segment_id;$/;"	m	struct:HmbSegEmpty
segment_id	femu/bbssd/hmb_types.h	/^	int16_t  segment_id; \/* 2bytes (acc: 6) *\/$/;"	m	struct:HmbSegEnt
segs	femu/bbssd/hmb_types.h	/^	struct HmbSeg*     segs;$/;"	m	struct:HmbCtrl	typeref:struct:HmbCtrl::HmbSeg
select_victim_line	femu/bbssd/backup/ftl.c	/^static struct line *select_victim_line(struct ssd *ssd, bool force)$/;"	f	file:
select_victim_line	femu/bbssd/ftl.c	/^static struct line *select_victim_line(struct ssd *ssd, bool force)$/;"	f	file:
serial	femu/nvme.h	/^    char            *serial;$/;"	m	struct:FemuCtrl
serial	femu/nvme.h	/^    char     *serial;$/;"	m	struct:NvmeParams
serial	nvme.h	/^    char     *serial;$/;"	m	struct:NvmeParams
set_dq7	pflash_cfi02.c	/^static inline void set_dq7(PFlashCFI02 *pfl, uint8_t value)$/;"	f	file:
set_latency	femu/timing-model/timing.c	/^void set_latency(FemuCtrl *n)$/;"	f
set_maptbl_ent	femu/bbssd/backup/ftl.c	/^static inline void set_maptbl_ent(struct ssd *ssd, uint64_t lpn, struct ppa *ppa)$/;"	f	file:
set_maptbl_ent	femu/bbssd/ftl.c	/^static inline void set_maptbl_ent(struct ssd *ssd, uint64_t lpn, struct ppa *ppa)$/;"	f	file:
set_pos	femu/lib/pqueue.c	/^static void set_pos(void *d, size_t val)$/;"	f	file:
set_pos	femu/nvme-io.c	/^static void set_pos(void *a, size_t pos)$/;"	f	file:
set_pri	femu/lib/pqueue.c	/^static void set_pri(void *d, pqueue_pri_t pri)$/;"	f	file:
set_pri	femu/nvme-io.c	/^static void set_pri(void *a, pqueue_pri_t pri)$/;"	f	file:
set_resetfail_chunk	femu/ocssd/oc20.c	/^static int set_resetfail_chunk(FemuCtrl *n, NvmeNamespace *ns, char *chunkinfo)$/;"	f	file:
set_rmap_ent	femu/bbssd/backup/ftl.c	/^static inline void set_rmap_ent(struct ssd *ssd, uint64_t lpn, struct ppa *ppa)$/;"	f	file:
set_rmap_ent	femu/bbssd/ftl.c	/^static inline void set_rmap_ent(struct ssd *ssd, uint64_t lpn, struct ppa *ppa)$/;"	f	file:
set_writefail_sector	femu/ocssd/oc20.c	/^static int set_writefail_sector(FemuCtrl *n, NvmeNamespace *ns, char *secinfo)$/;"	f	file:
setpos	femu/inc/pqueue.h	/^    pqueue_set_pos_f setpos;    \/**< callback to set position of a node *\/$/;"	m	struct:pqueue_t
setpri	femu/inc/pqueue.h	/^    pqueue_set_pri_f setpri;    \/**< callback to set priority of a node *\/$/;"	m	struct:pqueue_t
sgl	femu/nvme.h	/^    NvmeSglDescriptor sgl;$/;"	m	union:NvmeCmdDptr
sgl_lbal	femu/nvme.h	/^    uint8_t	sgl_lbal;$/;"	m	struct:Oc20Params
sgls	femu/nvme.h	/^    uint32_t    sgls;$/;"	m	struct:NvmeIdCtrl
should_gc	femu/bbssd/backup/ftl.c	/^static inline bool should_gc(struct ssd *ssd)$/;"	f	file:
should_gc	femu/bbssd/ftl.c	/^static inline bool should_gc(struct ssd *ssd)$/;"	f	file:
should_gc_high	femu/bbssd/backup/ftl.c	/^static inline bool should_gc_high(struct ssd *ssd)$/;"	f	file:
should_gc_high	femu/bbssd/ftl.c	/^static inline bool should_gc_high(struct ssd *ssd)$/;"	f	file:
should_isr	femu/nvme.h	/^    bool            *should_isr;$/;"	m	struct:FemuCtrl
single	femu/inc/rte_ring.h	/^	uint32_t single;         \/**< True if single prod\/cons *\/$/;"	m	struct:rte_ring_headtail
size	dataplane/xen-block.c	/^    size_t size;$/;"	m	struct:XenBlockRequest	file:
size	femu/backend/dram.h	/^    int64_t size; \/* in bytes *\/$/;"	m	struct:SsdDramBackend
size	femu/bbssd/hmb_types.h	/^	uint32_t    size; \/* 4bytes (acc: 12) *\/ $/;"	m	struct:HmbEntry
size	femu/bbssd/hmb_types.h	/^	uint32_t size;       \/* 4bytes (acc: 14) *\/$/;"	m	struct:HmbSegEnt
size	femu/bbssd/hmb_types.h	/^	uint64_t size;           \/* HMB: Total memory buffer size *\/$/;"	m	struct:HmbCtrl
size	femu/inc/pqueue.h	/^    size_t size;                \/**< number of elements in this queue *\/$/;"	m	struct:pqueue_t
size	femu/inc/rte_ring.h	/^	uint32_t size;           \/**< Size of ring. *\/$/;"	m	struct:rte_ring
size	femu/nvme.h	/^    uint32_t    size;$/;"	m	struct:NvmeCQueue
size	femu/nvme.h	/^    uint32_t    size;$/;"	m	struct:NvmeSQueue
size	femu/nvme.h	/^    uint64_t        size; \/* Coperd: for ZNS, FIXME *\/$/;"	m	struct:NvmeNamespace
size	m25p80.c	/^    uint32_t size;$/;"	m	struct:Flash	file:
size	nand.c	/^    int size, pages;$/;"	m	struct:NANDFlashState	file:
size	nand.c	/^    int size;$/;"	m	struct:__anon45	file:
size	nvme-ns.h	/^    int64_t      size;$/;"	m	struct:NvmeNamespace
size	nvme.h	/^    uint32_t    size;$/;"	m	struct:NvmeCQueue
size	nvme.h	/^    uint32_t    size;$/;"	m	struct:NvmeSQueue
size_allocable_max	femu/bbssd/hmb_types.h	/^	uint64_t           size_allocable_max;$/;"	m	struct:HmbSeg
size_max	femu/bbssd/hmb_types.h	/^	uint64_t           size_max;$/;"	m	struct:HmbSeg
size_pg	femu/bbssd/hmb_types.h	/^	uint32_t size_pg;        \/* HMB: Host Memory Buffer Size (from dword 12) *\/$/;"	m	struct:HmbCtrl
slba	femu/nvme.h	/^    uint64_t                slba;$/;"	m	struct:NvmeRequest
slba	femu/nvme.h	/^    uint64_t    slba;$/;"	m	struct:NvmeDsmRange
slba	femu/nvme.h	/^    uint64_t    slba;$/;"	m	struct:NvmeRangeType
slba	femu/nvme.h	/^    uint64_t    slba;$/;"	m	struct:NvmeRwCmd
slba	femu/ocssd/oc12.h	/^    uint64_t    slba;     \/* ! this is actually not used by OC12 *\/$/;"	m	struct:Oc12RwCmd
slba	femu/ocssd/oc12.h	/^    uint64_t    slba;$/;"	m	struct:Oc12GetL2PTbl
slba	femu/ocssd/oc20.h	/^    uint64_t slba;$/;"	m	struct:Oc20ChunkState
slba	femu/zns/zns.h	/^    uint64_t slba;$/;"	m	struct:NvmeZonedResult
slc_tbl	femu/nand/nand.h	/^static int slc_tbl[MAX_SUPPORTED_PAGES_PER_BLOCK];$/;"	v
sn	femu/nvme.h	/^    uint8_t     sn[20];$/;"	m	struct:NvmeIdCtrl
sorted_ST_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *sorted_ST_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
sorted_ST_size	femu/bbssd/hmb_types.h	/^	uint64_t sorted_ST_size;$/;"	m	struct:HmbSpaceMgmtCtrl
sorted_split_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr **sorted_split_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
sorted_split_num	femu/bbssd/hmb_types.h	/^	uint16_t sorted_split_num;$/;"	m	struct:HmbSpaceMgmtCtrl
sorted_split_unit	femu/bbssd/hmb_types.h	/^	uint32_t sorted_split_unit;$/;"	m	struct:HmbSpaceMgmtCtrl
sos	femu/nvme.h	/^    uint16_t sos;$/;"	m	struct:OcCtrlParams
sos	femu/ocssd/oc12.h	/^    uint16_t    sos;$/;"	m	struct:Oc12IdGroup
sos	femu/ocssd/oc12.h	/^    uint16_t    sos;$/;"	m	struct:Oc12Params
sp	femu/bbssd/backup/ftl.h	/^    struct ssdparams sp;$/;"	m	struct:ssd	typeref:struct:ssd::ssdparams
sp	femu/bbssd/ftl.h	/^    struct ssdparams sp;$/;"	m	struct:ssd	typeref:struct:ssd::ssdparams
spansion_cr1nv	m25p80.c	/^    uint8_t spansion_cr1nv;$/;"	m	struct:Flash	file:
spansion_cr1v	m25p80.c	/^    uint8_t spansion_cr1v;$/;"	m	struct:Flash	file:
spansion_cr2nv	m25p80.c	/^    uint8_t spansion_cr2nv;$/;"	m	struct:Flash	file:
spansion_cr2v	m25p80.c	/^    uint8_t spansion_cr2v;$/;"	m	struct:Flash	file:
spansion_cr3nv	m25p80.c	/^    uint8_t spansion_cr3nv;$/;"	m	struct:Flash	file:
spansion_cr3v	m25p80.c	/^    uint8_t spansion_cr3v;$/;"	m	struct:Flash	file:
spansion_cr4nv	m25p80.c	/^    uint8_t spansion_cr4nv;$/;"	m	struct:Flash	file:
spansion_cr4v	m25p80.c	/^    uint8_t spansion_cr4v;$/;"	m	struct:Flash	file:
spba	femu/ocssd/oc12.h	/^    uint64_t    spba;     \/* PPA list *\/$/;"	m	struct:Oc12RwCmd
spba	femu/ocssd/oc12.h	/^    uint64_t    spba;$/;"	m	struct:Oc12BbtGet
spba	femu/ocssd/oc12.h	/^    uint64_t    spba;$/;"	m	struct:Oc12BbtSet
spba	femu/ocssd/oc12.h	/^    uint64_t    spba;$/;"	m	struct:Oc12DmCmd
spba	femu/ocssd/oc20.h	/^    uint64_t spba;$/;"	m	struct:Oc20DmCmd
sq	femu/nvme.h	/^    NvmeSQueue      **sq;$/;"	m	struct:FemuCtrl
sq	femu/nvme.h	/^    struct NvmeSQueue       *sq;$/;"	m	struct:NvmeRequest	typeref:struct:NvmeRequest::NvmeSQueue
sq	nvme.h	/^    NvmeSQueue      **sq;$/;"	m	struct:NvmeCtrl
sq	nvme.h	/^    struct NvmeSQueue       *sq;$/;"	m	struct:NvmeRequest	typeref:struct:NvmeRequest::NvmeSQueue
sq_flags	femu/nvme.h	/^    uint16_t    sq_flags;$/;"	m	struct:NvmeCreateSq
sq_head	femu/nvme.h	/^    uint16_t    sq_head;$/;"	m	struct:NvmeCqe
sq_id	femu/nvme.h	/^    uint16_t    sq_id;$/;"	m	struct:NvmeCqe
sq_list	femu/nvme.h	/^    QTAILQ_HEAD(sq_list, NvmeSQueue) sq_list;$/;"	m	struct:NvmeCQueue
sq_list	nvme.h	/^    QTAILQ_HEAD(, NvmeSQueue) sq_list;$/;"	m	struct:NvmeCQueue
sqe_size	femu/nvme.h	/^    uint16_t    sqe_size;$/;"	m	struct:FemuCtrl
sqe_size	nvme.h	/^    uint16_t    sqe_size;$/;"	m	struct:NvmeCtrl
sqes	femu/nvme.h	/^    uint8_t     sqes;$/;"	m	struct:NvmeIdCtrl
sqid	femu/nvme.h	/^    uint16_t    sqid;$/;"	m	struct:NvmeCreateSq
sqid	femu/nvme.h	/^    uint16_t    sqid;$/;"	m	struct:NvmeErrorLog
sqid	femu/nvme.h	/^    uint16_t    sqid;$/;"	m	struct:NvmeSQueue
sqid	nvme.h	/^    uint16_t    sqid;$/;"	m	struct:NvmeSQueue
sra	fdc.c	/^    uint8_t sra;$/;"	m	struct:FDCtrl	file:
srb	fdc.c	/^    uint8_t srb;$/;"	m	struct:FDCtrl	file:
sring	dataplane/xen-block.c	/^    void *sring;$/;"	m	struct:XenBlockDataPlane	file:
ssd	femu/bbssd/backup/ftl.h	/^struct ssd {$/;"	s
ssd	femu/bbssd/ftl.h	/^struct ssd {$/;"	s
ssd	femu/nvme.h	/^    struct ssd      *ssd;$/;"	m	struct:FemuCtrl	typeref:struct:FemuCtrl::ssd
ssd_advance_status	femu/bbssd/backup/ftl.c	/^static uint64_t ssd_advance_status(struct ssd *ssd, struct ppa *ppa, struct$/;"	f	file:
ssd_advance_status	femu/bbssd/ftl.c	/^static uint64_t ssd_advance_status(struct ssd *ssd, struct ppa *ppa, struct$/;"	f	file:
ssd_advance_write_pointer	femu/bbssd/backup/ftl.c	/^static void ssd_advance_write_pointer(struct ssd *ssd)$/;"	f	file:
ssd_advance_write_pointer	femu/bbssd/ftl.c	/^static void ssd_advance_write_pointer(struct ssd *ssd)$/;"	f	file:
ssd_channel	femu/bbssd/backup/ftl.h	/^struct ssd_channel {$/;"	s
ssd_channel	femu/bbssd/ftl.h	/^struct ssd_channel {$/;"	s
ssd_init	femu/bbssd/backup/ftl.c	/^void ssd_init(FemuCtrl *n)$/;"	f
ssd_init	femu/bbssd/ftl.c	/^void ssd_init(FemuCtrl *n)$/;"	f
ssd_init_ch	femu/bbssd/backup/ftl.c	/^static void ssd_init_ch(struct ssd_channel *ch, struct ssdparams *spp)$/;"	f	file:
ssd_init_ch	femu/bbssd/ftl.c	/^static void ssd_init_ch(struct ssd_channel *ch, struct ssdparams *spp)$/;"	f	file:
ssd_init_lines	femu/bbssd/backup/ftl.c	/^static void ssd_init_lines(struct ssd *ssd)$/;"	f	file:
ssd_init_lines	femu/bbssd/ftl.c	/^static void ssd_init_lines(struct ssd *ssd)$/;"	f	file:
ssd_init_maptbl	femu/bbssd/backup/ftl.c	/^static void ssd_init_maptbl(struct ssd *ssd)$/;"	f	file:
ssd_init_maptbl	femu/bbssd/ftl.c	/^static void ssd_init_maptbl(struct ssd *ssd)$/;"	f	file:
ssd_init_nand_blk	femu/bbssd/backup/ftl.c	/^static void ssd_init_nand_blk(struct nand_block *blk, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_blk	femu/bbssd/ftl.c	/^static void ssd_init_nand_blk(struct nand_block *blk, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_lun	femu/bbssd/backup/ftl.c	/^static void ssd_init_nand_lun(struct nand_lun *lun, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_lun	femu/bbssd/ftl.c	/^static void ssd_init_nand_lun(struct nand_lun *lun, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_page	femu/bbssd/backup/ftl.c	/^static void ssd_init_nand_page(struct nand_page *pg, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_page	femu/bbssd/ftl.c	/^static void ssd_init_nand_page(struct nand_page *pg, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_plane	femu/bbssd/backup/ftl.c	/^static void ssd_init_nand_plane(struct nand_plane *pl, struct ssdparams *spp)$/;"	f	file:
ssd_init_nand_plane	femu/bbssd/ftl.c	/^static void ssd_init_nand_plane(struct nand_plane *pl, struct ssdparams *spp)$/;"	f	file:
ssd_init_params	femu/bbssd/backup/ftl.c	/^static void ssd_init_params(struct ssdparams *spp)$/;"	f	file:
ssd_init_params	femu/bbssd/ftl.c	/^static void ssd_init_params(struct ssdparams *spp)$/;"	f	file:
ssd_init_rmap	femu/bbssd/backup/ftl.c	/^static void ssd_init_rmap(struct ssd *ssd)$/;"	f	file:
ssd_init_rmap	femu/bbssd/ftl.c	/^static void ssd_init_rmap(struct ssd *ssd)$/;"	f	file:
ssd_init_write_pointer	femu/bbssd/backup/ftl.c	/^static void ssd_init_write_pointer(struct ssd *ssd)$/;"	f	file:
ssd_init_write_pointer	femu/bbssd/ftl.c	/^static void ssd_init_write_pointer(struct ssd *ssd)$/;"	f	file:
ssd_read	femu/bbssd/backup/ftl.c	/^static uint64_t ssd_read(struct ssd *ssd, NvmeRequest *req)$/;"	f	file:
ssd_read	femu/bbssd/ftl.c	/^static uint64_t ssd_read(struct ssd *ssd, NvmeRequest *req)$/;"	f	file:
ssd_write	femu/bbssd/backup/ftl.c	/^static uint64_t ssd_write(struct ssd *ssd, NvmeRequest *req)$/;"	f	file:
ssd_write	femu/bbssd/ftl.c	/^static uint64_t ssd_write(struct ssd *ssd, NvmeRequest *req)$/;"	f	file:
ssdname	femu/bbssd/backup/ftl.h	/^    char *ssdname;$/;"	m	struct:ssd
ssdname	femu/bbssd/ftl.h	/^    char *ssdname;$/;"	m	struct:ssd
ssdparams	femu/bbssd/backup/ftl.h	/^struct ssdparams {$/;"	s
ssdparams	femu/bbssd/ftl.h	/^struct ssdparams {$/;"	s
ssvid	femu/nvme.h	/^    uint16_t    ssvid;$/;"	m	struct:NvmeIdCtrl
start	dataplane/xen-block.c	/^    off_t start;$/;"	m	struct:XenBlockRequest	file:
start_block	femu/nvme.h	/^    uint64_t        start_block;$/;"	m	struct:NvmeNamespace
start_ctrl	femu/nvme.h	/^    int      (*start_ctrl)(struct FemuCtrl *);$/;"	m	struct:FemuExtCtrlOps
start_sect	hd-geometry.c	/^        uint32_t start_sect;        \/* starting sector counting from 0 *\/$/;"	m	struct:partition	file:
start_time	femu/nvme.h	/^    time_t      start_time;$/;"	m	struct:FemuCtrl
starting	dataplane/virtio-blk.c	/^    bool starting;$/;"	m	struct:VirtIOBlockDataPlane	file:
starttime_ms	nvme.h	/^    uint64_t    starttime_ms;$/;"	m	struct:NvmeCtrl
state	femu/nvme.h	/^    void     *state;$/;"	m	struct:FemuExtCtrlOps
state	femu/nvme.h	/^    void *state;$/;"	m	struct:NvmeNamespace
state	femu/ocssd/oc12.h	/^    uint32_t state;$/;"	m	struct:oc12_metadata_format
state	femu/ocssd/oc20.h	/^    uint8_t state;$/;"	m	struct:Oc20ChunkState
state	m25p80.c	/^    uint8_t state;$/;"	m	struct:Flash	file:
state	tc58128.c	/^    state_t state;$/;"	m	struct:__anon54	file:
state_t	tc58128.c	/^typedef enum { WAIT, READ1, READ2, READ3 } state_t;$/;"	t	typeref:enum:__anon53	file:
status	dataplane/xen-block.c	/^    int16_t status;$/;"	m	struct:XenBlockRequest	file:
status	femu/bbssd/backup/ftl.h	/^    int status;$/;"	m	struct:nand_page
status	femu/bbssd/ftl.h	/^    int status;$/;"	m	struct:nand_page
status	femu/nvme.h	/^    uint16_t                status;$/;"	m	struct:NvmeRequest
status	femu/nvme.h	/^    uint16_t    status;$/;"	m	struct:NvmeCqe
status	nand.c	/^    int status;$/;"	m	struct:NANDFlashState	file:
status	nvme.h	/^    uint16_t                status;$/;"	m	struct:NvmeRequest
status	pflash_cfi01.c	/^    uint8_t status;$/;"	m	struct:PFlashCFI01	file:
status	pflash_cfi02.c	/^    uint8_t status;$/;"	m	struct:PFlashCFI02	file:
status	xen_blkif.h	/^    int16_t         status;          \/* BLKIF_RSP_???       *\/$/;"	m	struct:blkif_x86_32_response
status	xen_blkif.h	/^    int16_t         status;          \/* BLKIF_RSP_???       *\/$/;"	m	struct:blkif_x86_64_response
status0	fdc.c	/^    uint8_t status0;$/;"	m	struct:FDCtrl	file:
status1	fdc.c	/^    uint8_t status1;$/;"	m	struct:FDCtrl	file:
status2	fdc.c	/^    uint8_t status2;$/;"	m	struct:FDCtrl	file:
status_field	femu/nvme.h	/^    uint16_t    status_field;$/;"	m	struct:NvmeErrorLog
step	femu/inc/pqueue.h	/^    size_t step;                \/**< growth stepping setting *\/$/;"	m	struct:pqueue_t
stime	femu/bbssd/backup/ftl.h	/^    int64_t stime; \/* Coperd: request arrival time *\/$/;"	m	struct:nand_cmd
stime	femu/bbssd/ftl.h	/^    int64_t stime; \/* Coperd: request arrival time *\/$/;"	m	struct:nand_cmd
stime	femu/nvme.h	/^    int64_t                 stime;$/;"	m	struct:NvmeRequest
stopping	dataplane/virtio-blk.c	/^    bool stopping;$/;"	m	struct:VirtIOBlockDataPlane	file:
storage	m25p80.c	/^    uint8_t *storage;$/;"	m	struct:Flash	file:
storage	nand.c	/^    uint8_t *storage;$/;"	m	struct:NANDFlashState	file:
storage	pflash_cfi01.c	/^    void *storage;$/;"	m	struct:PFlashCFI01	file:
storage	pflash_cfi02.c	/^    void *storage;$/;"	m	struct:PFlashCFI02	file:
strict	femu/ocssd/oc12.h	/^    uint8_t     strict;$/;"	m	struct:Oc12Ctrl
submit_requests	virtio-blk.c	/^static inline void submit_requests(BlockBackend *blk, MultiReqBuffer *mrb,$/;"	f	file:
subnqn	femu/nvme.h	/^    uint8_t     subnqn[256];$/;"	m	struct:NvmeIdCtrl
subtree_is_valid	femu/lib/pqueue.c	/^static int subtree_is_valid(pqueue_t *q, int pos)$/;"	f	file:
sun4m_fdc_class_init	fdc.c	/^static void sun4m_fdc_class_init(ObjectClass *klass, void *data)$/;"	f	file:
sun4m_fdc_info	fdc.c	/^static const TypeInfo sun4m_fdc_info = {$/;"	v	file:
sun4m_fdc_initfn	fdc.c	/^static void sun4m_fdc_initfn(Object *obj)$/;"	f	file:
sun4m_fdc_properties	fdc.c	/^static Property sun4m_fdc_properties[] = {$/;"	v	file:
sun4m_fdctrl_init	fdc.c	/^void sun4m_fdctrl_init(qemu_irq irq, hwaddr io_base,$/;"	f
sw_prog_marker	femu/nvme.h	/^    uint32_t    sw_prog_marker;$/;"	m	struct:NvmeFeatureVal
swim_block_ops	swim.c	/^static const BlockDevOps swim_block_ops = {$/;"	v	file:
swim_bus_info	swim.c	/^static const TypeInfo swim_bus_info = {$/;"	v	file:
swim_change_cb	swim.c	/^static void swim_change_cb(void *opaque, bool load, Error **errp)$/;"	f	file:
swim_drive_class_init	swim.c	/^static void swim_drive_class_init(ObjectClass *klass, void *data)$/;"	f	file:
swim_drive_info	swim.c	/^static const TypeInfo swim_drive_info = {$/;"	v	file:
swim_drive_properties	swim.c	/^static Property swim_drive_properties[] = {$/;"	v	file:
swim_drive_realize	swim.c	/^static void swim_drive_realize(DeviceState *qdev, Error **errp)$/;"	f	file:
swim_register_types	swim.c	/^static void swim_register_types(void)$/;"	f	file:
swimctrl_mem_ops	swim.c	/^static const MemoryRegionOps swimctrl_mem_ops = {$/;"	v	file:
swimctrl_read	swim.c	/^static uint64_t swimctrl_read(void *opaque, hwaddr reg, unsigned size)$/;"	f	file:
swimctrl_write	swim.c	/^static void swimctrl_write(void *opaque, hwaddr reg, uint64_t value,$/;"	f	file:
sys_ind	hd-geometry.c	/^        uint8_t sys_ind;            \/* What partition type *\/$/;"	m	struct:partition	file:
sysbus_fdc_class_init	fdc.c	/^static void sysbus_fdc_class_init(ObjectClass *klass, void *data)$/;"	f	file:
sysbus_fdc_common_class_init	fdc.c	/^static void sysbus_fdc_common_class_init(ObjectClass *klass, void *data)$/;"	f	file:
sysbus_fdc_common_initfn	fdc.c	/^static void sysbus_fdc_common_initfn(Object *obj)$/;"	f	file:
sysbus_fdc_common_realize	fdc.c	/^static void sysbus_fdc_common_realize(DeviceState *dev, Error **errp)$/;"	f	file:
sysbus_fdc_info	fdc.c	/^static const TypeInfo sysbus_fdc_info = {$/;"	v	file:
sysbus_fdc_initfn	fdc.c	/^static void sysbus_fdc_initfn(Object *obj)$/;"	f	file:
sysbus_fdc_properties	fdc.c	/^static Property sysbus_fdc_properties[] = {$/;"	v	file:
sysbus_fdc_type_info	fdc.c	/^static const TypeInfo sysbus_fdc_type_info = {$/;"	v	file:
sysbus_swim_class_init	swim.c	/^static void sysbus_swim_class_init(ObjectClass *oc, void *data)$/;"	f	file:
sysbus_swim_info	swim.c	/^static const TypeInfo sysbus_swim_info = {$/;"	v	file:
sysbus_swim_init	swim.c	/^static void sysbus_swim_init(Object *obj)$/;"	f	file:
sysbus_swim_realize	swim.c	/^static void sysbus_swim_realize(DeviceState *dev, Error **errp)$/;"	f	file:
sysbus_swim_reset	swim.c	/^static void sysbus_swim_reset(DeviceState *d)$/;"	f	file:
t_acc_ns	femu/bbssd/hmb_types.h	/^	uint64_t t_acc_ns;$/;"	m	struct:HmbTime
t_prev_ns	femu/bbssd/hmb_types.h	/^	uint64_t t_prev_ns;$/;"	m	struct:HmbTime
table_ST_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *table_ST_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
table_ST_size	femu/bbssd/hmb_types.h	/^	uint64_t      table_ST_size;$/;"	m	struct:HmbSpaceMgmtCtrl
table_bm_ST_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *table_bm_ST_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
table_bm_ST_size	femu/bbssd/hmb_types.h	/^	uint64_t      table_bm_ST_size;$/;"	m	struct:HmbSpaceMgmtCtrl
table_bm_split_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr **table_bm_split_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
table_cnt	femu/bbssd/hmb_types.h	/^	uint32_t table_cnt; \/* # used entries in the cache metadata list *\/$/;"	m	struct:HmbSpaceMgmtCtrl
table_cnt_max	femu/bbssd/hmb_types.h	/^	uint32_t table_cnt_max; \/* # maximum entries in the cache metadata list *\/$/;"	m	struct:HmbSpaceMgmtCtrl
table_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr **table_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
table_size_max	femu/bbssd/hmb_types.h	/^	uint64_t table_size_max; \/* multiple of HmbSpaceMgmtCtrl->cache_unit *\/$/;"	m	struct:HmbSpaceMgmtCtrl
table_split_mapped	femu/bbssd/hmb_types.h	/^	HmbMappedAddr **table_split_mapped;$/;"	m	struct:HmbSpaceMgmtCtrl
table_split_num	femu/bbssd/hmb_types.h	/^	uint16_t      table_split_num;$/;"	m	struct:HmbSpaceMgmtCtrl
table_split_unit	femu/bbssd/hmb_types.h	/^	uint32_t      table_split_unit;$/;"	m	struct:HmbSpaceMgmtCtrl
tail	femu/inc/rte_ring.h	/^	volatile uint32_t tail;  \/**< Prod\/consumer tail. *\/$/;"	m	struct:rte_ring_headtail
tail	femu/nvme.h	/^    uint32_t    tail;$/;"	m	struct:NvmeCQueue
tail	femu/nvme.h	/^    uint32_t    tail;$/;"	m	struct:NvmeSQueue
tail	nvme.h	/^    uint32_t    tail;$/;"	m	struct:NvmeCQueue
tail	nvme.h	/^    uint32_t    tail;$/;"	m	struct:NvmeSQueue
tbem	femu/ocssd/oc12.h	/^    uint32_t    tbem;$/;"	m	struct:Oc12IdGroup
tbem	femu/ocssd/oc20.h	/^    uint32_t tbem;$/;"	m	struct:Oc20IdPerf
tbet	femu/ocssd/oc12.h	/^    uint32_t    tbet;$/;"	m	struct:Oc12IdGroup
tbet	femu/ocssd/oc20.h	/^    uint32_t tbet;$/;"	m	struct:Oc20IdPerf
tbl	femu/nvme.h	/^    uint64_t        *tbl;$/;"	m	struct:NvmeNamespace
tbl_dsk_start_offset	femu/nvme.h	/^    uint64_t        tbl_dsk_start_offset;$/;"	m	struct:NvmeNamespace
tbl_entries	femu/nvme.h	/^    uint32_t        tbl_entries;$/;"	m	struct:NvmeNamespace
tblid	femu/ocssd/oc12.h	/^    uint8_t     tblid[4];$/;"	m	struct:Oc12Bbt
tblks	femu/ocssd/oc12.h	/^    uint32_t    tblks;$/;"	m	struct:Oc12Bbt
tc58128	tc58128.c	/^static sh7750_io_device tc58128 = {$/;"	v	file:
tc58128_cb	tc58128.c	/^static int tc58128_cb(uint16_t porta, uint16_t portb,$/;"	f	file:
tc58128_dev	tc58128.c	/^} tc58128_dev;$/;"	t	typeref:struct:__anon54	file:
tc58128_devs	tc58128.c	/^static tc58128_dev tc58128_devs[2];$/;"	v	file:
tc58128_init	tc58128.c	/^int tc58128_init(struct SH7750State *s, const char *zone1, const char *zone2)$/;"	f
tdr	fdc.c	/^    uint8_t tdr;$/;"	m	struct:FDCtrl	file:
tdresv	femu/ocssd/oc12.h	/^    uint32_t    tdresv;$/;"	m	struct:Oc12Bbt
temp_thresh	femu/nvme.h	/^    uint32_t    temp_thresh;$/;"	m	struct:NvmeFeatureVal
temp_thresh_hi	nvme.h	/^        uint16_t temp_thresh_hi;$/;"	m	struct:NvmeFeatureVal::__anon46
temp_thresh_low	nvme.h	/^        uint16_t temp_thresh_low;$/;"	m	struct:NvmeFeatureVal::__anon46
temp_warn_issued	femu/nvme.h	/^    uint8_t     temp_warn_issued;$/;"	m	struct:FemuCtrl
temperature	femu/nvme.h	/^    uint16_t    temperature;$/;"	m	struct:FemuCtrl
temperature	femu/nvme.h	/^    uint8_t     temperature[2];$/;"	m	struct:NvmeSmartLog
temperature	nvme.h	/^    uint16_t    temperature;$/;"	m	struct:NvmeCtrl
tfact	femu/ocssd/oc12.h	/^    uint32_t    tfact;$/;"	m	struct:Oc12Bbt
tgrown	femu/ocssd/oc12.h	/^    uint32_t    tgrown;$/;"	m	struct:Oc12Bbt
thresv	femu/ocssd/oc12.h	/^    uint32_t    thresv;$/;"	m	struct:Oc12Bbt
timer	femu/nvme.h	/^    QEMUTimer   *timer;$/;"	m	struct:NvmeCQueue
timer	nvme.h	/^    QEMUTimer   *timer;$/;"	m	struct:NvmeCQueue
timer	nvme.h	/^    QEMUTimer   *timer;$/;"	m	struct:NvmeSQueue
timer	pflash_cfi02.c	/^    QEMUTimer timer;$/;"	m	struct:PFlashCFI02	file:
timer0	fdc.c	/^    uint8_t timer0;$/;"	m	struct:FDCtrl	file:
timer1	fdc.c	/^    uint8_t timer1;$/;"	m	struct:FDCtrl	file:
timer_WB	femu/bbssd/hmb_types.h	/^	QEMUTimer *timer_WB;$/;"	m	struct:HmbSpaceMgmtCtrl
timestamp_set_qemu_clock_ms	nvme.h	/^    uint64_t    timestamp_set_qemu_clock_ms;    \/* QEMU clock time *\/$/;"	m	struct:NvmeCtrl
tlc_tbl	femu/nand/nand.h	/^static int tlc_tbl[MAX_SUPPORTED_PAGES_PER_BLOCK];$/;"	v
tnvmcap	femu/nvme.h	/^    uint8_t     tnvmcap[16];$/;"	m	struct:NvmeIdCtrl
to_ftl	femu/bbssd/backup/ftl.h	/^    struct rte_ring **to_ftl;$/;"	m	struct:ssd	typeref:struct:ssd::rte_ring
to_ftl	femu/bbssd/ftl.h	/^    struct rte_ring **to_ftl;$/;"	m	struct:ssd	typeref:struct:ssd::rte_ring
to_ftl	femu/nvme.h	/^    struct rte_ring **to_ftl;$/;"	m	struct:FemuCtrl	typeref:struct:FemuCtrl::rte_ring
to_poller	femu/bbssd/backup/ftl.h	/^    struct rte_ring **to_poller;$/;"	m	struct:ssd	typeref:struct:ssd::rte_ring
to_poller	femu/bbssd/ftl.h	/^    struct rte_ring **to_poller;$/;"	m	struct:ssd	typeref:struct:ssd::rte_ring
to_poller	femu/nvme.h	/^    struct rte_ring **to_poller;$/;"	m	struct:FemuCtrl	typeref:struct:FemuCtrl::rte_ring
toggle_dq2	pflash_cfi02.c	/^static inline void toggle_dq2(PFlashCFI02 *pfl)$/;"	f	file:
toggle_dq6	pflash_cfi02.c	/^static inline void toggle_dq6(PFlashCFI02 *pfl)$/;"	f	file:
toggle_dq7	pflash_cfi02.c	/^static inline void toggle_dq7(PFlashCFI02 *pfl)$/;"	f	file:
total_secs	femu/ocssd/oc12.h	/^    uint32_t    total_secs;$/;"	m	struct:Oc12Params
total_sectors	pflash_cfi02.c	/^    uint32_t total_sectors;$/;"	m	struct:PFlashCFI02	file:
total_units	femu/ocssd/oc12.h	/^    uint32_t    total_units;$/;"	m	struct:Oc12Params
tprm	femu/ocssd/oc12.h	/^    uint32_t    tprm;$/;"	m	struct:Oc12IdGroup
tprm	femu/ocssd/oc20.h	/^    uint32_t tprm;$/;"	m	struct:Oc20IdPerf
tprt	femu/ocssd/oc12.h	/^    uint32_t    tprt;$/;"	m	struct:Oc12IdGroup
tprt	femu/ocssd/oc20.h	/^    uint32_t tprt;$/;"	m	struct:Oc20IdPerf
track	fdc.c	/^    uint8_t track;$/;"	m	struct:FDrive	file:
trdm	femu/ocssd/oc12.h	/^    uint32_t    trdm;$/;"	m	struct:Oc12IdGroup
trdm	femu/ocssd/oc20.h	/^    uint32_t trdm;$/;"	m	struct:Oc20IdPerf
trdt	femu/ocssd/oc12.h	/^    uint32_t    trdt;$/;"	m	struct:Oc12IdGroup
trdt	femu/ocssd/oc20.h	/^    uint32_t trdt;$/;"	m	struct:Oc20IdPerf
tt_blks	femu/bbssd/backup/ftl.h	/^    int tt_blks;      \/* total # of blocks in the SSD *\/$/;"	m	struct:ssdparams
tt_blks	femu/bbssd/ftl.h	/^    int tt_blks;      \/* total # of blocks in the SSD *\/$/;"	m	struct:ssdparams
tt_lines	femu/bbssd/backup/ftl.h	/^    int tt_lines;$/;"	m	struct:line_mgmt
tt_lines	femu/bbssd/backup/ftl.h	/^    int tt_lines;$/;"	m	struct:ssdparams
tt_lines	femu/bbssd/ftl.h	/^    int tt_lines;$/;"	m	struct:line_mgmt
tt_lines	femu/bbssd/ftl.h	/^    int tt_lines;$/;"	m	struct:ssdparams
tt_luns	femu/bbssd/backup/ftl.h	/^    int tt_luns;      \/* total # of LUNs in the SSD *\/$/;"	m	struct:ssdparams
tt_luns	femu/bbssd/ftl.h	/^    int tt_luns;      \/* total # of LUNs in the SSD *\/$/;"	m	struct:ssdparams
tt_pgs	femu/bbssd/backup/ftl.h	/^    int tt_pgs;       \/* total # of pages in the SSD *\/$/;"	m	struct:ssdparams
tt_pgs	femu/bbssd/ftl.h	/^    int tt_pgs;       \/* total # of pages in the SSD *\/$/;"	m	struct:ssdparams
tt_pls	femu/bbssd/backup/ftl.h	/^    int tt_pls;       \/* total # of planes in the SSD *\/$/;"	m	struct:ssdparams
tt_pls	femu/bbssd/ftl.h	/^    int tt_pls;       \/* total # of planes in the SSD *\/$/;"	m	struct:ssdparams
tt_secs	femu/bbssd/backup/ftl.h	/^    int tt_secs;      \/* # of sectors in the SSD *\/$/;"	m	struct:ssdparams
tt_secs	femu/bbssd/ftl.h	/^    int tt_secs;      \/* # of sectors in the SSD *\/$/;"	m	struct:ssdparams
type	fdc.c	/^        FloppyDriveType type;$/;"	m	struct:FDCtrl::__anon17	file:
type	femu/bbssd/backup/ftl.h	/^    int type;$/;"	m	struct:nand_cmd
type	femu/bbssd/ftl.h	/^    int type;$/;"	m	struct:nand_cmd
type	femu/nvme.h	/^    uint8_t     type;$/;"	m	struct:NvmeRangeType
type	femu/nvme.h	/^    uint8_t  type;$/;"	m	struct:NvmeSglDescriptor
type	femu/ocssd/oc20.h	/^    uint8_t type;$/;"	m	struct:Oc20ChunkState
type_init	pflash_cfi01.c	/^type_init(pflash_cfi01_register_types)$/;"	f
type_init	pflash_cfi02.c	/^type_init(pflash_cfi02_register_types)$/;"	f
uncorrectable	femu/nvme.h	/^    unsigned long   *uncorrectable;$/;"	m	struct:NvmeNamespace
uniform_nb_blocs	pflash_cfi02.c	/^    uint32_t uniform_nb_blocs;$/;"	m	struct:PFlashCFI02	file:
uniform_sector_len	pflash_cfi02.c	/^    uint32_t uniform_sector_len;$/;"	m	struct:PFlashCFI02	file:
units_read	nvme.c	/^    uint64_t units_read;$/;"	m	struct:nvme_stats	file:
units_written	nvme.c	/^    uint64_t units_written;$/;"	m	struct:nvme_stats	file:
unlikely	femu/inc/rte_branch_prediction.h	38;"	d
unlock_addr0	pflash_cfi02.c	/^    uint16_t unlock_addr0;$/;"	m	struct:PFlashCFI02	file:
unlock_addr1	pflash_cfi02.c	/^    uint16_t unlock_addr1;$/;"	m	struct:PFlashCFI02	file:
unsafe_shutdowns	femu/nvme.h	/^    uint64_t    unsafe_shutdowns[2];$/;"	m	struct:NvmeSmartLog
unvmcap	femu/nvme.h	/^    uint8_t     unvmcap[16];$/;"	m	struct:NvmeIdCtrl
update_tail	femu/inc/rte_ring.h	/^update_tail(struct rte_ring_headtail *ht, uint32_t old_val, uint32_t new_val,$/;"	f
update_tail	femu/inc/rte_ring_generic.h	/^update_tail(struct rte_ring_headtail *ht, uint32_t old_val, uint32_t new_val,$/;"	f
upg_rd_lat_ns	femu/nvme.h	/^    int64_t upg_rd_lat_ns; \/* upper page in MLC\/TLC\/QLC *\/$/;"	m	struct:FemuCtrl
upg_wr_lat_ns	femu/nvme.h	/^    int64_t upg_wr_lat_ns;$/;"	m	struct:FemuCtrl
urgency	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *urgency;$/;"	m	struct:HmbSpaceMgmtCtrl
urgency	femu/bbssd/hmb_types.h	/^	uint64_t urgency:  3;$/;"	m	struct:HmbSharedEnt
usable	femu/bbssd/hmb_types.h	/^	uint64_t usable :  1;  $/;"	m	struct:HmbSharedEnt
use_intel_id	nvme.h	/^    bool     use_intel_id;$/;"	m	struct:NvmeParams
user_feature_bits	vhost-user-blk.c	/^static const int user_feature_bits[] = {$/;"	v	file:
util	femu/nvme.h	/^    unsigned long   *util;$/;"	m	struct:NvmeNamespace
uuid	femu/nvme.h	/^    QemuUUID        uuid;$/;"	m	struct:FemuCtrl
uuid	femu/zns/zns.h	/^    QemuUUID uuid;$/;"	m	struct:NvmeNamespaceParams
v	dataplane/xen-block.c	/^    QEMUIOVector v;$/;"	m	struct:XenBlockRequest	file:
valid_lpn	femu/bbssd/backup/ftl.c	/^static inline bool valid_lpn(struct ssd *ssd, uint64_t lpn)$/;"	f	file:
valid_lpn	femu/bbssd/ftl.c	/^static inline bool valid_lpn(struct ssd *ssd, uint64_t lpn)$/;"	f	file:
valid_ppa	femu/bbssd/backup/ftl.c	/^static inline bool valid_ppa(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
valid_ppa	femu/bbssd/ftl.c	/^static inline bool valid_ppa(struct ssd *ssd, struct ppa *ppa)$/;"	f	file:
value	fdc.c	/^    uint8_t value;$/;"	m	struct:FDCtrlCommand	file:
value	femu/ocssd/oc12.h	/^    uint8_t     value;$/;"	m	struct:Oc12BbtSet
vbd_name_to_disk	xen-block.c	/^static int vbd_name_to_disk(const char *name, const char **endp,$/;"	f	file:
vdev	dataplane/virtio-blk.c	/^    VirtIODevice *vdev;$/;"	m	struct:VirtIOBlockDataPlane	file:
vector	femu/nvme.h	/^    uint32_t    vector;$/;"	m	struct:NvmeCQueue
vector	nvme.h	/^    uint32_t    vector;$/;"	m	struct:NvmeCQueue
vector_poll_started	femu/nvme.h	/^    bool        vector_poll_started;$/;"	m	struct:FemuCtrl
ver	femu/nvme.h	/^    uint32_t    ver;$/;"	m	struct:NvmeIdCtrl
ver	femu/ocssd/oc20.h	/^    } ver;$/;"	m	struct:Oc20NamespaceGeometry	typeref:struct:Oc20NamespaceGeometry::__anon18
ver_id	femu/ocssd/oc12.h	/^    uint8_t     ver_id;$/;"	m	struct:Oc12IdCtrl
verid	femu/ocssd/oc12.h	/^    uint16_t    verid;$/;"	m	struct:Oc12Bbt
version	fdc.c	/^    uint8_t version;$/;"	m	struct:FDCtrl	file:
version	femu/ocssd/oc20.h	/^    uint32_t version;$/;"	m	struct:Oc20Header
vhost_user_blk_chr_closed_bh	vhost-user-blk.c	/^static void vhost_user_blk_chr_closed_bh(void *opaque)$/;"	f	file:
vhost_user_blk_class_init	vhost-user-blk.c	/^static void vhost_user_blk_class_init(ObjectClass *klass, void *data)$/;"	f	file:
vhost_user_blk_connect	vhost-user-blk.c	/^static int vhost_user_blk_connect(DeviceState *dev)$/;"	f	file:
vhost_user_blk_device_realize	vhost-user-blk.c	/^static void vhost_user_blk_device_realize(DeviceState *dev, Error **errp)$/;"	f	file:
vhost_user_blk_device_unrealize	vhost-user-blk.c	/^static void vhost_user_blk_device_unrealize(DeviceState *dev)$/;"	f	file:
vhost_user_blk_disconnect	vhost-user-blk.c	/^static void vhost_user_blk_disconnect(DeviceState *dev)$/;"	f	file:
vhost_user_blk_event	vhost-user-blk.c	/^static void vhost_user_blk_event(void *opaque, QEMUChrEvent event)$/;"	f	file:
vhost_user_blk_get_features	vhost-user-blk.c	/^static uint64_t vhost_user_blk_get_features(VirtIODevice *vdev,$/;"	f	file:
vhost_user_blk_handle_config_change	vhost-user-blk.c	/^static int vhost_user_blk_handle_config_change(struct vhost_dev *dev)$/;"	f	file:
vhost_user_blk_handle_output	vhost-user-blk.c	/^static void vhost_user_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)$/;"	f	file:
vhost_user_blk_info	vhost-user-blk.c	/^static const TypeInfo vhost_user_blk_info = {$/;"	v	file:
vhost_user_blk_instance_init	vhost-user-blk.c	/^static void vhost_user_blk_instance_init(Object *obj)$/;"	f	file:
vhost_user_blk_properties	vhost-user-blk.c	/^static Property vhost_user_blk_properties[] = {$/;"	v	file:
vhost_user_blk_reset	vhost-user-blk.c	/^static void vhost_user_blk_reset(VirtIODevice *vdev)$/;"	f	file:
vhost_user_blk_set_config	vhost-user-blk.c	/^static void vhost_user_blk_set_config(VirtIODevice *vdev, const uint8_t *config)$/;"	f	file:
vhost_user_blk_set_status	vhost-user-blk.c	/^static void vhost_user_blk_set_status(VirtIODevice *vdev, uint8_t status)$/;"	f	file:
vhost_user_blk_start	vhost-user-blk.c	/^static int vhost_user_blk_start(VirtIODevice *vdev)$/;"	f	file:
vhost_user_blk_stop	vhost-user-blk.c	/^static void vhost_user_blk_stop(VirtIODevice *vdev)$/;"	f	file:
vhost_user_blk_update_config	vhost-user-blk.c	/^static void vhost_user_blk_update_config(VirtIODevice *vdev, uint8_t *config)$/;"	f	file:
victimAll	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *victimAll;$/;"	m	struct:HmbSpaceMgmtCtrl
victimRc	femu/bbssd/hmb_types.h	/^	HmbMappedAddr *victimRc;$/;"	m	struct:HmbSpaceMgmtCtrl
victim_line_cmp_pri	femu/bbssd/backup/ftl.c	/^static inline int victim_line_cmp_pri(pqueue_pri_t next, pqueue_pri_t curr)$/;"	f	file:
victim_line_cmp_pri	femu/bbssd/ftl.c	/^static inline int victim_line_cmp_pri(pqueue_pri_t next, pqueue_pri_t curr)$/;"	f	file:
victim_line_cnt	femu/bbssd/backup/ftl.h	/^    int victim_line_cnt;$/;"	m	struct:line_mgmt
victim_line_cnt	femu/bbssd/ftl.h	/^    int victim_line_cnt;$/;"	m	struct:line_mgmt
victim_line_get_pos	femu/bbssd/backup/ftl.c	/^static inline size_t victim_line_get_pos(void *a)$/;"	f	file:
victim_line_get_pos	femu/bbssd/ftl.c	/^static inline size_t victim_line_get_pos(void *a)$/;"	f	file:
victim_line_get_pri	femu/bbssd/backup/ftl.c	/^static inline pqueue_pri_t victim_line_get_pri(void *a)$/;"	f	file:
victim_line_get_pri	femu/bbssd/ftl.c	/^static inline pqueue_pri_t victim_line_get_pri(void *a)$/;"	f	file:
victim_line_pq	femu/bbssd/backup/ftl.h	/^    pqueue_t *victim_line_pq;$/;"	m	struct:line_mgmt
victim_line_pq	femu/bbssd/ftl.h	/^    pqueue_t *victim_line_pq;$/;"	m	struct:line_mgmt
victim_line_set_pos	femu/bbssd/backup/ftl.c	/^static inline void victim_line_set_pos(void *a, size_t pos)$/;"	f	file:
victim_line_set_pos	femu/bbssd/ftl.c	/^static inline void victim_line_set_pos(void *a, size_t pos)$/;"	f	file:
victim_line_set_pri	femu/bbssd/backup/ftl.c	/^static inline void victim_line_set_pri(void *a, pqueue_pri_t pri)$/;"	f	file:
victim_line_set_pri	femu/bbssd/ftl.c	/^static inline void victim_line_set_pri(void *a, pqueue_pri_t pri)$/;"	f	file:
vid	femu/nvme.h	/^    uint16_t    vid;$/;"	m	struct:FemuCtrl
vid	femu/nvme.h	/^    uint16_t    vid;$/;"	m	struct:NvmeIdCtrl
vid	femu/nvme.h	/^    uint16_t vid;$/;"	m	struct:NvmeParams
virq	femu/nvme.h	/^    int32_t     virq;$/;"	m	struct:NvmeCQueue
virtio_blk_class_init	virtio-blk.c	/^static void virtio_blk_class_init(ObjectClass *klass, void *data)$/;"	f	file:
virtio_blk_data_plane_create	dataplane/virtio-blk.c	/^bool virtio_blk_data_plane_create(VirtIODevice *vdev, VirtIOBlkConf *conf,$/;"	f
virtio_blk_data_plane_destroy	dataplane/virtio-blk.c	/^void virtio_blk_data_plane_destroy(VirtIOBlockDataPlane *s)$/;"	f
virtio_blk_data_plane_handle_output	dataplane/virtio-blk.c	/^static bool virtio_blk_data_plane_handle_output(VirtIODevice *vdev,$/;"	f	file:
virtio_blk_data_plane_notify	dataplane/virtio-blk.c	/^void virtio_blk_data_plane_notify(VirtIOBlockDataPlane *s, VirtQueue *vq)$/;"	f
virtio_blk_data_plane_start	dataplane/virtio-blk.c	/^int virtio_blk_data_plane_start(VirtIODevice *vdev)$/;"	f
virtio_blk_data_plane_stop	dataplane/virtio-blk.c	/^void virtio_blk_data_plane_stop(VirtIODevice *vdev)$/;"	f
virtio_blk_data_plane_stop_bh	dataplane/virtio-blk.c	/^static void virtio_blk_data_plane_stop_bh(void *opaque)$/;"	f	file:
virtio_blk_device_realize	virtio-blk.c	/^static void virtio_blk_device_realize(DeviceState *dev, Error **errp)$/;"	f	file:
virtio_blk_device_unrealize	virtio-blk.c	/^static void virtio_blk_device_unrealize(DeviceState *dev)$/;"	f	file:
virtio_blk_discard_write_zeroes_complete	virtio-blk.c	/^static void virtio_blk_discard_write_zeroes_complete(void *opaque, int ret)$/;"	f	file:
virtio_blk_dma_restart_bh	virtio-blk.c	/^static void virtio_blk_dma_restart_bh(void *opaque)$/;"	f	file:
virtio_blk_dma_restart_cb	virtio-blk.c	/^static void virtio_blk_dma_restart_cb(void *opaque, int running,$/;"	f	file:
virtio_blk_flush_complete	virtio-blk.c	/^static void virtio_blk_flush_complete(void *opaque, int ret)$/;"	f	file:
virtio_blk_free_request	virtio-blk.c	/^static void virtio_blk_free_request(VirtIOBlockReq *req)$/;"	f	file:
virtio_blk_get_features	virtio-blk.c	/^static uint64_t virtio_blk_get_features(VirtIODevice *vdev, uint64_t features,$/;"	f	file:
virtio_blk_get_request	virtio-blk.c	/^static VirtIOBlockReq *virtio_blk_get_request(VirtIOBlock *s, VirtQueue *vq)$/;"	f	file:
virtio_blk_handle_discard_write_zeroes	virtio-blk.c	/^static uint8_t virtio_blk_handle_discard_write_zeroes(VirtIOBlockReq *req,$/;"	f	file:
virtio_blk_handle_flush	virtio-blk.c	/^static void virtio_blk_handle_flush(VirtIOBlockReq *req, MultiReqBuffer *mrb)$/;"	f	file:
virtio_blk_handle_output	virtio-blk.c	/^static void virtio_blk_handle_output(VirtIODevice *vdev, VirtQueue *vq)$/;"	f	file:
virtio_blk_handle_output_do	virtio-blk.c	/^static void virtio_blk_handle_output_do(VirtIOBlock *s, VirtQueue *vq)$/;"	f	file:
virtio_blk_handle_request	virtio-blk.c	/^static int virtio_blk_handle_request(VirtIOBlockReq *req, MultiReqBuffer *mrb)$/;"	f	file:
virtio_blk_handle_rw_error	virtio-blk.c	/^static int virtio_blk_handle_rw_error(VirtIOBlockReq *req, int error,$/;"	f	file:
virtio_blk_handle_scsi	virtio-blk.c	/^static void virtio_blk_handle_scsi(VirtIOBlockReq *req)$/;"	f	file:
virtio_blk_handle_scsi_req	virtio-blk.c	/^static int virtio_blk_handle_scsi_req(VirtIOBlockReq *req)$/;"	f	file:
virtio_blk_handle_vq	virtio-blk.c	/^bool virtio_blk_handle_vq(VirtIOBlock *s, VirtQueue *vq)$/;"	f
virtio_blk_info	virtio-blk.c	/^static const TypeInfo virtio_blk_info = {$/;"	v	file:
virtio_blk_init_request	virtio-blk.c	/^static void virtio_blk_init_request(VirtIOBlock *s, VirtQueue *vq,$/;"	f	file:
virtio_blk_instance_init	virtio-blk.c	/^static void virtio_blk_instance_init(Object *obj)$/;"	f	file:
virtio_blk_ioctl_complete	virtio-blk.c	/^static void virtio_blk_ioctl_complete(void *opaque, int status)$/;"	f	file:
virtio_blk_load_device	virtio-blk.c	/^static int virtio_blk_load_device(VirtIODevice *vdev, QEMUFile *f,$/;"	f	file:
virtio_blk_process_queued_requests	virtio-blk.c	/^void virtio_blk_process_queued_requests(VirtIOBlock *s, bool is_bh)$/;"	f
virtio_blk_properties	virtio-blk.c	/^static Property virtio_blk_properties[] = {$/;"	v	file:
virtio_blk_req_complete	virtio-blk.c	/^static void virtio_blk_req_complete(VirtIOBlockReq *req, unsigned char status)$/;"	f	file:
virtio_blk_reset	virtio-blk.c	/^static void virtio_blk_reset(VirtIODevice *vdev)$/;"	f	file:
virtio_blk_resize	virtio-blk.c	/^static void virtio_blk_resize(void *opaque)$/;"	f	file:
virtio_blk_rw_complete	virtio-blk.c	/^static void virtio_blk_rw_complete(void *opaque, int ret)$/;"	f	file:
virtio_blk_save_device	virtio-blk.c	/^static void virtio_blk_save_device(VirtIODevice *vdev, QEMUFile *f)$/;"	f	file:
virtio_blk_sect_range_ok	virtio-blk.c	/^static bool virtio_blk_sect_range_ok(VirtIOBlock *dev,$/;"	f	file:
virtio_blk_set_config	virtio-blk.c	/^static void virtio_blk_set_config(VirtIODevice *vdev, const uint8_t *config)$/;"	f	file:
virtio_blk_set_config_size	virtio-blk.c	/^static void virtio_blk_set_config_size(VirtIOBlock *s, uint64_t host_features)$/;"	f	file:
virtio_blk_set_status	virtio-blk.c	/^static void virtio_blk_set_status(VirtIODevice *vdev, uint8_t status)$/;"	f	file:
virtio_blk_submit_multireq	virtio-blk.c	/^static void virtio_blk_submit_multireq(BlockBackend *blk, MultiReqBuffer *mrb)$/;"	f	file:
virtio_blk_update_config	virtio-blk.c	/^static void virtio_blk_update_config(VirtIODevice *vdev, uint8_t *config)$/;"	f	file:
virtio_block_ops	virtio-blk.c	/^static const BlockDevOps virtio_block_ops = {$/;"	v	file:
virtio_register_types	vhost-user-blk.c	/^static void virtio_register_types(void)$/;"	f	file:
virtio_register_types	virtio-blk.c	/^static void virtio_register_types(void)$/;"	f	file:
virtio_resize_cb	virtio-blk.c	/^static void virtio_resize_cb(void *opaque)$/;"	f	file:
vmnt	femu/ocssd/oc12.h	/^    uint8_t     vmnt;$/;"	m	struct:Oc12IdCtrl
vmstate	pflash_cfi01.c	/^    VMChangeStateEntry *vmstate;$/;"	m	struct:PFlashCFI01	file:
vmstate_ecc_state	ecc.c	/^VMStateDescription vmstate_ecc_state = {$/;"	v
vmstate_fdc	fdc.c	/^static const VMStateDescription vmstate_fdc = {$/;"	v	file:
vmstate_fdc_phase	fdc.c	/^static const VMStateDescription vmstate_fdc_phase = {$/;"	v	file:
vmstate_fdc_reset_sensei	fdc.c	/^static const VMStateDescription vmstate_fdc_reset_sensei = {$/;"	v	file:
vmstate_fdc_result_timer	fdc.c	/^static const VMStateDescription vmstate_fdc_result_timer = {$/;"	v	file:
vmstate_fdrive	fdc.c	/^static const VMStateDescription vmstate_fdrive = {$/;"	v	file:
vmstate_fdrive	swim.c	/^static const VMStateDescription vmstate_fdrive = {$/;"	v	file:
vmstate_fdrive_media_changed	fdc.c	/^static const VMStateDescription vmstate_fdrive_media_changed = {$/;"	v	file:
vmstate_fdrive_media_rate	fdc.c	/^static const VMStateDescription vmstate_fdrive_media_rate = {$/;"	v	file:
vmstate_fdrive_perpendicular	fdc.c	/^static const VMStateDescription vmstate_fdrive_perpendicular = {$/;"	v	file:
vmstate_isa_fdc	fdc.c	/^static const VMStateDescription vmstate_isa_fdc ={$/;"	v	file:
vmstate_m25p80	m25p80.c	/^static const VMStateDescription vmstate_m25p80 = {$/;"	v	file:
vmstate_m25p80_data_read_loop	m25p80.c	/^static const VMStateDescription vmstate_m25p80_data_read_loop = {$/;"	v	file:
vmstate_nand	nand.c	/^static const VMStateDescription vmstate_nand = {$/;"	v	file:
vmstate_onenand	onenand.c	/^static const VMStateDescription vmstate_onenand = {$/;"	v	file:
vmstate_pflash	pflash_cfi01.c	/^static const VMStateDescription vmstate_pflash = {$/;"	v	file:
vmstate_swim	swim.c	/^static const VMStateDescription vmstate_swim = {$/;"	v	file:
vmstate_sysbus_fdc	fdc.c	/^static const VMStateDescription vmstate_sysbus_fdc ={$/;"	v	file:
vmstate_sysbus_swim	swim.c	/^static const VMStateDescription vmstate_sysbus_swim = {$/;"	v	file:
vmstate_vhost_user_blk	vhost-user-blk.c	/^static const VMStateDescription vmstate_vhost_user_blk = {$/;"	v	file:
vmstate_virtio_blk	virtio-blk.c	/^static const VMStateDescription vmstate_virtio_blk = {$/;"	v	file:
volatile_cfg	m25p80.c	/^    uint32_t volatile_cfg;$/;"	m	struct:Flash	file:
volatile_wc	femu/nvme.h	/^    uint32_t    volatile_wc;$/;"	m	struct:NvmeFeatureVal
vpc	femu/bbssd/backup/ftl.h	/^    int vpc; \/* valid page count *\/$/;"	m	struct:nand_block
vpc	femu/bbssd/backup/ftl.h	/^    int vpc; \/* valid page count in this line *\/$/;"	m	struct:line
vpc	femu/bbssd/ftl.h	/^    int vpc; \/* valid page count *\/$/;"	m	struct:nand_block
vpc	femu/bbssd/ftl.h	/^    int vpc; \/* valid page count in this line *\/$/;"	m	struct:line
vs	femu/nvme.h	/^    uint32_t    vs;$/;"	m	struct:NvmeBar
vs	femu/nvme.h	/^    uint8_t     vs;$/;"	m	struct:NvmeErrorLog
vs	femu/nvme.h	/^    uint8_t     vs[1024];$/;"	m	struct:NvmeIdCtrl
vs	femu/nvme.h	/^    uint8_t     vs[3712];$/;"	m	struct:NvmeIdNs
vs	femu/zns/zns.h	/^    uint8_t     vs[256];$/;"	m	struct:NvmeIdNsZoned
vwc	femu/nvme.h	/^    uint8_t     vwc;$/;"	m	struct:FemuCtrl
vwc	femu/nvme.h	/^    uint8_t     vwc;$/;"	m	struct:NvmeIdCtrl
vwc	femu/nvme.h	/^    uint8_t  vwc;$/;"	m	struct:NvmeParams
vwc	nvme.h	/^    uint32_t    vwc;$/;"	m	struct:NvmeFeatureVal
w	femu/bbssd/hmb_types.h	/^	void *w;$/;"	m	struct:HmbMappedAddr
w_e_next	femu/bbssd/hmb_types.h	/^	uint32_t w_e_next;$/;"	m	struct:HmbSortedEnt
w_e_prev	femu/bbssd/hmb_types.h	/^	uint32_t w_e_prev;$/;"	m	struct:HmbSortedEnt
w_ptr	femu/zns/zns.h	/^    uint64_t        w_ptr;$/;"	m	struct:NvmeZone
wctemp	femu/nvme.h	/^    uint16_t    wctemp;$/;"	m	struct:NvmeIdCtrl
wcycle	pflash_cfi01.c	/^    uint8_t wcycle; \/* if 0, the flash is read normally *\/$/;"	m	struct:PFlashCFI01	file:
wcycle	pflash_cfi02.c	/^    int wcycle; \/* if 0, the flash is read normally *\/$/;"	m	struct:PFlashCFI02	file:
wear_index	femu/ocssd/oc20.h	/^    uint8_t wear_index;$/;"	m	struct:Oc20ChunkState
width	nand.c	/^    int width;$/;"	m	struct:__anon45	file:
width	pflash_cfi02.c	/^    uint8_t width;$/;"	m	struct:PFlashCFI02	file:
wit	femu/ocssd/oc20.h	/^    uint8_t    wit;$/;"	m	struct:Oc20NamespaceGeometry
wp	femu/bbssd/backup/ftl.h	/^    int wp; \/* current write pointer *\/$/;"	m	struct:nand_block
wp	femu/bbssd/backup/ftl.h	/^    struct write_pointer wp;$/;"	m	struct:ssd	typeref:struct:ssd::write_pointer
wp	femu/bbssd/ftl.h	/^    int wp; \/* current write pointer *\/$/;"	m	struct:nand_block
wp	femu/bbssd/ftl.h	/^    struct write_pointer wp;$/;"	m	struct:ssd	typeref:struct:ssd::write_pointer
wp	femu/ocssd/oc20.h	/^    uint64_t wp;$/;"	m	struct:Oc20ChunkState
wp	femu/zns/zns.h	/^    uint64_t    wp;$/;"	m	struct:NvmeZoneDescr
wp	nand.c	/^    uint8_t cle, ale, ce, wp, gnd;$/;"	m	struct:NANDFlashState	file:
write_atomicity	femu/nvme.h	/^    uint32_t    write_atomicity;$/;"	m	struct:NvmeFeatureVal
write_commands	nvme.c	/^    uint64_t write_commands;$/;"	m	struct:nvme_stats	file:
write_enable	m25p80.c	/^    bool write_enable;$/;"	m	struct:Flash	file:
write_pointer	femu/bbssd/backup/ftl.h	/^struct write_pointer {$/;"	s
write_pointer	femu/bbssd/ftl.h	/^struct write_pointer {$/;"	s
writeblock_size	pflash_cfi01.c	/^    unsigned int writeblock_size;$/;"	m	struct:PFlashCFI01	file:
writefail	femu/ocssd/oc20.h	/^    uint8_t *writefail;$/;"	m	struct:Oc20Namespace
writefail_fname	femu/nvme.h	/^    char *writefail_fname;$/;"	m	struct:Oc20Params
wrt	femu/ocssd/oc20.h	/^    Oc20IdWrt  wrt;$/;"	m	struct:Oc20NamespaceGeometry
ws_min	femu/nvme.h	/^    uint32_t ws_min;$/;"	m	struct:Oc20Params
ws_min	femu/ocssd/oc20.h	/^    uint32_t ws_min;$/;"	m	struct:Oc20IdWrt
ws_opt	femu/nvme.h	/^    uint32_t ws_opt;$/;"	m	struct:Oc20Params
ws_opt	femu/ocssd/oc20.h	/^    uint32_t ws_opt;$/;"	m	struct:Oc20IdWrt
x86_32_part	xen_blkif.h	/^    blkif_x86_32_back_ring_t x86_32_part;$/;"	m	union:blkif_back_rings
x86_64_part	xen_blkif.h	/^    blkif_x86_64_back_ring_t x86_64_part;$/;"	m	union:blkif_back_rings
xen_block_backend_info	xen-block.c	/^static const XenBackendInfo xen_block_backend_info = {$/;"	v	file:
xen_block_blockdev_add	xen-block.c	/^static char *xen_block_blockdev_add(const char *id, QDict *qdict,$/;"	f	file:
xen_block_blockdev_del	xen-block.c	/^static void xen_block_blockdev_del(const char *node_name, Error **errp)$/;"	f	file:
xen_block_class_init	xen-block.c	/^static void xen_block_class_init(ObjectClass *class, void *data)$/;"	f	file:
xen_block_complete_aio	dataplane/xen-block.c	/^static void xen_block_complete_aio(void *opaque, int ret)$/;"	f	file:
xen_block_complete_request	dataplane/xen-block.c	/^static void xen_block_complete_request(XenBlockRequest *request)$/;"	f	file:
xen_block_connect	xen-block.c	/^static void xen_block_connect(XenDevice *xendev, Error **errp)$/;"	f	file:
xen_block_copy_request	dataplane/xen-block.c	/^static int xen_block_copy_request(XenBlockRequest *request)$/;"	f	file:
xen_block_dataplane_bh	dataplane/xen-block.c	/^static void xen_block_dataplane_bh(void *opaque)$/;"	f	file:
xen_block_dataplane_create	dataplane/xen-block.c	/^XenBlockDataPlane *xen_block_dataplane_create(XenDevice *xendev,$/;"	f
xen_block_dataplane_destroy	dataplane/xen-block.c	/^void xen_block_dataplane_destroy(XenBlockDataPlane *dataplane)$/;"	f
xen_block_dataplane_event	dataplane/xen-block.c	/^static bool xen_block_dataplane_event(void *opaque)$/;"	f	file:
xen_block_dataplane_start	dataplane/xen-block.c	/^void xen_block_dataplane_start(XenBlockDataPlane *dataplane,$/;"	f
xen_block_dataplane_stop	dataplane/xen-block.c	/^void xen_block_dataplane_stop(XenBlockDataPlane *dataplane)$/;"	f
xen_block_dev_ops	xen-block.c	/^static const BlockDevOps xen_block_dev_ops = {$/;"	v	file:
xen_block_device_create	xen-block.c	/^static void xen_block_device_create(XenBackendInstance *backend,$/;"	f	file:
xen_block_device_destroy	xen-block.c	/^static void xen_block_device_destroy(XenBackendInstance *backend,$/;"	f	file:
xen_block_disconnect	xen-block.c	/^static void xen_block_disconnect(XenDevice *xendev, Error **errp)$/;"	f	file:
xen_block_do_aio	dataplane/xen-block.c	/^static int xen_block_do_aio(XenBlockRequest *request)$/;"	f	file:
xen_block_drive_create	xen-block.c	/^static XenBlockDrive *xen_block_drive_create(const char *id,$/;"	f	file:
xen_block_drive_destroy	xen-block.c	/^static void xen_block_drive_destroy(XenBlockDrive *drive, Error **errp)$/;"	f	file:
xen_block_drive_get_node_name	xen-block.c	/^static const char *xen_block_drive_get_node_name(XenBlockDrive *drive)$/;"	f	file:
xen_block_frontend_changed	xen-block.c	/^static void xen_block_frontend_changed(XenDevice *xendev,$/;"	f	file:
xen_block_get_name	xen-block.c	/^static char *xen_block_get_name(XenDevice *xendev, Error **errp)$/;"	f	file:
xen_block_get_request	dataplane/xen-block.c	/^static int xen_block_get_request(XenBlockDataPlane *dataplane,$/;"	f	file:
xen_block_get_vdev	xen-block.c	/^static void xen_block_get_vdev(Object *obj, Visitor *v, const char *name,$/;"	f	file:
xen_block_handle_requests	dataplane/xen-block.c	/^static bool xen_block_handle_requests(XenBlockDataPlane *dataplane)$/;"	f	file:
xen_block_iothread_create	xen-block.c	/^static XenBlockIOThread *xen_block_iothread_create(const char *id,$/;"	f	file:
xen_block_iothread_destroy	xen-block.c	/^static void xen_block_iothread_destroy(XenBlockIOThread *iothread,$/;"	f	file:
xen_block_parse_request	dataplane/xen-block.c	/^static int xen_block_parse_request(XenBlockRequest *request)$/;"	f	file:
xen_block_prop_vdev	xen-block.c	/^const PropertyInfo xen_block_prop_vdev = {$/;"	v
xen_block_props	xen-block.c	/^static Property xen_block_props[] = {$/;"	v	file:
xen_block_realize	xen-block.c	/^static void xen_block_realize(XenDevice *xendev, Error **errp)$/;"	f	file:
xen_block_register_backend	xen-block.c	/^static void xen_block_register_backend(void)$/;"	f	file:
xen_block_register_backend	xen-block.c	/^xen_backend_init(xen_block_register_backend);$/;"	v
xen_block_register_types	xen-block.c	/^static void xen_block_register_types(void)$/;"	f	file:
xen_block_resize_cb	xen-block.c	/^static void xen_block_resize_cb(void *opaque)$/;"	f	file:
xen_block_send_response	dataplane/xen-block.c	/^static int xen_block_send_response(XenBlockRequest *request)$/;"	f	file:
xen_block_set_size	xen-block.c	/^static void xen_block_set_size(XenBlockDevice *blockdev)$/;"	f	file:
xen_block_set_vdev	xen-block.c	/^static void xen_block_set_vdev(Object *obj, Visitor *v, const char *name,$/;"	f	file:
xen_block_split_discard	dataplane/xen-block.c	/^static bool xen_block_split_discard(XenBlockRequest *request,$/;"	f	file:
xen_block_start_request	dataplane/xen-block.c	/^static XenBlockRequest *xen_block_start_request(XenBlockDataPlane *dataplane)$/;"	f	file:
xen_block_type_info	xen-block.c	/^static const TypeInfo xen_block_type_info = {$/;"	v	file:
xen_block_unrealize	xen-block.c	/^static void xen_block_unrealize(XenDevice *xendev)$/;"	f	file:
xen_cdrom_class_init	xen-block.c	/^static void xen_cdrom_class_init(ObjectClass *class, void *data)$/;"	f	file:
xen_cdrom_realize	xen-block.c	/^static void xen_cdrom_realize(XenBlockDevice *blockdev, Error **errp)$/;"	f	file:
xen_cdrom_type_info	xen-block.c	/^static const TypeInfo xen_cdrom_type_info = {$/;"	v	file:
xen_cdrom_unrealize	xen-block.c	/^static void xen_cdrom_unrealize(XenBlockDevice *blockdev)$/;"	f	file:
xen_disk_class_init	xen-block.c	/^static void xen_disk_class_init(ObjectClass *class, void *data)$/;"	f	file:
xen_disk_realize	xen-block.c	/^static void xen_disk_realize(XenBlockDevice *blockdev, Error **errp)$/;"	f	file:
xen_disk_type_info	xen-block.c	/^static const TypeInfo xen_disk_type_info = {$/;"	v	file:
xen_disk_unrealize	xen-block.c	/^static void xen_disk_unrealize(XenBlockDevice *blockdev)$/;"	f	file:
xendev	dataplane/xen-block.c	/^    XenDevice *xendev;$/;"	m	struct:XenBlockDataPlane	file:
za	femu/zns/zns.h	/^    uint8_t     za;$/;"	m	struct:NvmeZoneDescr
zasl	femu/nvme.h	/^    uint8_t         zasl;$/;"	m	struct:FemuCtrl
zasl	femu/zns/zns.h	/^    uint8_t     zasl;$/;"	m	struct:NvmeIdCtrlZoned
zasl_bs	femu/nvme.h	/^    uint32_t        zasl_bs;$/;"	m	struct:FemuCtrl
zcap	femu/zns/zns.h	/^    uint64_t    zcap;$/;"	m	struct:NvmeZoneDescr
zd_extension_size	femu/nvme.h	/^    uint32_t        zd_extension_size;$/;"	m	struct:FemuCtrl
zd_extension_size	femu/zns/zns.h	/^    uint32_t zd_extension_size;$/;"	m	struct:NvmeNamespaceParams
zd_extensions	femu/nvme.h	/^    uint8_t         *zd_extensions;$/;"	m	struct:FemuCtrl
zdes	femu/zns/zns.h	/^    uint8_t     zdes;$/;"	m	struct:NvmeLBAFE
zns_admin_cmd	femu/zns/zns.c	/^static uint16_t zns_admin_cmd(FemuCtrl *n, NvmeCmd *cmd)$/;"	f	file:
zns_advance_zone_wp	femu/zns/zns.c	/^static uint64_t zns_advance_zone_wp(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_aio_zone_reset_cb	femu/zns/zns.c	/^static void zns_aio_zone_reset_cb(NvmeRequest *req, NvmeZone *zone)$/;"	f	file:
zns_aor_check	femu/zns/zns.c	/^static int zns_aor_check(NvmeNamespace *ns, uint32_t act, uint32_t opn)$/;"	f	file:
zns_aor_dec_active	femu/zns/zns.h	/^static inline void zns_aor_dec_active(NvmeNamespace *ns)$/;"	f
zns_aor_dec_open	femu/zns/zns.h	/^static inline void zns_aor_dec_open(NvmeNamespace *ns)$/;"	f
zns_aor_inc_active	femu/zns/zns.h	/^static inline void zns_aor_inc_active(NvmeNamespace *ns)$/;"	f
zns_aor_inc_open	femu/zns/zns.h	/^static inline void zns_aor_inc_open(NvmeNamespace *ns)$/;"	f
zns_assign_zone_state	femu/zns/zns.c	/^static void zns_assign_zone_state(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_auto_open_zone	femu/zns/zns.c	/^static uint16_t zns_auto_open_zone(NvmeNamespace *ns, NvmeZone *zone)$/;"	f	file:
zns_auto_transition_zone	femu/zns/zns.c	/^static void zns_auto_transition_zone(NvmeNamespace *ns)$/;"	f	file:
zns_bulk_proc_zone	femu/zns/zns.c	/^static uint16_t zns_bulk_proc_zone(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_check_bounds	femu/zns/zns.c	/^static inline uint16_t zns_check_bounds(NvmeNamespace *ns, uint64_t slba,$/;"	f	file:
zns_check_dulbe	femu/zns/zns.c	/^static uint16_t zns_check_dulbe(NvmeNamespace *ns, uint64_t slba, uint32_t nlb)$/;"	f	file:
zns_check_zone_read	femu/zns/zns.c	/^static uint16_t zns_check_zone_read(NvmeNamespace *ns, uint64_t slba,$/;"	f	file:
zns_check_zone_state_for_read	femu/zns/zns.c	/^static uint16_t zns_check_zone_state_for_read(NvmeZone *zone)$/;"	f	file:
zns_check_zone_state_for_write	femu/zns/zns.c	/^static uint16_t zns_check_zone_state_for_write(NvmeZone *zone)$/;"	f	file:
zns_check_zone_write	femu/zns/zns.c	/^static uint16_t zns_check_zone_write(FemuCtrl *n, NvmeNamespace *ns,$/;"	f	file:
zns_clear_zone	femu/zns/zns.c	/^static void zns_clear_zone(NvmeNamespace *ns, NvmeZone *zone)$/;"	f	file:
zns_close_zone	femu/zns/zns.c	/^static uint16_t zns_close_zone(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_do_write	femu/zns/zns.c	/^static uint16_t zns_do_write(FemuCtrl *n, NvmeRequest *req, bool append,$/;"	f	file:
zns_do_zone_op	femu/zns/zns.c	/^static uint16_t zns_do_zone_op(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_exit	femu/zns/zns.c	/^static void zns_exit(FemuCtrl *n)$/;"	f	file:
zns_finalize_zoned_write	femu/zns/zns.c	/^static void zns_finalize_zoned_write(NvmeNamespace *ns, NvmeRequest *req,$/;"	f	file:
zns_finish_zone	femu/zns/zns.c	/^static uint16_t zns_finish_zone(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_get_mgmt_zone_slba_idx	femu/zns/zns.c	/^static uint16_t zns_get_mgmt_zone_slba_idx(FemuCtrl *n, NvmeCmd *c,$/;"	f	file:
zns_get_zd_extension	femu/zns/zns.h	/^static inline uint8_t *zns_get_zd_extension(NvmeNamespace *ns, uint32_t zone_idx)$/;"	f
zns_get_zone_by_slba	femu/zns/zns.c	/^static inline NvmeZone *zns_get_zone_by_slba(NvmeNamespace *ns, uint64_t slba)$/;"	f	file:
zns_get_zone_state	femu/zns/zns.h	/^static inline NvmeZoneState zns_get_zone_state(NvmeZone *zone)$/;"	f
zns_init	femu/zns/zns.c	/^static void zns_init(FemuCtrl *n, Error **errp)$/;"	f	file:
zns_init_zone_cap	femu/zns/zns.c	/^static int zns_init_zone_cap(FemuCtrl *n)$/;"	f	file:
zns_init_zone_geometry	femu/zns/zns.c	/^static int zns_init_zone_geometry(NvmeNamespace *ns, Error **errp)$/;"	f	file:
zns_init_zone_identify	femu/zns/zns.c	/^static void zns_init_zone_identify(FemuCtrl *n, NvmeNamespace *ns, int lba_index)$/;"	f	file:
zns_init_zoned_state	femu/zns/zns.c	/^static void zns_init_zoned_state(NvmeNamespace *ns)$/;"	f	file:
zns_io_cmd	femu/zns/zns.c	/^static uint16_t zns_io_cmd(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
zns_l2b	femu/zns/zns.h	/^static inline size_t zns_l2b(NvmeNamespace *ns, uint64_t lba)$/;"	f
zns_map_dptr	femu/zns/zns.c	/^static uint16_t zns_map_dptr(FemuCtrl *n, size_t len, NvmeRequest *req)$/;"	f	file:
zns_ns_cleanup	femu/zns/zns.c	/^void zns_ns_cleanup(NvmeNamespace *ns)$/;"	f
zns_ns_lbads	femu/zns/zns.h	/^static inline uint8_t zns_ns_lbads(NvmeNamespace *ns)$/;"	f
zns_ns_lbaf	femu/zns/zns.h	/^static inline NvmeLBAF *zns_ns_lbaf(NvmeNamespace *ns)$/;"	f
zns_ns_nlbas	femu/zns/zns.h	/^static inline uint64_t zns_ns_nlbas(NvmeNamespace *ns)$/;"	f
zns_ns_shutdown	femu/zns/zns.c	/^void zns_ns_shutdown(NvmeNamespace *ns)$/;"	f
zns_nsid	femu/zns/zns.h	/^static inline uint32_t zns_nsid(NvmeNamespace *ns)$/;"	f
zns_offline_zone	femu/zns/zns.c	/^static uint16_t zns_offline_zone(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_open_zone	femu/zns/zns.c	/^static uint16_t zns_open_zone(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_read	femu/zns/zns.c	/^static uint16_t zns_read(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
zns_reset_zone	femu/zns/zns.c	/^static uint16_t zns_reset_zone(NvmeNamespace *ns, NvmeZone *zone,$/;"	f	file:
zns_set_ctrl	femu/zns/zns.c	/^static void zns_set_ctrl(FemuCtrl *n)$/;"	f	file:
zns_set_ctrl_str	femu/zns/zns.c	/^static void zns_set_ctrl_str(FemuCtrl *n)$/;"	f	file:
zns_set_zd_ext	femu/zns/zns.c	/^static uint16_t zns_set_zd_ext(NvmeNamespace *ns, NvmeZone *zone)$/;"	f	file:
zns_set_zone_state	femu/zns/zns.h	/^static inline void zns_set_zone_state(NvmeZone *zone, NvmeZoneState state)$/;"	f
zns_start_ctrl	femu/zns/zns.c	/^static int zns_start_ctrl(FemuCtrl *n)$/;"	f	file:
zns_wp_is_valid	femu/zns/zns.h	/^static inline bool zns_wp_is_valid(NvmeZone *zone)$/;"	f
zns_write	femu/zns/zns.c	/^static uint16_t zns_write(FemuCtrl *n, NvmeNamespace *ns, NvmeCmd *cmd,$/;"	f	file:
zns_zone_append	femu/zns/zns.c	/^static inline uint16_t zns_zone_append(FemuCtrl *n, NvmeRequest *req)$/;"	f	file:
zns_zone_idx	femu/zns/zns.c	/^static inline uint32_t zns_zone_idx(NvmeNamespace *ns, uint64_t slba)$/;"	f	file:
zns_zone_matches_filter	femu/zns/zns.c	/^static bool zns_zone_matches_filter(uint32_t zafs, NvmeZone *zl)$/;"	f	file:
zns_zone_mgmt_recv	femu/zns/zns.c	/^static uint16_t zns_zone_mgmt_recv(FemuCtrl *n, NvmeRequest *req)$/;"	f	file:
zns_zone_mgmt_send	femu/zns/zns.c	/^static uint16_t zns_zone_mgmt_send(FemuCtrl *n, NvmeRequest *req)$/;"	f	file:
zns_zone_rd_boundary	femu/zns/zns.h	/^static inline uint64_t zns_zone_rd_boundary(NvmeNamespace *ns, NvmeZone *zone)$/;"	f
zns_zone_reset_ctx	femu/zns/zns.c	/^struct zns_zone_reset_ctx {$/;"	s	file:
zns_zone_wr_boundary	femu/zns/zns.h	/^static inline uint64_t zns_zone_wr_boundary(NvmeZone *zone)$/;"	f
zns_zoned_ns_shutdown	femu/zns/zns.c	/^static void zns_zoned_ns_shutdown(NvmeNamespace *ns)$/;"	f	file:
zoc	femu/zns/zns.h	/^    uint16_t    zoc;$/;"	m	struct:NvmeIdNsZoned
zone	femu/zns/zns.c	/^    NvmeZone    *zone;$/;"	m	struct:zns_zone_reset_ctx	file:
zone_array	femu/nvme.h	/^    NvmeZone        *zone_array;$/;"	m	struct:FemuCtrl
zone_cap_bs	femu/nvme.h	/^    bool            zone_cap_bs;$/;"	m	struct:FemuCtrl
zone_cap_bs	femu/zns/zns.h	/^    uint64_t zone_cap_bs;$/;"	m	struct:NvmeNamespaceParams
zone_capacity	femu/nvme.h	/^    uint64_t        zone_capacity;$/;"	m	struct:FemuCtrl
zone_size	femu/nvme.h	/^    uint64_t        zone_size;$/;"	m	struct:FemuCtrl
zone_size_bs	femu/nvme.h	/^    uint64_t        zone_size_bs;$/;"	m	struct:FemuCtrl
zone_size_bs	femu/zns/zns.h	/^    uint64_t zone_size_bs;$/;"	m	struct:NvmeNamespaceParams
zone_size_log2	femu/nvme.h	/^    uint32_t        zone_size_log2;$/;"	m	struct:FemuCtrl
zoned	femu/nvme.h	/^    bool            zoned;$/;"	m	struct:FemuCtrl
zoned	femu/zns/zns.h	/^    bool     zoned;$/;"	m	struct:NvmeNamespaceParams
zs	femu/zns/zns.h	/^    uint8_t     zs;$/;"	m	struct:NvmeZoneDescr
zslba	femu/zns/zns.h	/^    uint64_t    zslba;$/;"	m	struct:NvmeZoneDescr
zsze	femu/zns/zns.h	/^    uint64_t    zsze;$/;"	m	struct:NvmeLBAFE
zt	femu/zns/zns.h	/^    uint8_t     zt;$/;"	m	struct:NvmeZoneDescr
